// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should work with antd inline icons 1`] = `
"import _extends from '@babel/runtime/helpers/esm/extends';
import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';
import _classCallCheck from '@babel/runtime/helpers/esm/classCallCheck';
import _createClass from '@babel/runtime/helpers/esm/createClass';
import _inherits from '@babel/runtime/helpers/esm/inherits';
import _createSuper from '@babel/runtime/helpers/esm/createSuper';
import _typeof from '@babel/runtime/helpers/esm/typeof';
import * as React from 'react';
import React__default, { createContext, useContext, useEffect, useState, useMemo as useMemo$1, useRef, useCallback } from 'react';
import classNames from 'classnames';
import omit from 'rc-util/es/omit';
import ResizeObserver from 'rc-resize-observer';
import FieldForm, { FormProvider as FormProvider$1, useForm as useForm$1, Field, List as List$1 } from 'rc-field-form';
import useMemo from 'rc-util/es/hooks/useMemo';
import devWarning$1 from 'rc-util/es/warning';
import Pagination$1 from 'rc-pagination/es/locale/en_US';
import CalendarLocale from 'rc-picker/es/locale/en_US';
import RCNotification from 'rc-notification';
import _objectSpread from '@babel/runtime/helpers/esm/objectSpread2';
import _slicedToArray from '@babel/runtime/helpers/esm/slicedToArray';
import _objectWithoutProperties from '@babel/runtime/helpers/esm/objectWithoutProperties';
import { generate as generate$1, presetPrimaryColors } from '@ant-design/colors';
import { updateCSS } from 'rc-util/es/Dom/dynamicCSS';
import useRCNotification from 'rc-notification/es/useNotification';
import _regeneratorRuntime from '@babel/runtime/regenerator';
import _toConsumableArray from '@babel/runtime/helpers/esm/toConsumableArray';
import raf from 'rc-util/es/raf';
import addEventListener from 'rc-util/es/Dom/addEventListener';
import _assertThisInitialized from '@babel/runtime/helpers/esm/assertThisInitialized';
import toArray$2 from 'rc-util/es/Children/toArray';
import RcSelect, { Option as Option$2, OptGroup } from 'rc-select';
import CSSMotion, { CSSMotionList } from 'rc-motion';
import { composeRef, supportRef } from 'rc-util/es/ref';
import RcTooltip from 'rc-tooltip';
import { placements } from 'rc-tooltip/es/placements';
import useMergedState from 'rc-util/es/hooks/useMergedState';
import RcDropdown from 'rc-dropdown';
import RcMenu, { SubMenu as SubMenu$2, Item as Item$2, Divider as Divider$1, ItemGroup } from 'rc-menu';
import momentGenerateConfig from 'rc-picker/es/generate/moment';
import padStart from 'lodash/padStart';
import RCPicker, { PickerPanel, RangePicker as RangePicker$1 } from 'rc-picker';
import RcCheckbox from 'rc-checkbox';
import RcTabs, { TabPane } from 'rc-tabs';
import canUseDom from 'rc-util/es/Dom/canUseDom';
import RcCollapse from 'rc-collapse';
import debounce from 'lodash/debounce';
import SlickCarousel from '@ant-design/react-slick';
import RcCascader from 'rc-cascader';
import arrayTreeFilter from 'array-tree-filter';
import KeyCode from 'rc-util/es/KeyCode';
import RcTextArea from 'rc-textarea';
import RcDrawer from 'rc-drawer';
import getScrollBarSize from 'rc-util/es/getScrollBarSize';
import scrollIntoView from 'scroll-into-view-if-needed';
import isEqual from 'lodash/isEqual';
import FieldContext from 'rc-field-form/es/FieldContext';
import RcImage from 'rc-image';
import RcInputNumber from 'rc-input-number';
import RcPagination from 'rc-pagination';
import RcMentions from 'rc-mentions';
import Dialog from 'rc-dialog';
import * as ReactDOM from 'react-dom';
import { render, unmountComponentAtNode } from 'react-dom';
import padEnd from 'lodash/padEnd';
import { Circle as Circle$1 } from 'rc-progress';
import RcRate from 'rc-rate';
import RcSlider, { Handle, Range } from 'rc-slider';
import RcSteps from 'rc-steps';
import RcSwitch from 'rc-switch';
import RcTable, { INTERNAL_COL_DEFINE, Summary } from 'rc-table';
import { INTERNAL_HOOKS } from 'rc-table/es/Table';
import { convertChildrenToColumns } from 'rc-table/es/hooks/useColumns';
import _toArray from '@babel/runtime/helpers/esm/toArray';
import { convertDataToEntities, convertTreeToData } from 'rc-tree/es/utils/treeUtil';
import { conductCheck } from 'rc-tree/es/utils/conductUtil';
import { arrDel, arrAdd, conductExpandParent } from 'rc-tree/es/util';
import RcTree, { TreeNode } from 'rc-tree';
import RcTreeSelect, { TreeNode as TreeNode$1, SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from 'rc-tree-select';
import copy from 'copy-to-clipboard';
import RcUpload from 'rc-upload';

var IconContext = /*#__PURE__*/createContext({});

var devWarning = (function (valid, component, message) {
  devWarning$1(valid, \\"[antd: \\".concat(component, \\"] \\").concat(message));
});

var locale$1 = {
  placeholder: 'Select time',
  rangePlaceholder: ['Start time', 'End time']
};

var locale = {
  lang: _extends({
    placeholder: 'Select date',
    yearPlaceholder: 'Select year',
    quarterPlaceholder: 'Select quarter',
    monthPlaceholder: 'Select month',
    weekPlaceholder: 'Select week',
    rangePlaceholder: ['Start date', 'End date'],
    rangeYearPlaceholder: ['Start year', 'End year'],
    rangeMonthPlaceholder: ['Start month', 'End month'],
    rangeWeekPlaceholder: ['Start week', 'End week']
  }, CalendarLocale),
  timePickerLocale: _extends({}, locale$1)
}; // All settings at:

/* eslint-disable no-template-curly-in-string */
var typeTemplate = '\${label} is not a valid \${type}';
var localeValues = {
  locale: 'en',
  Pagination: Pagination$1,
  DatePicker: locale,
  TimePicker: locale$1,
  Calendar: locale,
  global: {
    placeholder: 'Please select'
  },
  Table: {
    filterTitle: 'Filter menu',
    filterConfirm: 'OK',
    filterReset: 'Reset',
    filterEmptyText: 'No filters',
    emptyText: 'No data',
    selectAll: 'Select current page',
    selectInvert: 'Invert current page',
    selectNone: 'Clear all data',
    selectionAll: 'Select all data',
    sortTitle: 'Sort',
    expand: 'Expand row',
    collapse: 'Collapse row',
    triggerDesc: 'Click to sort descending',
    triggerAsc: 'Click to sort ascending',
    cancelSort: 'Click to cancel sorting'
  },
  Modal: {
    okText: 'OK',
    cancelText: 'Cancel',
    justOkText: 'OK'
  },
  Popconfirm: {
    okText: 'OK',
    cancelText: 'Cancel'
  },
  Transfer: {
    titles: ['', ''],
    searchPlaceholder: 'Search here',
    itemUnit: 'item',
    itemsUnit: 'items',
    remove: 'Remove',
    selectCurrent: 'Select current page',
    removeCurrent: 'Remove current page',
    selectAll: 'Select all data',
    removeAll: 'Remove all data',
    selectInvert: 'Invert current page'
  },
  Upload: {
    uploading: 'Uploading...',
    removeFile: 'Remove file',
    uploadError: 'Upload error',
    previewFile: 'Preview file',
    downloadFile: 'Download file'
  },
  Empty: {
    description: 'No Data'
  },
  Icon: {
    icon: 'icon'
  },
  Text: {
    edit: 'Edit',
    copy: 'Copy',
    copied: 'Copied',
    expand: 'Expand'
  },
  PageHeader: {
    back: 'Back'
  },
  Form: {
    optional: '(optional)',
    defaultValidateMessages: {
      \\"default\\": 'Field validation error for \${label}',
      required: 'Please enter \${label}',
      \\"enum\\": '\${label} must be one of [\${enum}]',
      whitespace: '\${label} cannot be a blank character',
      date: {
        format: '\${label} date format is invalid',
        parse: '\${label} cannot be converted to a date',
        invalid: '\${label} is an invalid date'
      },
      types: {
        string: typeTemplate,
        method: typeTemplate,
        array: typeTemplate,
        object: typeTemplate,
        number: typeTemplate,
        date: typeTemplate,
        \\"boolean\\": typeTemplate,
        integer: typeTemplate,
        \\"float\\": typeTemplate,
        regexp: typeTemplate,
        email: typeTemplate,
        url: typeTemplate,
        hex: typeTemplate
      },
      string: {
        len: '\${label} must be \${len} characters',
        min: '\${label} must be at least \${min} characters',
        max: '\${label} must be up to \${max} characters',
        range: '\${label} must be between \${min}-\${max} characters'
      },
      number: {
        len: '\${label} must be equal to \${len}',
        min: '\${label} must be minimum \${min}',
        max: '\${label} must be maximum \${max}',
        range: '\${label} must be between \${min}-\${max}'
      },
      array: {
        len: 'Must be \${len} \${label}',
        min: 'At least \${min} \${label}',
        max: 'At most \${max} \${label}',
        range: 'The amount of \${label} must be between \${min}-\${max}'
      },
      pattern: {
        mismatch: '\${label} does not match the pattern \${pattern}'
      }
    }
  },
  Image: {
    preview: 'Preview'
  }
};

var runtimeLocale = _extends({}, localeValues.Modal);

function changeConfirmLocale(newLocale) {
  if (newLocale) {
    runtimeLocale = _extends(_extends({}, runtimeLocale), newLocale);
  } else {
    runtimeLocale = _extends({}, localeValues.Modal);
  }
}
function getConfirmLocale() {
  return runtimeLocale;
}

var LocaleContext = /*#__PURE__*/createContext(undefined);

var ANT_MARK = 'internalMark';

var LocaleProvider = /*#__PURE__*/function (_React$Component) {
  _inherits(LocaleProvider, _React$Component);

  var _super = _createSuper(LocaleProvider);

  function LocaleProvider(props) {
    var _this;

    _classCallCheck(this, LocaleProvider);

    _this = _super.call(this, props);
    changeConfirmLocale(props.locale && props.locale.Modal);
    devWarning(props._ANT_MARK__ === ANT_MARK, 'LocaleProvider', '\`LocaleProvider\` is deprecated. Please use \`locale\` with \`ConfigProvider\` instead: http://u.ant.design/locale');
    return _this;
  }

  _createClass(LocaleProvider, [{
    key: \\"componentDidUpdate\\",
    value: function componentDidUpdate(prevProps) {
      var locale = this.props.locale;

      if (prevProps.locale !== locale) {
        changeConfirmLocale(locale && locale.Modal);
      }
    }
  }, {
    key: \\"componentWillUnmount\\",
    value: function componentWillUnmount() {
      changeConfirmLocale();
    }
  }, {
    key: \\"render\\",
    value: function render() {
      var _this$props = this.props,
          locale = _this$props.locale,
          children = _this$props.children;
      return /*#__PURE__*/React.createElement(LocaleContext.Provider, {
        value: _extends(_extends({}, locale), {
          exist: true
        })
      }, children);
    }
  }]);

  return LocaleProvider;
}(React.Component);
LocaleProvider.defaultProps = {
  locale: {}
};

var LocaleReceiver = /*#__PURE__*/function (_React$Component) {
  _inherits(LocaleReceiver, _React$Component);

  var _super = _createSuper(LocaleReceiver);

  function LocaleReceiver() {
    _classCallCheck(this, LocaleReceiver);

    return _super.apply(this, arguments);
  }

  _createClass(LocaleReceiver, [{
    key: \\"getLocale\\",
    value: function getLocale() {
      var _this$props = this.props,
          componentName = _this$props.componentName,
          defaultLocale = _this$props.defaultLocale;
      var locale = defaultLocale || localeValues[componentName || 'global'];
      var antLocale = this.context;
      var localeFromContext = componentName && antLocale ? antLocale[componentName] : {};
      return _extends(_extends({}, typeof locale === 'function' ? locale() : locale), localeFromContext || {});
    }
  }, {
    key: \\"getLocaleCode\\",
    value: function getLocaleCode() {
      var antLocale = this.context;
      var localeCode = antLocale && antLocale.locale; // Had use LocaleProvide but didn't set locale

      if (antLocale && antLocale.exist && !localeCode) {
        return localeValues.locale;
      }

      return localeCode;
    }
  }, {
    key: \\"render\\",
    value: function render() {
      return this.props.children(this.getLocale(), this.getLocaleCode(), this.context);
    }
  }]);

  return LocaleReceiver;
}(React.Component);
LocaleReceiver.defaultProps = {
  componentName: 'global'
};
LocaleReceiver.contextType = LocaleContext;
function useLocaleReceiver(componentName, defaultLocale) {
  var antLocale = React.useContext(LocaleContext);
  var componentLocale = React.useMemo(function () {
    var locale = defaultLocale || localeValues[componentName || 'global'];
    var localeFromContext = componentName && antLocale ? antLocale[componentName] : {};
    return _extends(_extends({}, typeof locale === 'function' ? locale() : locale), localeFromContext || {});
  }, [componentName, defaultLocale, antLocale]);
  return [componentLocale];
}

var Empty$1 = function Empty() {
  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls;

  var prefixCls = getPrefixCls('empty-img-default');
  return /*#__PURE__*/React.createElement(\\"svg\\", {
    className: prefixCls,
    width: \\"184\\",
    height: \\"152\\",
    viewBox: \\"0 0 184 152\\",
    xmlns: \\"http://www.w3.org/2000/svg\\"
  }, /*#__PURE__*/React.createElement(\\"g\\", {
    fill: \\"none\\",
    fillRule: \\"evenodd\\"
  }, /*#__PURE__*/React.createElement(\\"g\\", {
    transform: \\"translate(24 31.67)\\"
  }, /*#__PURE__*/React.createElement(\\"ellipse\\", {
    className: \\"\\".concat(prefixCls, \\"-ellipse\\"),
    cx: \\"67.797\\",
    cy: \\"106.89\\",
    rx: \\"67.797\\",
    ry: \\"12.668\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    className: \\"\\".concat(prefixCls, \\"-path-1\\"),
    d: \\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    className: \\"\\".concat(prefixCls, \\"-path-2\\"),
    d: \\"M101.537 86.214L80.63 61.102c-1.001-1.207-2.507-1.867-4.048-1.867H31.724c-1.54 0-3.047.66-4.048 1.867L6.769 86.214v13.792h94.768V86.214z\\",
    transform: \\"translate(13.56)\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    className: \\"\\".concat(prefixCls, \\"-path-3\\"),
    d: \\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    className: \\"\\".concat(prefixCls, \\"-path-4\\"),
    d: \\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\\"
  })), /*#__PURE__*/React.createElement(\\"path\\", {
    className: \\"\\".concat(prefixCls, \\"-path-5\\"),
    d: \\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\\"
  }), /*#__PURE__*/React.createElement(\\"g\\", {
    className: \\"\\".concat(prefixCls, \\"-g\\"),
    transform: \\"translate(149.65 15.383)\\"
  }, /*#__PURE__*/React.createElement(\\"ellipse\\", {
    cx: \\"20.654\\",
    cy: \\"3.167\\",
    rx: \\"2.849\\",
    ry: \\"2.815\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\\"
  }))));
};

var Simple = function Simple() {
  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls;

  var prefixCls = getPrefixCls('empty-img-simple');
  return /*#__PURE__*/React.createElement(\\"svg\\", {
    className: prefixCls,
    width: \\"64\\",
    height: \\"41\\",
    viewBox: \\"0 0 64 41\\",
    xmlns: \\"http://www.w3.org/2000/svg\\"
  }, /*#__PURE__*/React.createElement(\\"g\\", {
    transform: \\"translate(0 1)\\",
    fill: \\"none\\",
    fillRule: \\"evenodd\\"
  }, /*#__PURE__*/React.createElement(\\"ellipse\\", {
    className: \\"\\".concat(prefixCls, \\"-ellipse\\"),
    cx: \\"32\\",
    cy: \\"33\\",
    rx: \\"32\\",
    ry: \\"7\\"
  }), /*#__PURE__*/React.createElement(\\"g\\", {
    className: \\"\\".concat(prefixCls, \\"-g\\"),
    fillRule: \\"nonzero\\"
  }, /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M55 12.76L44.854 1.258C44.367.474 43.656 0 42.907 0H21.093c-.749 0-1.46.474-1.947 1.257L9 12.761V22h46v-9.24z\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M41.613 15.931c0-1.605.994-2.93 2.227-2.931H55v18.137C55 33.26 53.68 35 52.05 35h-40.1C10.32 35 9 33.259 9 31.137V13h11.16c1.233 0 2.227 1.323 2.227 2.928v.022c0 1.605 1.005 2.901 2.237 2.901h14.752c1.232 0 2.237-1.308 2.237-2.913v-.007z\\",
    className: \\"\\".concat(prefixCls, \\"-path\\")
  }))));
};

var __rest$16 = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var defaultEmptyImg = /*#__PURE__*/React.createElement(Empty$1, null);
var simpleEmptyImg = /*#__PURE__*/React.createElement(Simple, null);

var Empty = function Empty(_a) {
  var className = _a.className,
      customizePrefixCls = _a.prefixCls,
      _a$image = _a.image,
      image = _a$image === void 0 ? defaultEmptyImg : _a$image,
      description = _a.description,
      children = _a.children,
      imageStyle = _a.imageStyle,
      restProps = __rest$16(_a, [\\"className\\", \\"prefixCls\\", \\"image\\", \\"description\\", \\"children\\", \\"imageStyle\\"]);

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  return /*#__PURE__*/React.createElement(LocaleReceiver, {
    componentName: \\"Empty\\"
  }, function (locale) {
    var _classNames;

    var prefixCls = getPrefixCls('empty', customizePrefixCls);
    var des = typeof description !== 'undefined' ? description : locale.description;
    var alt = typeof des === 'string' ? des : 'empty';
    var imageNode = null;

    if (typeof image === 'string') {
      imageNode = /*#__PURE__*/React.createElement(\\"img\\", {
        alt: alt,
        src: image
      });
    } else {
      imageNode = image;
    }

    return /*#__PURE__*/React.createElement(\\"div\\", _extends({
      className: classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-normal\\"), image === simpleEmptyImg), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), _classNames), className)
    }, restProps), /*#__PURE__*/React.createElement(\\"div\\", {
      className: \\"\\".concat(prefixCls, \\"-image\\"),
      style: imageStyle
    }, imageNode), des && /*#__PURE__*/React.createElement(\\"div\\", {
      className: \\"\\".concat(prefixCls, \\"-description\\")
    }, des), children && /*#__PURE__*/React.createElement(\\"div\\", {
      className: \\"\\".concat(prefixCls, \\"-footer\\")
    }, children));
  });
};

Empty.PRESENTED_IMAGE_DEFAULT = defaultEmptyImg;
Empty.PRESENTED_IMAGE_SIMPLE = simpleEmptyImg;

var renderEmpty = function renderEmpty(componentName) {
  return /*#__PURE__*/React.createElement(ConfigConsumer, null, function (_ref) {
    var getPrefixCls = _ref.getPrefixCls;
    var prefix = getPrefixCls('empty');

    switch (componentName) {
      case 'Table':
      case 'List':
        return /*#__PURE__*/React.createElement(Empty, {
          image: Empty.PRESENTED_IMAGE_SIMPLE
        });

      case 'Select':
      case 'TreeSelect':
      case 'Cascader':
      case 'Transfer':
      case 'Mentions':
        return /*#__PURE__*/React.createElement(Empty, {
          image: Empty.PRESENTED_IMAGE_SIMPLE,
          className: \\"\\".concat(prefix, \\"-small\\")
        });

      default:
        return /*#__PURE__*/React.createElement(Empty, null);
    }
  });
};

var defaultGetPrefixCls = function defaultGetPrefixCls(suffixCls, customizePrefixCls) {
  if (customizePrefixCls) return customizePrefixCls;
  return suffixCls ? \\"ant-\\".concat(suffixCls) : 'ant';
};

var ConfigContext = /*#__PURE__*/React.createContext({
  // We provide a default function for Context without provider
  getPrefixCls: defaultGetPrefixCls,
  renderEmpty: renderEmpty
});
var ConfigConsumer = ConfigContext.Consumer;
/** @deprecated Use hooks instead. This is a legacy function */

function withConfigConsumer(config) {
  return function withConfigConsumerFunc(Component) {
    // Wrap with ConfigConsumer. Since we need compatible with react 15, be care when using ref methods
    var SFC = function SFC(props) {
      return /*#__PURE__*/React.createElement(ConfigConsumer, null, function (configProps) {
        var basicPrefixCls = config.prefixCls;
        var getPrefixCls = configProps.getPrefixCls;
        var customizePrefixCls = props.prefixCls;
        var prefixCls = getPrefixCls(basicPrefixCls, customizePrefixCls);
        return /*#__PURE__*/React.createElement(Component, _extends({}, configProps, props, {
          prefixCls: prefixCls
        }));
      });
    };

    var cons = Component.constructor;
    var name = cons && cons.displayName || Component.name || 'Component';
    SFC.displayName = \\"withConfigConsumer(\\".concat(name, \\")\\");
    return SFC;
  };
}

var SizeContext$1 = /*#__PURE__*/React.createContext(undefined);
var SizeContextProvider$1 = function SizeContextProvider(_ref) {
  var children = _ref.children,
      size = _ref.size;
  return /*#__PURE__*/React.createElement(SizeContext$1.Consumer, null, function (originSize) {
    return /*#__PURE__*/React.createElement(SizeContext$1.Provider, {
      value: size || originSize
    }, children);
  });
};

// This icon file is generated automatically.
var LoadingOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"0 0 1024 1024\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z\\" } }] }, \\"name\\": \\"loading\\", \\"theme\\": \\"outlined\\" };

function warning(valid, message) {
  devWarning$1(valid, \\"[@ant-design/icons] \\".concat(message));
}
function isIconDefinition(target) {
  return _typeof(target) === 'object' && typeof target.name === 'string' && typeof target.theme === 'string' && (_typeof(target.icon) === 'object' || typeof target.icon === 'function');
}
function normalizeAttrs() {
  var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return Object.keys(attrs).reduce(function (acc, key) {
    var val = attrs[key];

    switch (key) {
      case 'class':
        acc.className = val;
        delete acc.class;
        break;

      default:
        acc[key] = val;
    }

    return acc;
  }, {});
}
function generate(node, key, rootProps) {
  if (!rootProps) {
    return /*#__PURE__*/React__default.createElement(node.tag, _objectSpread({
      key: key
    }, normalizeAttrs(node.attrs)), (node.children || []).map(function (child, index) {
      return generate(child, \\"\\".concat(key, \\"-\\").concat(node.tag, \\"-\\").concat(index));
    }));
  }

  return /*#__PURE__*/React__default.createElement(node.tag, _objectSpread(_objectSpread({
    key: key
  }, normalizeAttrs(node.attrs)), rootProps), (node.children || []).map(function (child, index) {
    return generate(child, \\"\\".concat(key, \\"-\\").concat(node.tag, \\"-\\").concat(index));
  }));
}
function getSecondaryColor(primaryColor) {
  // choose the second color
  return generate$1(primaryColor)[0];
}
function normalizeTwoToneColors(twoToneColor) {
  if (!twoToneColor) {
    return [];
  }

  return Array.isArray(twoToneColor) ? twoToneColor : [twoToneColor];
} // These props make sure that the SVG behaviours like general text.
// Reference: https://blog.prototypr.io/align-svg-icons-to-text-and-say-goodbye-to-font-icons-d44b3d7b26b4

var svgBaseProps = {
  width: '1em',
  height: '1em',
  fill: 'currentColor',
  'aria-hidden': 'true',
  focusable: 'false'
};
var iconStyles = \\"\\\\n.anticon {\\\\n  display: inline-block;\\\\n  color: inherit;\\\\n  font-style: normal;\\\\n  line-height: 0;\\\\n  text-align: center;\\\\n  text-transform: none;\\\\n  vertical-align: -0.125em;\\\\n  text-rendering: optimizeLegibility;\\\\n  -webkit-font-smoothing: antialiased;\\\\n  -moz-osx-font-smoothing: grayscale;\\\\n}\\\\n\\\\n.anticon > * {\\\\n  line-height: 1;\\\\n}\\\\n\\\\n.anticon svg {\\\\n  display: inline-block;\\\\n}\\\\n\\\\n.anticon::before {\\\\n  display: none;\\\\n}\\\\n\\\\n.anticon .anticon-icon {\\\\n  display: block;\\\\n}\\\\n\\\\n.anticon[tabindex] {\\\\n  cursor: pointer;\\\\n}\\\\n\\\\n.anticon-spin::before,\\\\n.anticon-spin {\\\\n  display: inline-block;\\\\n  -webkit-animation: loadingCircle 1s infinite linear;\\\\n  animation: loadingCircle 1s infinite linear;\\\\n}\\\\n\\\\n@-webkit-keyframes loadingCircle {\\\\n  100% {\\\\n    -webkit-transform: rotate(360deg);\\\\n    transform: rotate(360deg);\\\\n  }\\\\n}\\\\n\\\\n@keyframes loadingCircle {\\\\n  100% {\\\\n    -webkit-transform: rotate(360deg);\\\\n    transform: rotate(360deg);\\\\n  }\\\\n}\\\\n\\";
var useInsertStyles = function useInsertStyles() {
  var styleStr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : iconStyles;

  var _useContext = useContext(IconContext),
      csp = _useContext.csp;

  useEffect(function () {
    updateCSS(styleStr, '@ant-design-icons', {
      prepend: true,
      csp: csp
    });
  }, []);
};

var _excluded$1 = [\\"icon\\", \\"className\\", \\"onClick\\", \\"style\\", \\"primaryColor\\", \\"secondaryColor\\"];
var twoToneColorPalette = {
  primaryColor: '#333',
  secondaryColor: '#E6E6E6',
  calculated: false
};

function setTwoToneColors(_ref) {
  var primaryColor = _ref.primaryColor,
      secondaryColor = _ref.secondaryColor;
  twoToneColorPalette.primaryColor = primaryColor;
  twoToneColorPalette.secondaryColor = secondaryColor || getSecondaryColor(primaryColor);
  twoToneColorPalette.calculated = !!secondaryColor;
}

function getTwoToneColors() {
  return _objectSpread({}, twoToneColorPalette);
}

var IconBase = function IconBase(props) {
  var icon = props.icon,
      className = props.className,
      onClick = props.onClick,
      style = props.style,
      primaryColor = props.primaryColor,
      secondaryColor = props.secondaryColor,
      restProps = _objectWithoutProperties(props, _excluded$1);

  var colors = twoToneColorPalette;

  if (primaryColor) {
    colors = {
      primaryColor: primaryColor,
      secondaryColor: secondaryColor || getSecondaryColor(primaryColor)
    };
  }

  useInsertStyles();
  warning(isIconDefinition(icon), \\"icon should be icon definiton, but got \\".concat(icon));

  if (!isIconDefinition(icon)) {
    return null;
  }

  var target = icon;

  if (target && typeof target.icon === 'function') {
    target = _objectSpread(_objectSpread({}, target), {}, {
      icon: target.icon(colors.primaryColor, colors.secondaryColor)
    });
  }

  return generate(target.icon, \\"svg-\\".concat(target.name), _objectSpread({
    className: className,
    onClick: onClick,
    style: style,
    'data-icon': target.name,
    width: '1em',
    height: '1em',
    fill: 'currentColor',
    'aria-hidden': 'true'
  }, restProps));
};

IconBase.displayName = 'IconReact';
IconBase.getTwoToneColors = getTwoToneColors;
IconBase.setTwoToneColors = setTwoToneColors;

function setTwoToneColor(twoToneColor) {
  var _normalizeTwoToneColo = normalizeTwoToneColors(twoToneColor),
      _normalizeTwoToneColo2 = _slicedToArray(_normalizeTwoToneColo, 2),
      primaryColor = _normalizeTwoToneColo2[0],
      secondaryColor = _normalizeTwoToneColo2[1];

  return IconBase.setTwoToneColors({
    primaryColor: primaryColor,
    secondaryColor: secondaryColor
  });
}
function getTwoToneColor() {
  var colors = IconBase.getTwoToneColors();

  if (!colors.calculated) {
    return colors.primaryColor;
  }

  return [colors.primaryColor, colors.secondaryColor];
}

var _excluded = [\\"className\\", \\"icon\\", \\"spin\\", \\"rotate\\", \\"tabIndex\\", \\"onClick\\", \\"twoToneColor\\"];
// should move it to antd main repo?

setTwoToneColor('#1890ff');
var Icon = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _classNames;

  var className = props.className,
      icon = props.icon,
      spin = props.spin,
      rotate = props.rotate,
      tabIndex = props.tabIndex,
      onClick = props.onClick,
      twoToneColor = props.twoToneColor,
      restProps = _objectWithoutProperties(props, _excluded);

  var _React$useContext = React.useContext(IconContext),
      _React$useContext$pre = _React$useContext.prefixCls,
      prefixCls = _React$useContext$pre === void 0 ? 'anticon' : _React$useContext$pre;

  var classString = classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-\\").concat(icon.name), !!icon.name), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-spin\\"), !!spin || icon.name === 'loading'), _classNames), className);
  var iconTabIndex = tabIndex;

  if (iconTabIndex === undefined && onClick) {
    iconTabIndex = -1;
  }

  var svgStyle = rotate ? {
    msTransform: \\"rotate(\\".concat(rotate, \\"deg)\\"),
    transform: \\"rotate(\\".concat(rotate, \\"deg)\\")
  } : undefined;

  var _normalizeTwoToneColo = normalizeTwoToneColors(twoToneColor),
      _normalizeTwoToneColo2 = _slicedToArray(_normalizeTwoToneColo, 2),
      primaryColor = _normalizeTwoToneColo2[0],
      secondaryColor = _normalizeTwoToneColo2[1];

  return /*#__PURE__*/React.createElement(\\"span\\", _objectSpread(_objectSpread({
    role: \\"img\\",
    \\"aria-label\\": icon.name
  }, restProps), {}, {
    ref: ref,
    tabIndex: iconTabIndex,
    onClick: onClick,
    className: classString
  }), /*#__PURE__*/React.createElement(IconBase, {
    icon: icon,
    primaryColor: primaryColor,
    secondaryColor: secondaryColor,
    style: svgStyle
  }));
});
Icon.displayName = 'AntdIcon';
Icon.getTwoToneColor = getTwoToneColor;
Icon.setTwoToneColor = setTwoToneColor;

var LoadingOutlined = function LoadingOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: LoadingOutlined$2
  }));
};

LoadingOutlined.displayName = 'LoadingOutlined';
var LoadingOutlined$1 = /*#__PURE__*/React.forwardRef(LoadingOutlined);

// This icon file is generated automatically.
var ExclamationCircleFilled$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-32 232c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V296zm32 440a48.01 48.01 0 010-96 48.01 48.01 0 010 96z\\" } }] }, \\"name\\": \\"exclamation-circle\\", \\"theme\\": \\"filled\\" };

var ExclamationCircleFilled = function ExclamationCircleFilled(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: ExclamationCircleFilled$2
  }));
};

ExclamationCircleFilled.displayName = 'ExclamationCircleFilled';
var ExclamationCircleFilled$1 = /*#__PURE__*/React.forwardRef(ExclamationCircleFilled);

// This icon file is generated automatically.
var CloseCircleFilled$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z\\" } }] }, \\"name\\": \\"close-circle\\", \\"theme\\": \\"filled\\" };

var CloseCircleFilled = function CloseCircleFilled(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: CloseCircleFilled$2
  }));
};

CloseCircleFilled.displayName = 'CloseCircleFilled';
var CloseCircleFilled$1 = /*#__PURE__*/React.forwardRef(CloseCircleFilled);

// This icon file is generated automatically.
var CheckCircleFilled$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm193.5 301.7l-210.6 292a31.8 31.8 0 01-51.7 0L318.5 484.9c-3.8-5.3 0-12.7 6.5-12.7h46.9c10.2 0 19.9 4.9 25.9 13.3l71.2 98.8 157.2-218c6-8.3 15.6-13.3 25.9-13.3H699c6.5 0 10.3 7.4 6.5 12.7z\\" } }] }, \\"name\\": \\"check-circle\\", \\"theme\\": \\"filled\\" };

var CheckCircleFilled = function CheckCircleFilled(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: CheckCircleFilled$2
  }));
};

CheckCircleFilled.displayName = 'CheckCircleFilled';
var CheckCircleFilled$1 = /*#__PURE__*/React.forwardRef(CheckCircleFilled);

// This icon file is generated automatically.
var InfoCircleFilled$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm32 664c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V456c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272zm-32-344a48.01 48.01 0 010-96 48.01 48.01 0 010 96z\\" } }] }, \\"name\\": \\"info-circle\\", \\"theme\\": \\"filled\\" };

var InfoCircleFilled = function InfoCircleFilled(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: InfoCircleFilled$2
  }));
};

InfoCircleFilled.displayName = 'InfoCircleFilled';
var InfoCircleFilled$1 = /*#__PURE__*/React.forwardRef(InfoCircleFilled);

function createUseMessage(getRcNotificationInstance, getRCNoticeProps) {
  var useMessage = function useMessage() {
    // We can only get content by render
    var getPrefixCls; // We create a proxy to handle delay created instance

    var innerInstance = null;
    var proxy = {
      add: function add(noticeProps, holderCallback) {
        innerInstance === null || innerInstance === void 0 ? void 0 : innerInstance.component.add(noticeProps, holderCallback);
      }
    };

    var _useRCNotification = useRCNotification(proxy),
        _useRCNotification2 = _slicedToArray(_useRCNotification, 2),
        hookNotify = _useRCNotification2[0],
        holder = _useRCNotification2[1];

    function notify(args) {
      var customizePrefixCls = args.prefixCls;
      var mergedPrefixCls = getPrefixCls('message', customizePrefixCls);
      var target = args.key || getKeyThenIncreaseKey();
      var closePromise = new Promise(function (resolve) {
        var callback = function callback() {
          if (typeof args.onClose === 'function') {
            args.onClose();
          }

          return resolve(true);
        };

        getRcNotificationInstance(_extends(_extends({}, args), {
          prefixCls: mergedPrefixCls
        }), function (_ref) {
          var prefixCls = _ref.prefixCls,
              instance = _ref.instance;
          innerInstance = instance;
          hookNotify(getRCNoticeProps(_extends(_extends({}, args), {
            key: target,
            onClose: callback
          }), prefixCls));
        });
      });

      var result = function result() {
        if (innerInstance) {
          innerInstance.removeNotice(target);
        }
      };

      result.then = function (filled, rejected) {
        return closePromise.then(filled, rejected);
      };

      result.promise = closePromise;
      return result;
    } // Fill functions


    var hookApiRef = React.useRef({});
    hookApiRef.current.open = notify;
    ['success', 'info', 'warning', 'error', 'loading'].forEach(function (type) {
      return attachTypeApi(hookApiRef.current, type);
    });
    return [hookApiRef.current, /*#__PURE__*/React.createElement(ConfigConsumer, {
      key: \\"holder\\"
    }, function (context) {
      getPrefixCls = context.getPrefixCls;
      return holder;
    })];
  };

  return useMessage;
}

var messageInstance;
var defaultDuration$1 = 3;
var defaultTop$1;
var key = 1;
var localPrefixCls = 'ant-message';
var transitionName = 'move-up';
var getContainer;
var maxCount;
var rtl$1 = false;
function getKeyThenIncreaseKey() {
  return key++;
}

function setMessageConfig(options) {
  if (options.top !== undefined) {
    defaultTop$1 = options.top;
    messageInstance = null; // delete messageInstance for new defaultTop
  }

  if (options.duration !== undefined) {
    defaultDuration$1 = options.duration;
  }

  if (options.prefixCls !== undefined) {
    localPrefixCls = options.prefixCls;
  }

  if (options.getContainer !== undefined) {
    getContainer = options.getContainer;
  }

  if (options.transitionName !== undefined) {
    transitionName = options.transitionName;
    messageInstance = null; // delete messageInstance for new transitionName
  }

  if (options.maxCount !== undefined) {
    maxCount = options.maxCount;
    messageInstance = null;
  }

  if (options.rtl !== undefined) {
    rtl$1 = options.rtl;
  }
}

function getRCNotificationInstance(args, callback) {
  var prefixCls = args.prefixCls || localPrefixCls;

  if (messageInstance) {
    callback({
      prefixCls: prefixCls,
      instance: messageInstance
    });
    return;
  }

  RCNotification.newInstance({
    prefixCls: prefixCls,
    transitionName: transitionName,
    style: {
      top: defaultTop$1
    },
    getContainer: getContainer,
    maxCount: maxCount
  }, function (instance) {
    if (messageInstance) {
      callback({
        prefixCls: prefixCls,
        instance: messageInstance
      });
      return;
    }

    messageInstance = instance;
    callback({
      prefixCls: prefixCls,
      instance: instance
    });
  });
}

var typeToIcon$1 = {
  info: InfoCircleFilled$1,
  success: CheckCircleFilled$1,
  error: CloseCircleFilled$1,
  warning: ExclamationCircleFilled$1,
  loading: LoadingOutlined$1
};

function getRCNoticeProps$1(args, prefixCls) {
  var _classNames;

  var duration = args.duration !== undefined ? args.duration : defaultDuration$1;
  var IconComponent = typeToIcon$1[args.type];
  var messageClass = classNames(\\"\\".concat(prefixCls, \\"-custom-content\\"), (_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-\\").concat(args.type), args.type), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-rtl\\"), rtl$1 === true), _classNames));
  return {
    key: args.key,
    duration: duration,
    style: args.style || {},
    className: args.className,
    content: /*#__PURE__*/React.createElement(\\"div\\", {
      className: messageClass
    }, args.icon || IconComponent && /*#__PURE__*/React.createElement(IconComponent, null), /*#__PURE__*/React.createElement(\\"span\\", null, args.content)),
    onClose: args.onClose,
    onClick: args.onClick
  };
}

function notice$1(args) {
  var target = args.key || key++;
  var closePromise = new Promise(function (resolve) {
    var callback = function callback() {
      if (typeof args.onClose === 'function') {
        args.onClose();
      }

      return resolve(true);
    };

    getRCNotificationInstance(args, function (_ref) {
      var prefixCls = _ref.prefixCls,
          instance = _ref.instance;
      instance.notice(getRCNoticeProps$1(_extends(_extends({}, args), {
        key: target,
        onClose: callback
      }), prefixCls));
    });
  });

  var result = function result() {
    if (messageInstance) {
      messageInstance.removeNotice(target);
    }
  };

  result.then = function (filled, rejected) {
    return closePromise.then(filled, rejected);
  };

  result.promise = closePromise;
  return result;
}

function isArgsProps(content) {
  return Object.prototype.toString.call(content) === '[object Object]' && !!content.content;
}

var api$1 = {
  open: notice$1,
  config: setMessageConfig,
  destroy: function destroy(messageKey) {
    if (messageInstance) {
      if (messageKey) {
        var _messageInstance = messageInstance,
            removeNotice = _messageInstance.removeNotice;
        removeNotice(messageKey);
      } else {
        var _messageInstance2 = messageInstance,
            destroy = _messageInstance2.destroy;
        destroy();
        messageInstance = null;
      }
    }
  }
};
function attachTypeApi(originalApi, type) {
  originalApi[type] = function (content, duration, onClose) {
    if (isArgsProps(content)) {
      return originalApi.open(_extends(_extends({}, content), {
        type: type
      }));
    }

    if (typeof duration === 'function') {
      onClose = duration;
      duration = undefined;
    }

    return originalApi.open({
      content: content,
      duration: duration,
      type: type,
      onClose: onClose
    });
  };
}
['success', 'info', 'warning', 'error', 'loading'].forEach(function (type) {
  return attachTypeApi(api$1, type);
});
api$1.warn = api$1.warning;
api$1.useMessage = createUseMessage(getRCNotificationInstance, getRCNoticeProps$1);
/** @private test only function. Not work on production */

var getInstance$1 = function getInstance() {
  return \\"production\\" === 'test' ? messageInstance : null;
};

// This icon file is generated automatically.
var CloseOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M563.8 512l262.5-312.9c4.4-5.2.7-13.1-6.1-13.1h-79.8c-4.7 0-9.2 2.1-12.3 5.7L511.6 449.8 295.1 191.7c-3-3.6-7.5-5.7-12.3-5.7H203c-6.8 0-10.5 7.9-6.1 13.1L459.4 512 196.9 824.9A7.95 7.95 0 00203 838h79.8c4.7 0 9.2-2.1 12.3-5.7l216.5-258.1 216.5 258.1c3 3.6 7.5 5.7 12.3 5.7h79.8c6.8 0 10.5-7.9 6.1-13.1L563.8 512z\\" } }] }, \\"name\\": \\"close\\", \\"theme\\": \\"outlined\\" };

var CloseOutlined = function CloseOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: CloseOutlined$2
  }));
};

CloseOutlined.displayName = 'CloseOutlined';
var CloseOutlined$1 = /*#__PURE__*/React.forwardRef(CloseOutlined);

// This icon file is generated automatically.
var CheckCircleOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M699 353h-46.9c-10.2 0-19.9 4.9-25.9 13.3L469 584.3l-71.2-98.8c-6-8.3-15.6-13.3-25.9-13.3H325c-6.5 0-10.3 7.4-6.5 12.7l124.6 172.8a31.8 31.8 0 0051.7 0l210.6-292c3.9-5.3.1-12.7-6.4-12.7z\\" } }, { \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z\\" } }] }, \\"name\\": \\"check-circle\\", \\"theme\\": \\"outlined\\" };

var CheckCircleOutlined = function CheckCircleOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: CheckCircleOutlined$2
  }));
};

CheckCircleOutlined.displayName = 'CheckCircleOutlined';
var CheckCircleOutlined$1 = /*#__PURE__*/React.forwardRef(CheckCircleOutlined);

// This icon file is generated automatically.
var CloseCircleOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M685.4 354.8c0-4.4-3.6-8-8-8l-66 .3L512 465.6l-99.3-118.4-66.1-.3c-4.4 0-8 3.5-8 8 0 1.9.7 3.7 1.9 5.2l130.1 155L340.5 670a8.32 8.32 0 00-1.9 5.2c0 4.4 3.6 8 8 8l66.1-.3L512 564.4l99.3 118.4 66 .3c4.4 0 8-3.5 8-8 0-1.9-.7-3.7-1.9-5.2L553.5 515l130.1-155c1.2-1.4 1.8-3.3 1.8-5.2z\\" } }, { \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M512 65C264.6 65 64 265.6 64 513s200.6 448 448 448 448-200.6 448-448S759.4 65 512 65zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z\\" } }] }, \\"name\\": \\"close-circle\\", \\"theme\\": \\"outlined\\" };

var CloseCircleOutlined = function CloseCircleOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: CloseCircleOutlined$2
  }));
};

CloseCircleOutlined.displayName = 'CloseCircleOutlined';
var CloseCircleOutlined$1 = /*#__PURE__*/React.forwardRef(CloseCircleOutlined);

// This icon file is generated automatically.
var ExclamationCircleOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z\\" } }, { \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M464 688a48 48 0 1096 0 48 48 0 10-96 0zm24-112h48c4.4 0 8-3.6 8-8V296c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8z\\" } }] }, \\"name\\": \\"exclamation-circle\\", \\"theme\\": \\"outlined\\" };

var ExclamationCircleOutlined = function ExclamationCircleOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: ExclamationCircleOutlined$2
  }));
};

ExclamationCircleOutlined.displayName = 'ExclamationCircleOutlined';
var ExclamationCircleOutlined$1 = /*#__PURE__*/React.forwardRef(ExclamationCircleOutlined);

// This icon file is generated automatically.
var InfoCircleOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z\\" } }, { \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M464 336a48 48 0 1096 0 48 48 0 10-96 0zm72 112h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V456c0-4.4-3.6-8-8-8z\\" } }] }, \\"name\\": \\"info-circle\\", \\"theme\\": \\"outlined\\" };

var InfoCircleOutlined = function InfoCircleOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: InfoCircleOutlined$2
  }));
};

InfoCircleOutlined.displayName = 'InfoCircleOutlined';
var InfoCircleOutlined$1 = /*#__PURE__*/React.forwardRef(InfoCircleOutlined);

function createUseNotification(getNotificationInstance, getRCNoticeProps) {
  var useNotification = function useNotification() {
    // We can only get content by render
    var getPrefixCls; // We create a proxy to handle delay created instance

    var innerInstance = null;
    var proxy = {
      add: function add(noticeProps, holderCallback) {
        innerInstance === null || innerInstance === void 0 ? void 0 : innerInstance.component.add(noticeProps, holderCallback);
      }
    };

    var _useRCNotification = useRCNotification(proxy),
        _useRCNotification2 = _slicedToArray(_useRCNotification, 2),
        hookNotify = _useRCNotification2[0],
        holder = _useRCNotification2[1];

    function notify(args) {
      var customizePrefixCls = args.prefixCls;
      var mergedPrefixCls = getPrefixCls('notification', customizePrefixCls);
      getNotificationInstance(_extends(_extends({}, args), {
        prefixCls: mergedPrefixCls
      }), function (_ref) {
        var prefixCls = _ref.prefixCls,
            instance = _ref.instance;
        innerInstance = instance;
        hookNotify(getRCNoticeProps(args, prefixCls));
      });
    } // Fill functions


    var hookApiRef = React.useRef({});
    hookApiRef.current.open = notify;
    ['success', 'info', 'warning', 'error'].forEach(function (type) {
      hookApiRef.current[type] = function (args) {
        return hookApiRef.current.open(_extends(_extends({}, args), {
          type: type
        }));
      };
    });
    return [hookApiRef.current, /*#__PURE__*/React.createElement(ConfigConsumer, {
      key: \\"holder\\"
    }, function (context) {
      getPrefixCls = context.getPrefixCls;
      return holder;
    })];
  };

  return useNotification;
}

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator[\\"throw\\"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var notificationInstance = {};
var defaultDuration = 4.5;
var defaultTop = 24;
var defaultBottom = 24;
var defaultPrefixCls = 'ant-notification';
var defaultPlacement = 'topRight';
var defaultGetContainer;
var defaultCloseIcon;
var rtl = false;

function setNotificationConfig(options) {
  var duration = options.duration,
      placement = options.placement,
      bottom = options.bottom,
      top = options.top,
      getContainer = options.getContainer,
      closeIcon = options.closeIcon,
      prefixCls = options.prefixCls;

  if (prefixCls !== undefined) {
    defaultPrefixCls = prefixCls;
  }

  if (duration !== undefined) {
    defaultDuration = duration;
  }

  if (placement !== undefined) {
    defaultPlacement = placement;
  } else if (options.rtl) {
    defaultPlacement = 'topLeft';
  }

  if (bottom !== undefined) {
    defaultBottom = bottom;
  }

  if (top !== undefined) {
    defaultTop = top;
  }

  if (getContainer !== undefined) {
    defaultGetContainer = getContainer;
  }

  if (closeIcon !== undefined) {
    defaultCloseIcon = closeIcon;
  }

  if (options.rtl !== undefined) {
    rtl = options.rtl;
  }
}

function getPlacementStyle(placement) {
  var top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultTop;
  var bottom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultBottom;
  var style;

  switch (placement) {
    case 'topLeft':
      style = {
        left: 0,
        top: top,
        bottom: 'auto'
      };
      break;

    case 'topRight':
      style = {
        right: 0,
        top: top,
        bottom: 'auto'
      };
      break;

    case 'bottomLeft':
      style = {
        left: 0,
        top: 'auto',
        bottom: bottom
      };
      break;

    default:
      style = {
        right: 0,
        top: 'auto',
        bottom: bottom
      };
      break;
  }

  return style;
}

function getNotificationInstance(args, callback) {
  var _args$placement = args.placement,
      placement = _args$placement === void 0 ? defaultPlacement : _args$placement,
      top = args.top,
      bottom = args.bottom,
      _args$getContainer = args.getContainer,
      getContainer = _args$getContainer === void 0 ? defaultGetContainer : _args$getContainer,
      _args$closeIcon = args.closeIcon,
      closeIcon = _args$closeIcon === void 0 ? defaultCloseIcon : _args$closeIcon;
  var outerPrefixCls = args.prefixCls || defaultPrefixCls;
  var prefixCls = \\"\\".concat(outerPrefixCls, \\"-notice\\");
  var cacheKey = \\"\\".concat(outerPrefixCls, \\"-\\").concat(placement);
  var cacheInstance = notificationInstance[cacheKey];

  if (cacheInstance) {
    Promise.resolve(cacheInstance).then(function (instance) {
      callback({
        prefixCls: prefixCls,
        instance: instance
      });
    });
    return;
  }

  var closeIconToRender = /*#__PURE__*/React.createElement(\\"span\\", {
    className: \\"\\".concat(outerPrefixCls, \\"-close-x\\")
  }, closeIcon || /*#__PURE__*/React.createElement(CloseOutlined$1, {
    className: \\"\\".concat(outerPrefixCls, \\"-close-icon\\")
  }));
  var notificationClass = classNames(\\"\\".concat(outerPrefixCls, \\"-\\").concat(placement), _defineProperty({}, \\"\\".concat(outerPrefixCls, \\"-rtl\\"), rtl === true));
  notificationInstance[cacheKey] = new Promise(function (resolve) {
    RCNotification.newInstance({
      prefixCls: outerPrefixCls,
      className: notificationClass,
      style: getPlacementStyle(placement, top, bottom),
      getContainer: getContainer,
      closeIcon: closeIconToRender
    }, function (notification) {
      resolve(notification);
      callback({
        prefixCls: prefixCls,
        instance: notification
      });
    });
  });
}

var typeToIcon = {
  success: CheckCircleOutlined$1,
  info: InfoCircleOutlined$1,
  error: CloseCircleOutlined$1,
  warning: ExclamationCircleOutlined$1
};

function getRCNoticeProps(args, prefixCls) {
  var duration = args.duration === undefined ? defaultDuration : args.duration;
  var iconNode = null;

  if (args.icon) {
    iconNode = /*#__PURE__*/React.createElement(\\"span\\", {
      className: \\"\\".concat(prefixCls, \\"-icon\\")
    }, args.icon);
  } else if (args.type) {
    iconNode = /*#__PURE__*/React.createElement(typeToIcon[args.type] || null, {
      className: \\"\\".concat(prefixCls, \\"-icon \\").concat(prefixCls, \\"-icon-\\").concat(args.type)
    });
  }

  var autoMarginTag = !args.description && iconNode ? /*#__PURE__*/React.createElement(\\"span\\", {
    className: \\"\\".concat(prefixCls, \\"-message-single-line-auto-margin\\")
  }) : null;
  return {
    content: /*#__PURE__*/React.createElement(\\"div\\", {
      className: iconNode ? \\"\\".concat(prefixCls, \\"-with-icon\\") : '',
      role: \\"alert\\"
    }, iconNode, /*#__PURE__*/React.createElement(\\"div\\", {
      className: \\"\\".concat(prefixCls, \\"-message\\")
    }, autoMarginTag, args.message), /*#__PURE__*/React.createElement(\\"div\\", {
      className: \\"\\".concat(prefixCls, \\"-description\\")
    }, args.description), args.btn ? /*#__PURE__*/React.createElement(\\"span\\", {
      className: \\"\\".concat(prefixCls, \\"-btn\\")
    }, args.btn) : null),
    duration: duration,
    closable: true,
    onClose: args.onClose,
    onClick: args.onClick,
    key: args.key,
    style: args.style || {},
    className: args.className
  };
}

function notice(args) {
  getNotificationInstance(args, function (_ref) {
    var prefixCls = _ref.prefixCls,
        instance = _ref.instance;
    instance.notice(getRCNoticeProps(args, prefixCls));
  });
}

var api = {
  open: notice,
  close: function close(key) {
    Object.keys(notificationInstance).forEach(function (cacheKey) {
      return Promise.resolve(notificationInstance[cacheKey]).then(function (instance) {
        instance.removeNotice(key);
      });
    });
  },
  config: setNotificationConfig,
  destroy: function destroy() {
    Object.keys(notificationInstance).forEach(function (cacheKey) {
      Promise.resolve(notificationInstance[cacheKey]).then(function (instance) {
        instance.destroy();
      });
      delete notificationInstance[cacheKey]; // lgtm[js/missing-await]
    });
  }
};
['success', 'info', 'warning', 'error'].forEach(function (type) {
  api[type] = function (args) {
    return api.open(_extends(_extends({}, args), {
      type: type
    }));
  };
});
api.warn = api.warning;
api.useNotification = createUseNotification(getNotificationInstance, getRCNoticeProps);
/** @private test only function. Not work on production */

var getInstance = function getInstance(cacheKey) {
  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt(\\"return\\", \\"production\\" === 'test' ? notificationInstance[cacheKey] : null);

          case 1:
          case \\"end\\":
            return _context.stop();
        }
      }
    }, _callee);
  }));
};

var configConsumerProps = ['getTargetContainer', 'getPopupContainer', 'rootPrefixCls', 'getPrefixCls', 'renderEmpty', 'csp', 'autoInsertSpaceInButton', 'locale', 'pageHeader']; // These props is used by \`useContext\` directly in sub component

var PASSED_PROPS = ['getTargetContainer', 'getPopupContainer', 'renderEmpty', 'pageHeader', 'input', 'form'];

var ProviderChildren = function ProviderChildren(props) {
  var children = props.children,
      csp = props.csp,
      autoInsertSpaceInButton = props.autoInsertSpaceInButton,
      form = props.form,
      locale = props.locale,
      componentSize = props.componentSize,
      direction = props.direction,
      space = props.space,
      virtual = props.virtual,
      dropdownMatchSelectWidth = props.dropdownMatchSelectWidth,
      legacyLocale = props.legacyLocale,
      parentContext = props.parentContext,
      iconPrefixCls = props.iconPrefixCls;
  var getPrefixCls = React.useCallback(function (suffixCls, customizePrefixCls) {
    var prefixCls = props.prefixCls;
    if (customizePrefixCls) return customizePrefixCls;
    var mergedPrefixCls = prefixCls || parentContext.getPrefixCls('');
    return suffixCls ? \\"\\".concat(mergedPrefixCls, \\"-\\").concat(suffixCls) : mergedPrefixCls;
  }, [parentContext.getPrefixCls]);

  var config = _extends(_extends({}, parentContext), {
    csp: csp,
    autoInsertSpaceInButton: autoInsertSpaceInButton,
    locale: locale || legacyLocale,
    direction: direction,
    space: space,
    virtual: virtual,
    dropdownMatchSelectWidth: dropdownMatchSelectWidth,
    getPrefixCls: getPrefixCls
  }); // Pass the props used by \`useContext\` directly with child component.
  // These props should merged into \`config\`.


  PASSED_PROPS.forEach(function (propName) {
    var propValue = props[propName];

    if (propValue) {
      config[propName] = propValue;
    }
  }); // https://github.com/ant-design/ant-design/issues/27617

  var memoedConfig = useMemo(function () {
    return config;
  }, config, function (prevConfig, currentConfig) {
    var prevKeys = Object.keys(prevConfig);
    var currentKeys = Object.keys(currentConfig);
    return prevKeys.length !== currentKeys.length || prevKeys.some(function (key) {
      return prevConfig[key] !== currentConfig[key];
    });
  });
  var memoIconContextValue = React.useMemo(function () {
    return {
      prefixCls: iconPrefixCls
    };
  }, [iconPrefixCls]);
  var childNode = children; // Additional Form provider

  var validateMessages = {};

  if (locale && locale.Form && locale.Form.defaultValidateMessages) {
    validateMessages = locale.Form.defaultValidateMessages;
  }

  if (form && form.validateMessages) {
    validateMessages = _extends(_extends({}, validateMessages), form.validateMessages);
  }

  if (Object.keys(validateMessages).length > 0) {
    childNode = /*#__PURE__*/React.createElement(FormProvider$1, {
      validateMessages: validateMessages
    }, children);
  }

  if (locale) {
    childNode = /*#__PURE__*/React.createElement(LocaleProvider, {
      locale: locale,
      _ANT_MARK__: ANT_MARK
    }, childNode);
  }

  if (iconPrefixCls) {
    childNode = /*#__PURE__*/React.createElement(IconContext.Provider, {
      value: memoIconContextValue
    }, childNode);
  }

  if (componentSize) {
    childNode = /*#__PURE__*/React.createElement(SizeContextProvider$1, {
      size: componentSize
    }, childNode);
  }

  return /*#__PURE__*/React.createElement(ConfigContext.Provider, {
    value: memoedConfig
  }, childNode);
};

var ConfigProvider = function ConfigProvider(props) {
  React.useEffect(function () {
    if (props.direction) {
      api$1.config({
        rtl: props.direction === 'rtl'
      });
      api.config({
        rtl: props.direction === 'rtl'
      });
    }
  }, [props.direction]);
  return /*#__PURE__*/React.createElement(LocaleReceiver, null, function (_, __, legacyLocale) {
    return /*#__PURE__*/React.createElement(ConfigConsumer, null, function (context) {
      return /*#__PURE__*/React.createElement(ProviderChildren, _extends({
        parentContext: context,
        legacyLocale: legacyLocale
      }, props));
    });
  });
};
/** @private internal usage. do not use in your production */


ConfigProvider.ConfigContext = ConfigContext;
ConfigProvider.SizeContext = SizeContext$1;

function throttleByAnimationFrame(fn) {
  var requestId;

  var later = function later(args) {
    return function () {
      requestId = null;
      fn.apply(void 0, _toConsumableArray(args));
    };
  };

  var throttled = function throttled() {
    if (requestId == null) {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      requestId = raf(later(args));
    }
  };

  throttled.cancel = function () {
    return raf.cancel(requestId);
  };

  return throttled;
}
function throttleByAnimationFrameDecorator() {
  return function throttle(target, key, descriptor) {
    var fn = descriptor.value;
    var definingProperty = false;
    return {
      configurable: true,
      get: function get() {
        // In IE11 calling Object.defineProperty has a side-effect of evaluating the
        // getter for the property which is being replaced. This causes infinite
        // recursion and an \\"Out of stack space\\" error.
        // eslint-disable-next-line no-prototype-builtins
        if (definingProperty || this === target.prototype || this.hasOwnProperty(key)) {
          /* istanbul ignore next */
          return fn;
        }

        var boundFn = throttleByAnimationFrame(fn.bind(this));
        definingProperty = true;
        Object.defineProperty(this, key, {
          value: boundFn,
          configurable: true,
          writable: true
        });
        definingProperty = false;
        return boundFn;
      }
    };
  };
}

function getTargetRect(target) {
  return target !== window ? target.getBoundingClientRect() : {
    top: 0,
    bottom: window.innerHeight
  };
}
function getFixedTop(placeholderReact, targetRect, offsetTop) {
  if (offsetTop !== undefined && targetRect.top > placeholderReact.top - offsetTop) {
    return offsetTop + targetRect.top;
  }

  return undefined;
}
function getFixedBottom(placeholderReact, targetRect, offsetBottom) {
  if (offsetBottom !== undefined && targetRect.bottom < placeholderReact.bottom + offsetBottom) {
    var targetBottomOffset = window.innerHeight - targetRect.bottom;
    return offsetBottom + targetBottomOffset;
  }

  return undefined;
} // ======================== Observer ========================

var TRIGGER_EVENTS = ['resize', 'scroll', 'touchstart', 'touchmove', 'touchend', 'pageshow', 'load'];
var observerEntities = [];
function getObserverEntities() {
  // Only used in test env. Can be removed if refactor.
  return observerEntities;
}
function addObserveTarget(target, affix) {
  if (!target) return;
  var entity = observerEntities.find(function (item) {
    return item.target === target;
  });

  if (entity) {
    entity.affixList.push(affix);
  } else {
    entity = {
      target: target,
      affixList: [affix],
      eventHandlers: {}
    };
    observerEntities.push(entity); // Add listener

    TRIGGER_EVENTS.forEach(function (eventName) {
      entity.eventHandlers[eventName] = addEventListener(target, eventName, function () {
        entity.affixList.forEach(function (targetAffix) {
          targetAffix.lazyUpdatePosition();
        });
      });
    });
  }
}
function removeObserveTarget(affix) {
  var observerEntity = observerEntities.find(function (oriObserverEntity) {
    var hasAffix = oriObserverEntity.affixList.some(function (item) {
      return item === affix;
    });

    if (hasAffix) {
      oriObserverEntity.affixList = oriObserverEntity.affixList.filter(function (item) {
        return item !== affix;
      });
    }

    return hasAffix;
  });

  if (observerEntity && observerEntity.affixList.length === 0) {
    observerEntities = observerEntities.filter(function (item) {
      return item !== observerEntity;
    }); // Remove listener

    TRIGGER_EVENTS.forEach(function (eventName) {
      var handler = observerEntity.eventHandlers[eventName];

      if (handler && handler.remove) {
        handler.remove();
      }
    });
  }
}

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if ((typeof Reflect === \\"undefined\\" ? \\"undefined\\" : _typeof(Reflect)) === \\"object\\" && typeof Reflect.decorate === \\"function\\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

function getDefaultTarget() {
  return typeof window !== 'undefined' ? window : null;
}

var AffixStatus;

(function (AffixStatus) {
  AffixStatus[AffixStatus[\\"None\\"] = 0] = \\"None\\";
  AffixStatus[AffixStatus[\\"Prepare\\"] = 1] = \\"Prepare\\";
})(AffixStatus || (AffixStatus = {}));

var Affix = /*#__PURE__*/function (_React$Component) {
  _inherits(Affix, _React$Component);

  var _super = _createSuper(Affix);

  function Affix() {
    var _this;

    _classCallCheck(this, Affix);

    _this = _super.apply(this, arguments);
    _this.state = {
      status: AffixStatus.None,
      lastAffix: false,
      prevTarget: null
    };

    _this.getOffsetTop = function () {
      var offsetBottom = _this.props.offsetBottom;
      var offsetTop = _this.props.offsetTop;

      if (offsetBottom === undefined && offsetTop === undefined) {
        offsetTop = 0;
      }

      return offsetTop;
    };

    _this.getOffsetBottom = function () {
      return _this.props.offsetBottom;
    };

    _this.savePlaceholderNode = function (node) {
      _this.placeholderNode = node;
    };

    _this.saveFixedNode = function (node) {
      _this.fixedNode = node;
    }; // =================== Measure ===================


    _this.measure = function () {
      var _this$state = _this.state,
          status = _this$state.status,
          lastAffix = _this$state.lastAffix;
      var onChange = _this.props.onChange;

      var targetFunc = _this.getTargetFunc();

      if (status !== AffixStatus.Prepare || !_this.fixedNode || !_this.placeholderNode || !targetFunc) {
        return;
      }

      var offsetTop = _this.getOffsetTop();

      var offsetBottom = _this.getOffsetBottom();

      var targetNode = targetFunc();

      if (!targetNode) {
        return;
      }

      var newState = {
        status: AffixStatus.None
      };
      var targetRect = getTargetRect(targetNode);
      var placeholderReact = getTargetRect(_this.placeholderNode);
      var fixedTop = getFixedTop(placeholderReact, targetRect, offsetTop);
      var fixedBottom = getFixedBottom(placeholderReact, targetRect, offsetBottom);

      if (fixedTop !== undefined) {
        newState.affixStyle = {
          position: 'fixed',
          top: fixedTop,
          width: placeholderReact.width,
          height: placeholderReact.height
        };
        newState.placeholderStyle = {
          width: placeholderReact.width,
          height: placeholderReact.height
        };
      } else if (fixedBottom !== undefined) {
        newState.affixStyle = {
          position: 'fixed',
          bottom: fixedBottom,
          width: placeholderReact.width,
          height: placeholderReact.height
        };
        newState.placeholderStyle = {
          width: placeholderReact.width,
          height: placeholderReact.height
        };
      }

      newState.lastAffix = !!newState.affixStyle;

      if (onChange && lastAffix !== newState.lastAffix) {
        onChange(newState.lastAffix);
      }

      _this.setState(newState);
    }; // @ts-ignore TS6133


    _this.prepareMeasure = function () {
      // event param is used before. Keep compatible ts define here.
      _this.setState({
        status: AffixStatus.Prepare,
        affixStyle: undefined,
        placeholderStyle: undefined
      }); // Test if \`updatePosition\` called


      if (\\"production\\" === 'test') {
        var onTestUpdatePosition = _this.props.onTestUpdatePosition;

        if (onTestUpdatePosition) {
          onTestUpdatePosition();
        }
      }
    }; // =================== Render ===================


    _this.render = function () {
      var getPrefixCls = _this.context.getPrefixCls;
      var _this$state2 = _this.state,
          affixStyle = _this$state2.affixStyle,
          placeholderStyle = _this$state2.placeholderStyle;
      var _this$props = _this.props,
          prefixCls = _this$props.prefixCls,
          children = _this$props.children;
      var className = classNames(_defineProperty({}, getPrefixCls('affix', prefixCls), affixStyle));
      var props = omit(_this.props, ['prefixCls', 'offsetTop', 'offsetBottom', 'target', 'onChange']); // Omit this since \`onTestUpdatePosition\` only works on test.

      if (\\"production\\" === 'test') {
        props = omit(props, ['onTestUpdatePosition']);
      }

      return /*#__PURE__*/React.createElement(ResizeObserver, {
        onResize: function onResize() {
          _this.updatePosition();
        }
      }, /*#__PURE__*/React.createElement(\\"div\\", _extends({}, props, {
        ref: _this.savePlaceholderNode
      }), affixStyle && /*#__PURE__*/React.createElement(\\"div\\", {
        style: placeholderStyle,
        \\"aria-hidden\\": \\"true\\"
      }), /*#__PURE__*/React.createElement(\\"div\\", {
        className: className,
        ref: _this.saveFixedNode,
        style: affixStyle
      }, /*#__PURE__*/React.createElement(ResizeObserver, {
        onResize: function onResize() {
          _this.updatePosition();
        }
      }, children))));
    };

    return _this;
  }

  _createClass(Affix, [{
    key: \\"getTargetFunc\\",
    value: function getTargetFunc() {
      var getTargetContainer = this.context.getTargetContainer;
      var target = this.props.target;

      if (target !== undefined) {
        return target;
      }

      return getTargetContainer || getDefaultTarget;
    } // Event handler

  }, {
    key: \\"componentDidMount\\",
    value: function componentDidMount() {
      var _this2 = this;

      var targetFunc = this.getTargetFunc();

      if (targetFunc) {
        // [Legacy] Wait for parent component ref has its value.
        // We should use target as directly element instead of function which makes element check hard.
        this.timeout = setTimeout(function () {
          addObserveTarget(targetFunc(), _this2); // Mock Event object.

          _this2.updatePosition();
        });
      }
    }
  }, {
    key: \\"componentDidUpdate\\",
    value: function componentDidUpdate(prevProps) {
      var prevTarget = this.state.prevTarget;
      var targetFunc = this.getTargetFunc();
      var newTarget = null;

      if (targetFunc) {
        newTarget = targetFunc() || null;
      }

      if (prevTarget !== newTarget) {
        removeObserveTarget(this);

        if (newTarget) {
          addObserveTarget(newTarget, this); // Mock Event object.

          this.updatePosition();
        } // eslint-disable-next-line react/no-did-update-set-state


        this.setState({
          prevTarget: newTarget
        });
      }

      if (prevProps.offsetTop !== this.props.offsetTop || prevProps.offsetBottom !== this.props.offsetBottom) {
        this.updatePosition();
      }

      this.measure();
    }
  }, {
    key: \\"componentWillUnmount\\",
    value: function componentWillUnmount() {
      clearTimeout(this.timeout);
      removeObserveTarget(this);
      this.updatePosition.cancel(); // https://github.com/ant-design/ant-design/issues/22683

      this.lazyUpdatePosition.cancel();
    } // Handle realign logic

  }, {
    key: \\"updatePosition\\",
    value: function updatePosition() {
      this.prepareMeasure();
    }
  }, {
    key: \\"lazyUpdatePosition\\",
    value: function lazyUpdatePosition() {
      var targetFunc = this.getTargetFunc();
      var affixStyle = this.state.affixStyle; // Check position change before measure to make Safari smooth

      if (targetFunc && affixStyle) {
        var offsetTop = this.getOffsetTop();
        var offsetBottom = this.getOffsetBottom();
        var targetNode = targetFunc();

        if (targetNode && this.placeholderNode) {
          var targetRect = getTargetRect(targetNode);
          var placeholderReact = getTargetRect(this.placeholderNode);
          var fixedTop = getFixedTop(placeholderReact, targetRect, offsetTop);
          var fixedBottom = getFixedBottom(placeholderReact, targetRect, offsetBottom);

          if (fixedTop !== undefined && affixStyle.top === fixedTop || fixedBottom !== undefined && affixStyle.bottom === fixedBottom) {
            return;
          }
        }
      } // Directly call prepare measure since it's already throttled.


      this.prepareMeasure();
    }
  }]);

  return Affix;
}(React.Component);

Affix.contextType = ConfigContext;

__decorate([throttleByAnimationFrameDecorator()], Affix.prototype, \\"updatePosition\\", null);

__decorate([throttleByAnimationFrameDecorator()], Affix.prototype, \\"lazyUpdatePosition\\", null);

function isWindow(obj) {
  return obj !== null && obj !== undefined && obj === obj.window;
}
function getScroll(target, top) {
  if (typeof window === 'undefined') {
    return 0;
  }

  var method = top ? 'scrollTop' : 'scrollLeft';
  var result = 0;

  if (isWindow(target)) {
    result = target[top ? 'pageYOffset' : 'pageXOffset'];
  } else if (target instanceof Document) {
    result = target.documentElement[method];
  } else if (target) {
    result = target[method];
  }

  if (target && !isWindow(target) && typeof result !== 'number') {
    result = (target.ownerDocument || target).documentElement[method];
  }

  return result;
}

// eslint-disable-next-line import/prefer-default-export
function easeInOutCubic(t, b, c, d) {
  var cc = c - b;
  t /= d / 2;

  if (t < 1) {
    return cc / 2 * t * t * t + b;
  } // eslint-disable-next-line no-return-assign


  return cc / 2 * ((t -= 2) * t * t + 2) + b;
}

function scrollTo(y) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _options$getContainer = options.getContainer,
      getContainer = _options$getContainer === void 0 ? function () {
    return window;
  } : _options$getContainer,
      callback = options.callback,
      _options$duration = options.duration,
      duration = _options$duration === void 0 ? 450 : _options$duration;
  var container = getContainer();
  var scrollTop = getScroll(container, true);
  var startTime = Date.now();

  var frameFunc = function frameFunc() {
    var timestamp = Date.now();
    var time = timestamp - startTime;
    var nextScrollTop = easeInOutCubic(time > duration ? duration : time, scrollTop, y, duration);

    if (isWindow(container)) {
      container.scrollTo(window.pageXOffset, nextScrollTop);
    } else if (container instanceof HTMLDocument || container.constructor.name === 'HTMLDocument') {
      container.documentElement.scrollTop = nextScrollTop;
    } else {
      container.scrollTop = nextScrollTop;
    }

    if (time < duration) {
      raf(frameFunc);
    } else if (typeof callback === 'function') {
      callback();
    }
  };

  raf(frameFunc);
}

var AnchorContext = /*#__PURE__*/React.createContext(null);

function getDefaultContainer() {
  return window;
}

function getOffsetTop(element, container) {
  if (!element.getClientRects().length) {
    return 0;
  }

  var rect = element.getBoundingClientRect();

  if (rect.width || rect.height) {
    if (container === window) {
      container = element.ownerDocument.documentElement;
      return rect.top - container.clientTop;
    }

    return rect.top - container.getBoundingClientRect().top;
  }

  return rect.top;
}

var sharpMatcherRegx = /#(\\\\S+)$/;

var Anchor = /*#__PURE__*/function (_React$Component) {
  _inherits(Anchor, _React$Component);

  var _super = _createSuper(Anchor);

  function Anchor() {
    var _this;

    _classCallCheck(this, Anchor);

    _this = _super.apply(this, arguments);
    _this.state = {
      activeLink: null
    };
    _this.wrapperRef = /*#__PURE__*/React.createRef();
    _this.links = []; // Context

    _this.registerLink = function (link) {
      if (!_this.links.includes(link)) {
        _this.links.push(link);
      }
    };

    _this.unregisterLink = function (link) {
      var index = _this.links.indexOf(link);

      if (index !== -1) {
        _this.links.splice(index, 1);
      }
    };

    _this.getContainer = function () {
      var getTargetContainer = _this.context.getTargetContainer;
      var getContainer = _this.props.getContainer;
      var getFunc = getContainer || getTargetContainer || getDefaultContainer;
      return getFunc();
    };

    _this.handleScrollTo = function (link) {
      var _this$props = _this.props,
          offsetTop = _this$props.offsetTop,
          targetOffset = _this$props.targetOffset;

      _this.setCurrentActiveLink(link);

      var container = _this.getContainer();

      var scrollTop = getScroll(container, true);
      var sharpLinkMatch = sharpMatcherRegx.exec(link);

      if (!sharpLinkMatch) {
        return;
      }

      var targetElement = document.getElementById(sharpLinkMatch[1]);

      if (!targetElement) {
        return;
      }

      var eleOffsetTop = getOffsetTop(targetElement, container);
      var y = scrollTop + eleOffsetTop;
      y -= targetOffset !== undefined ? targetOffset : offsetTop || 0;
      _this.animating = true;
      scrollTo(y, {
        callback: function callback() {
          _this.animating = false;
        },
        getContainer: _this.getContainer
      });
    };

    _this.saveInkNode = function (node) {
      _this.inkNode = node;
    };

    _this.setCurrentActiveLink = function (link) {
      var activeLink = _this.state.activeLink;
      var onChange = _this.props.onChange;

      if (activeLink !== link) {
        _this.setState({
          activeLink: link
        });

        if (onChange) {
          onChange(link);
        }
      }
    };

    _this.handleScroll = function () {
      if (_this.animating) {
        return;
      }

      var _this$props2 = _this.props,
          offsetTop = _this$props2.offsetTop,
          bounds = _this$props2.bounds,
          targetOffset = _this$props2.targetOffset;

      var currentActiveLink = _this.getCurrentAnchor(targetOffset !== undefined ? targetOffset : offsetTop || 0, bounds);

      _this.setCurrentActiveLink(currentActiveLink);
    };

    _this.updateInk = function () {
      var _assertThisInitialize = _assertThisInitialized(_this),
          prefixCls = _assertThisInitialize.prefixCls,
          wrapperRef = _assertThisInitialize.wrapperRef;

      var anchorNode = wrapperRef.current;
      var linkNode = anchorNode === null || anchorNode === void 0 ? void 0 : anchorNode.getElementsByClassName(\\"\\".concat(prefixCls, \\"-link-title-active\\"))[0];

      if (linkNode) {
        _this.inkNode.style.top = \\"\\".concat(linkNode.offsetTop + linkNode.clientHeight / 2 - 4.5, \\"px\\");
      }
    };

    _this.render = function () {
      var _this$context = _this.context,
          getPrefixCls = _this$context.getPrefixCls,
          direction = _this$context.direction;
      var _this$props3 = _this.props,
          customizePrefixCls = _this$props3.prefixCls,
          _this$props3$classNam = _this$props3.className,
          className = _this$props3$classNam === void 0 ? '' : _this$props3$classNam,
          style = _this$props3.style,
          offsetTop = _this$props3.offsetTop,
          affix = _this$props3.affix,
          showInkInFixed = _this$props3.showInkInFixed,
          children = _this$props3.children;
      var activeLink = _this.state.activeLink;
      var prefixCls = getPrefixCls('anchor', customizePrefixCls); // To support old version react.
      // Have to add prefixCls on the instance.
      // https://github.com/facebook/react/issues/12397

      _this.prefixCls = prefixCls;
      var inkClass = classNames(\\"\\".concat(prefixCls, \\"-ink-ball\\"), {
        visible: activeLink
      });
      var wrapperClass = classNames(\\"\\".concat(prefixCls, \\"-wrapper\\"), _defineProperty({}, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), className);
      var anchorClass = classNames(prefixCls, {
        fixed: !affix && !showInkInFixed
      });

      var wrapperStyle = _extends({
        maxHeight: offsetTop ? \\"calc(100vh - \\".concat(offsetTop, \\"px)\\") : '100vh'
      }, style);

      var anchorContent = /*#__PURE__*/React.createElement(\\"div\\", {
        ref: _this.wrapperRef,
        className: wrapperClass,
        style: wrapperStyle
      }, /*#__PURE__*/React.createElement(\\"div\\", {
        className: anchorClass
      }, /*#__PURE__*/React.createElement(\\"div\\", {
        className: \\"\\".concat(prefixCls, \\"-ink\\")
      }, /*#__PURE__*/React.createElement(\\"span\\", {
        className: inkClass,
        ref: _this.saveInkNode
      })), children));
      return /*#__PURE__*/React.createElement(AnchorContext.Provider, {
        value: {
          registerLink: _this.registerLink,
          unregisterLink: _this.unregisterLink,
          activeLink: _this.state.activeLink,
          scrollTo: _this.handleScrollTo,
          onClick: _this.props.onClick
        }
      }, !affix ? anchorContent : /*#__PURE__*/React.createElement(Affix, {
        offsetTop: offsetTop,
        target: _this.getContainer
      }, anchorContent));
    };

    return _this;
  }

  _createClass(Anchor, [{
    key: \\"componentDidMount\\",
    value: function componentDidMount() {
      this.scrollContainer = this.getContainer();
      this.scrollEvent = addEventListener(this.scrollContainer, 'scroll', this.handleScroll);
      this.handleScroll();
    }
  }, {
    key: \\"componentDidUpdate\\",
    value: function componentDidUpdate() {
      if (this.scrollEvent) {
        var currentContainer = this.getContainer();

        if (this.scrollContainer !== currentContainer) {
          this.scrollContainer = currentContainer;
          this.scrollEvent.remove();
          this.scrollEvent = addEventListener(this.scrollContainer, 'scroll', this.handleScroll);
          this.handleScroll();
        }
      }

      this.updateInk();
    }
  }, {
    key: \\"componentWillUnmount\\",
    value: function componentWillUnmount() {
      if (this.scrollEvent) {
        this.scrollEvent.remove();
      }
    }
  }, {
    key: \\"getCurrentAnchor\\",
    value: function getCurrentAnchor() {
      var offsetTop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var bounds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;
      var getCurrentAnchor = this.props.getCurrentAnchor;

      if (typeof getCurrentAnchor === 'function') {
        return getCurrentAnchor();
      }

      var linkSections = [];
      var container = this.getContainer();
      this.links.forEach(function (link) {
        var sharpLinkMatch = sharpMatcherRegx.exec(link.toString());

        if (!sharpLinkMatch) {
          return;
        }

        var target = document.getElementById(sharpLinkMatch[1]);

        if (target) {
          var top = getOffsetTop(target, container);

          if (top < offsetTop + bounds) {
            linkSections.push({
              link: link,
              top: top
            });
          }
        }
      });

      if (linkSections.length) {
        var maxSection = linkSections.reduce(function (prev, curr) {
          return curr.top > prev.top ? curr : prev;
        });
        return maxSection.link;
      }

      return '';
    }
  }]);

  return Anchor;
}(React.Component);
Anchor.defaultProps = {
  affix: true,
  showInkInFixed: false
};
Anchor.contextType = ConfigContext;

var AnchorLink = /*#__PURE__*/function (_React$Component) {
  _inherits(AnchorLink, _React$Component);

  var _super = _createSuper(AnchorLink);

  function AnchorLink() {
    var _this;

    _classCallCheck(this, AnchorLink);

    _this = _super.apply(this, arguments);

    _this.handleClick = function (e) {
      var _this$context = _this.context,
          scrollTo = _this$context.scrollTo,
          onClick = _this$context.onClick;
      var _this$props = _this.props,
          href = _this$props.href,
          title = _this$props.title;

      if (onClick) {
        onClick(e, {
          title: title,
          href: href
        });
      }

      scrollTo(href);
    };

    _this.renderAnchorLink = function (_ref) {
      var getPrefixCls = _ref.getPrefixCls;
      var _this$props2 = _this.props,
          customizePrefixCls = _this$props2.prefixCls,
          href = _this$props2.href,
          title = _this$props2.title,
          children = _this$props2.children,
          className = _this$props2.className,
          target = _this$props2.target;
      var prefixCls = getPrefixCls('anchor', customizePrefixCls);
      var active = _this.context.activeLink === href;
      var wrapperClassName = classNames(\\"\\".concat(prefixCls, \\"-link\\"), _defineProperty({}, \\"\\".concat(prefixCls, \\"-link-active\\"), active), className);
      var titleClassName = classNames(\\"\\".concat(prefixCls, \\"-link-title\\"), _defineProperty({}, \\"\\".concat(prefixCls, \\"-link-title-active\\"), active));
      return /*#__PURE__*/React.createElement(\\"div\\", {
        className: wrapperClassName
      }, /*#__PURE__*/React.createElement(\\"a\\", {
        className: titleClassName,
        href: href,
        title: typeof title === 'string' ? title : '',
        target: target,
        onClick: _this.handleClick
      }, title), children);
    };

    return _this;
  }

  _createClass(AnchorLink, [{
    key: \\"componentDidMount\\",
    value: function componentDidMount() {
      this.context.registerLink(this.props.href);
    }
  }, {
    key: \\"componentDidUpdate\\",
    value: function componentDidUpdate(_ref2) {
      var prevHref = _ref2.href;
      var href = this.props.href;

      if (prevHref !== href) {
        this.context.unregisterLink(prevHref);
        this.context.registerLink(href);
      }
    }
  }, {
    key: \\"componentWillUnmount\\",
    value: function componentWillUnmount() {
      this.context.unregisterLink(this.props.href);
    }
  }, {
    key: \\"render\\",
    value: function render() {
      return /*#__PURE__*/React.createElement(ConfigConsumer, null, this.renderAnchorLink);
    }
  }]);

  return AnchorLink;
}(React.Component);

AnchorLink.defaultProps = {
  href: '#'
};
AnchorLink.contextType = AnchorContext;

Anchor.Link = AnchorLink;

// This icon file is generated automatically.
var DownOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z\\" } }] }, \\"name\\": \\"down\\", \\"theme\\": \\"outlined\\" };

var DownOutlined = function DownOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: DownOutlined$2
  }));
};

DownOutlined.displayName = 'DownOutlined';
var DownOutlined$1 = /*#__PURE__*/React.forwardRef(DownOutlined);

// This icon file is generated automatically.
var CheckOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M912 190h-69.9c-9.8 0-19.1 4.5-25.1 12.2L404.7 724.5 207 474a32 32 0 00-25.1-12.2H112c-6.7 0-10.4 7.7-6.3 12.9l273.9 347c12.8 16.2 37.4 16.2 50.3 0l488.4-618.9c4.1-5.1.4-12.8-6.3-12.8z\\" } }] }, \\"name\\": \\"check\\", \\"theme\\": \\"outlined\\" };

var CheckOutlined = function CheckOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: CheckOutlined$2
  }));
};

CheckOutlined.displayName = 'CheckOutlined';
var CheckOutlined$1 = /*#__PURE__*/React.forwardRef(CheckOutlined);

// This icon file is generated automatically.
var SearchOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M909.6 854.5L649.9 594.8C690.2 542.7 712 479 712 412c0-80.2-31.3-155.4-87.9-212.1-56.6-56.7-132-87.9-212.1-87.9s-155.5 31.3-212.1 87.9C143.2 256.5 112 331.8 112 412c0 80.1 31.3 155.5 87.9 212.1C256.5 680.8 331.8 712 412 712c67 0 130.6-21.8 182.7-62l259.7 259.6a8.2 8.2 0 0011.6 0l43.6-43.5a8.2 8.2 0 000-11.6zM570.4 570.4C528 612.7 471.8 636 412 636s-116-23.3-158.4-65.6C211.3 528 188 471.8 188 412s23.3-116.1 65.6-158.4C296 211.3 352.2 188 412 188s116.1 23.2 158.4 65.6S636 352.2 636 412s-23.3 116.1-65.6 158.4z\\" } }] }, \\"name\\": \\"search\\", \\"theme\\": \\"outlined\\" };

var SearchOutlined = function SearchOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: SearchOutlined$2
  }));
};

SearchOutlined.displayName = 'SearchOutlined';
var SearchOutlined$1 = /*#__PURE__*/React.forwardRef(SearchOutlined);

function getIcons(_ref) {
  var suffixIcon = _ref.suffixIcon,
      clearIcon = _ref.clearIcon,
      menuItemSelectedIcon = _ref.menuItemSelectedIcon,
      removeIcon = _ref.removeIcon,
      loading = _ref.loading,
      multiple = _ref.multiple,
      prefixCls = _ref.prefixCls;
  // Clear Icon
  var mergedClearIcon = clearIcon;

  if (!clearIcon) {
    mergedClearIcon = /*#__PURE__*/React.createElement(CloseCircleFilled$1, null);
  } // Arrow item icon


  var mergedSuffixIcon = null;

  if (suffixIcon !== undefined) {
    mergedSuffixIcon = suffixIcon;
  } else if (loading) {
    mergedSuffixIcon = /*#__PURE__*/React.createElement(LoadingOutlined$1, {
      spin: true
    });
  } else {
    var iconCls = \\"\\".concat(prefixCls, \\"-suffix\\");

    mergedSuffixIcon = function mergedSuffixIcon(_ref2) {
      var open = _ref2.open,
          showSearch = _ref2.showSearch;

      if (open && showSearch) {
        return /*#__PURE__*/React.createElement(SearchOutlined$1, {
          className: iconCls
        });
      }

      return /*#__PURE__*/React.createElement(DownOutlined$1, {
        className: iconCls
      });
    };
  } // Checked item icon


  var mergedItemIcon = null;

  if (menuItemSelectedIcon !== undefined) {
    mergedItemIcon = menuItemSelectedIcon;
  } else if (multiple) {
    mergedItemIcon = /*#__PURE__*/React.createElement(CheckOutlined$1, null);
  } else {
    mergedItemIcon = null;
  }

  var mergedRemoveIcon = null;

  if (removeIcon !== undefined) {
    mergedRemoveIcon = removeIcon;
  } else {
    mergedRemoveIcon = /*#__PURE__*/React.createElement(CloseOutlined$1, null);
  }

  return {
    clearIcon: mergedClearIcon,
    suffixIcon: mergedSuffixIcon,
    itemIcon: mergedItemIcon,
    removeIcon: mergedRemoveIcon
  };
}

// TODO: 4.0 - codemod should help to change \`filterOption\` to support node props.
var __rest$15 = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var SECRET_COMBOBOX_MODE_DO_NOT_USE = 'SECRET_COMBOBOX_MODE_DO_NOT_USE';

var InternalSelect = function InternalSelect(_a, ref) {
  var _classNames2;

  var customizePrefixCls = _a.prefixCls,
      _a$bordered = _a.bordered,
      bordered = _a$bordered === void 0 ? true : _a$bordered,
      className = _a.className,
      getPopupContainer = _a.getPopupContainer,
      dropdownClassName = _a.dropdownClassName,
      _a$listHeight = _a.listHeight,
      listHeight = _a$listHeight === void 0 ? 256 : _a$listHeight,
      _a$listItemHeight = _a.listItemHeight,
      listItemHeight = _a$listItemHeight === void 0 ? 24 : _a$listItemHeight,
      customizeSize = _a.size,
      notFoundContent = _a.notFoundContent,
      _a$transitionName = _a.transitionName,
      transitionName = _a$transitionName === void 0 ? 'slide-up' : _a$transitionName,
      props = __rest$15(_a, [\\"prefixCls\\", \\"bordered\\", \\"className\\", \\"getPopupContainer\\", \\"dropdownClassName\\", \\"listHeight\\", \\"listItemHeight\\", \\"size\\", \\"notFoundContent\\", \\"transitionName\\"]);

  var _React$useContext = React.useContext(ConfigContext),
      getContextPopupContainer = _React$useContext.getPopupContainer,
      getPrefixCls = _React$useContext.getPrefixCls,
      renderEmpty = _React$useContext.renderEmpty,
      direction = _React$useContext.direction,
      virtual = _React$useContext.virtual,
      dropdownMatchSelectWidth = _React$useContext.dropdownMatchSelectWidth;

  var size = React.useContext(SizeContext$1);
  var prefixCls = getPrefixCls('select', customizePrefixCls);
  var mode = React.useMemo(function () {
    var m = props.mode;

    if (m === 'combobox') {
      return undefined;
    }

    if (m === SECRET_COMBOBOX_MODE_DO_NOT_USE) {
      return 'combobox';
    }

    return m;
  }, [props.mode]);
  var isMultiple = mode === 'multiple' || mode === 'tags'; // ===================== Empty =====================

  var mergedNotFound;

  if (notFoundContent !== undefined) {
    mergedNotFound = notFoundContent;
  } else if (mode === 'combobox') {
    mergedNotFound = null;
  } else {
    mergedNotFound = renderEmpty('Select');
  } // ===================== Icons =====================


  var _getIcons = getIcons(_extends(_extends({}, props), {
    multiple: isMultiple,
    prefixCls: prefixCls
  })),
      suffixIcon = _getIcons.suffixIcon,
      itemIcon = _getIcons.itemIcon,
      removeIcon = _getIcons.removeIcon,
      clearIcon = _getIcons.clearIcon;

  var selectProps = omit(props, ['suffixIcon', 'itemIcon']);
  var rcSelectRtlDropDownClassName = classNames(dropdownClassName, _defineProperty({}, \\"\\".concat(prefixCls, \\"-dropdown-\\").concat(direction), direction === 'rtl'));
  var mergedSize = customizeSize || size;
  var mergedClassName = classNames((_classNames2 = {}, _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-lg\\"), mergedSize === 'large'), _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-sm\\"), mergedSize === 'small'), _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-borderless\\"), !bordered), _classNames2), className);
  return /*#__PURE__*/React.createElement(RcSelect, _extends({
    ref: ref,
    virtual: virtual,
    dropdownMatchSelectWidth: dropdownMatchSelectWidth
  }, selectProps, {
    transitionName: transitionName,
    listHeight: listHeight,
    listItemHeight: listItemHeight,
    mode: mode,
    prefixCls: prefixCls,
    direction: direction,
    inputIcon: suffixIcon,
    menuItemSelectedIcon: itemIcon,
    removeIcon: removeIcon,
    clearIcon: clearIcon,
    notFoundContent: mergedNotFound,
    className: mergedClassName,
    getPopupContainer: getPopupContainer || getContextPopupContainer,
    dropdownClassName: rcSelectRtlDropDownClassName
  }));
};

var SelectRef = /*#__PURE__*/React.forwardRef(InternalSelect);
var Select = SelectRef;
Select.SECRET_COMBOBOX_MODE_DO_NOT_USE = SECRET_COMBOBOX_MODE_DO_NOT_USE;
Select.Option = Option$2;
Select.OptGroup = OptGroup;

var isValidElement = React.isValidElement;
function replaceElement(element, replacement, props) {
  if (!isValidElement(element)) return replacement;
  return /*#__PURE__*/React.cloneElement(element, typeof props === 'function' ? props(element.props || {}) : props);
}
function cloneElement(element, props) {
  return replaceElement(element, element, props);
}

var Option$1 = Select.Option;

function isSelectOptionOrSelectOptGroup(child) {
  return child && child.type && (child.type.isSelectOption || child.type.isSelectOptGroup);
}

var AutoComplete = function AutoComplete(props, ref) {
  var customizePrefixCls = props.prefixCls,
      className = props.className,
      children = props.children,
      dataSource = props.dataSource;
  var childNodes = toArray$2(children); // ============================= Input =============================

  var customizeInput;

  if (childNodes.length === 1 && isValidElement(childNodes[0]) && !isSelectOptionOrSelectOptGroup(childNodes[0])) {
    var _childNodes = _slicedToArray(childNodes, 1);

    customizeInput = _childNodes[0];
  }

  var getInputElement = customizeInput ? function () {
    return customizeInput;
  } : undefined; // ============================ Options ============================

  var optionChildren; // [Legacy] convert \`children\` or \`dataSource\` into option children

  if (childNodes.length && isSelectOptionOrSelectOptGroup(childNodes[0])) {
    optionChildren = children;
  } else {
    optionChildren = dataSource ? dataSource.map(function (item) {
      if (isValidElement(item)) {
        return item;
      }

      switch (_typeof(item)) {
        case 'string':
          return /*#__PURE__*/React.createElement(Option$1, {
            key: item,
            value: item
          }, item);

        case 'object':
          {
            var optionValue = item.value;
            return /*#__PURE__*/React.createElement(Option$1, {
              key: optionValue,
              value: optionValue
            }, item.text);
          }

        default:
          throw new Error('AutoComplete[dataSource] only supports type \`string[] | Object[]\`.');
      }
    }) : [];
  } // ============================ Warning ============================


  React.useEffect(function () {
    devWarning(!('dataSource' in props), 'AutoComplete', '\`dataSource\` is deprecated, please use \`options\` instead.');
    devWarning(!customizeInput || !('size' in props), 'AutoComplete', 'You need to control style self instead of setting \`size\` when using customize input.');
  }, []);
  return /*#__PURE__*/React.createElement(ConfigConsumer, null, function (_ref) {
    var getPrefixCls = _ref.getPrefixCls;
    var prefixCls = getPrefixCls('select', customizePrefixCls);
    return /*#__PURE__*/React.createElement(Select, _extends({
      ref: ref
    }, omit(props, ['dataSource']), {
      prefixCls: prefixCls,
      className: classNames(\\"\\".concat(prefixCls, \\"-auto-complete\\"), className),
      mode: Select.SECRET_COMBOBOX_MODE_DO_NOT_USE,
      // Internal api
      getInputElement: getInputElement
    }), optionChildren);
  });
};

var RefAutoComplete = /*#__PURE__*/React.forwardRef(AutoComplete);
RefAutoComplete.Option = Option$1;

function getDataOrAriaProps(props) {
  return Object.keys(props).reduce(function (prev, key) {
    if ((key.substr(0, 5) === 'data-' || key.substr(0, 5) === 'aria-' || key === 'role') && key.substr(0, 7) !== 'data-__') {
      prev[key] = props[key];
    }

    return prev;
  }, {});
}

var ErrorBoundary = /*#__PURE__*/function (_React$Component) {
  _inherits(ErrorBoundary, _React$Component);

  var _super = _createSuper(ErrorBoundary);

  function ErrorBoundary() {
    var _this;

    _classCallCheck(this, ErrorBoundary);

    _this = _super.apply(this, arguments);
    _this.state = {
      error: undefined,
      info: {
        componentStack: ''
      }
    };
    return _this;
  }

  _createClass(ErrorBoundary, [{
    key: \\"componentDidCatch\\",
    value: function componentDidCatch(error, info) {
      this.setState({
        error: error,
        info: info
      });
    }
  }, {
    key: \\"render\\",
    value: function render() {
      var _this$props = this.props,
          message = _this$props.message,
          description = _this$props.description,
          children = _this$props.children;
      var _this$state = this.state,
          error = _this$state.error,
          info = _this$state.info;
      var componentStack = info && info.componentStack ? info.componentStack : null;
      var errorMessage = typeof message === 'undefined' ? (error || '').toString() : message;
      var errorDescription = typeof description === 'undefined' ? componentStack : description;

      if (error) {
        return /*#__PURE__*/React.createElement(Alert, {
          type: \\"error\\",
          message: errorMessage,
          description: /*#__PURE__*/React.createElement(\\"pre\\", null, errorDescription)
        });
      }

      return children;
    }
  }]);

  return ErrorBoundary;
}(React.Component);

var __rest$14 = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var iconMapFilled = {
  success: CheckCircleFilled$1,
  info: InfoCircleFilled$1,
  error: CloseCircleFilled$1,
  warning: ExclamationCircleFilled$1
};
var iconMapOutlined = {
  success: CheckCircleOutlined$1,
  info: InfoCircleOutlined$1,
  error: CloseCircleOutlined$1,
  warning: ExclamationCircleOutlined$1
};

var Alert = function Alert(_a) {
  var _classNames2;

  var description = _a.description,
      customizePrefixCls = _a.prefixCls,
      message = _a.message,
      banner = _a.banner,
      _a$className = _a.className,
      className = _a$className === void 0 ? '' : _a$className,
      style = _a.style,
      onMouseEnter = _a.onMouseEnter,
      onMouseLeave = _a.onMouseLeave,
      onClick = _a.onClick,
      afterClose = _a.afterClose,
      showIcon = _a.showIcon,
      closable = _a.closable,
      closeText = _a.closeText,
      action = _a.action,
      props = __rest$14(_a, [\\"description\\", \\"prefixCls\\", \\"message\\", \\"banner\\", \\"className\\", \\"style\\", \\"onMouseEnter\\", \\"onMouseLeave\\", \\"onClick\\", \\"afterClose\\", \\"showIcon\\", \\"closable\\", \\"closeText\\", \\"action\\"]);

  var _React$useState = React.useState(false),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      closed = _React$useState2[0],
      setClosed = _React$useState2[1];

  var ref = React.useRef();

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  var prefixCls = getPrefixCls('alert', customizePrefixCls);

  var handleClose = function handleClose(e) {
    var _a;

    setClosed(true);
    (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props, e);
  };

  var getType = function getType() {
    var type = props.type;

    if (type !== undefined) {
      return type;
    } // banner 模式默认为警告


    return banner ? 'warning' : 'info';
  }; // closeable when closeText is assigned


  var isClosable = closeText ? true : closable;
  var type = getType();

  var renderIconNode = function renderIconNode() {
    var icon = props.icon; // use outline icon in alert with description

    var iconType = (description ? iconMapOutlined : iconMapFilled)[type] || null;

    if (icon) {
      return replaceElement(icon, /*#__PURE__*/React.createElement(\\"span\\", {
        className: \\"\\".concat(prefixCls, \\"-icon\\")
      }, icon), function () {
        return {
          className: classNames(\\"\\".concat(prefixCls, \\"-icon\\"), _defineProperty({}, icon.props.className, icon.props.className))
        };
      });
    }

    return /*#__PURE__*/React.createElement(iconType, {
      className: \\"\\".concat(prefixCls, \\"-icon\\")
    });
  };

  var renderCloseIcon = function renderCloseIcon() {
    return isClosable ? /*#__PURE__*/React.createElement(\\"button\\", {
      type: \\"button\\",
      onClick: handleClose,
      className: \\"\\".concat(prefixCls, \\"-close-icon\\"),
      tabIndex: 0
    }, closeText ? /*#__PURE__*/React.createElement(\\"span\\", {
      className: \\"\\".concat(prefixCls, \\"-close-text\\")
    }, closeText) : /*#__PURE__*/React.createElement(CloseOutlined$1, null)) : null;
  }; // banner 模式默认有 Icon


  var isShowIcon = banner && showIcon === undefined ? true : showIcon;
  var alertCls = classNames(prefixCls, \\"\\".concat(prefixCls, \\"-\\").concat(type), (_classNames2 = {}, _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-with-description\\"), !!description), _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-no-icon\\"), !isShowIcon), _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-banner\\"), !!banner), _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), _classNames2), className);
  var dataOrAriaProps = getDataOrAriaProps(props);
  return /*#__PURE__*/React.createElement(CSSMotion, {
    visible: !closed,
    motionName: \\"\\".concat(prefixCls, \\"-motion\\"),
    motionAppear: false,
    motionEnter: false,
    onLeaveStart: function onLeaveStart(node) {
      return {
        maxHeight: node.offsetHeight
      };
    },
    onLeaveEnd: afterClose
  }, function (_ref) {
    var motionClassName = _ref.className,
        motionStyle = _ref.style;
    return /*#__PURE__*/React.createElement(\\"div\\", _extends({
      ref: ref,
      \\"data-show\\": !closed,
      className: classNames(alertCls, motionClassName),
      style: _extends(_extends({}, style), motionStyle),
      onMouseEnter: onMouseEnter,
      onMouseLeave: onMouseLeave,
      onClick: onClick,
      role: \\"alert\\"
    }, dataOrAriaProps), isShowIcon ? renderIconNode() : null, /*#__PURE__*/React.createElement(\\"div\\", {
      className: \\"\\".concat(prefixCls, \\"-content\\")
    }, /*#__PURE__*/React.createElement(\\"div\\", {
      className: \\"\\".concat(prefixCls, \\"-message\\")
    }, message), /*#__PURE__*/React.createElement(\\"div\\", {
      className: \\"\\".concat(prefixCls, \\"-description\\")
    }, description)), action ? /*#__PURE__*/React.createElement(\\"div\\", {
      className: \\"\\".concat(prefixCls, \\"-action\\")
    }, action) : null, renderCloseIcon());
  });
};

Alert.ErrorBoundary = ErrorBoundary;

var responsiveArray = ['xxl', 'xl', 'lg', 'md', 'sm', 'xs'];
var responsiveMap = {
  xs: '(max-width: 575px)',
  sm: '(min-width: 576px)',
  md: '(min-width: 768px)',
  lg: '(min-width: 992px)',
  xl: '(min-width: 1200px)',
  xxl: '(min-width: 1600px)'
};
var subscribers = new Map();
var subUid = -1;
var screens = {};
var responsiveObserve = {
  matchHandlers: {},
  dispatch: function dispatch(pointMap) {
    screens = pointMap;
    subscribers.forEach(function (func) {
      return func(screens);
    });
    return subscribers.size >= 1;
  },
  subscribe: function subscribe(func) {
    if (!subscribers.size) this.register();
    subUid += 1;
    subscribers.set(subUid, func);
    func(screens);
    return subUid;
  },
  unsubscribe: function unsubscribe(token) {
    subscribers[\\"delete\\"](token);
    if (!subscribers.size) this.unregister();
  },
  unregister: function unregister() {
    var _this = this;

    Object.keys(responsiveMap).forEach(function (screen) {
      var matchMediaQuery = responsiveMap[screen];
      var handler = _this.matchHandlers[matchMediaQuery];
      handler === null || handler === void 0 ? void 0 : handler.mql.removeListener(handler === null || handler === void 0 ? void 0 : handler.listener);
    });
    subscribers.clear();
  },
  register: function register() {
    var _this2 = this;

    Object.keys(responsiveMap).forEach(function (screen) {
      var matchMediaQuery = responsiveMap[screen];

      var listener = function listener(_ref) {
        var matches = _ref.matches;

        _this2.dispatch(_extends(_extends({}, screens), _defineProperty({}, screen, matches)));
      };

      var mql = window.matchMedia(matchMediaQuery);
      mql.addListener(listener);
      _this2.matchHandlers[matchMediaQuery] = {
        mql: mql,
        listener: listener
      };
      listener(mql);
    });
  }
};

function useBreakpoint() {
  var _useState = useState({}),
      _useState2 = _slicedToArray(_useState, 2),
      screens = _useState2[0],
      setScreens = _useState2[1];

  useEffect(function () {
    var token = responsiveObserve.subscribe(function (supportScreens) {
      setScreens(supportScreens);
    });
    return function () {
      return responsiveObserve.unsubscribe(token);
    };
  }, []);
  return screens;
}

var SizeContext = /*#__PURE__*/React.createContext('default');
var SizeContextProvider = function SizeContextProvider(_ref) {
  var children = _ref.children,
      size = _ref.size;
  return /*#__PURE__*/React.createElement(SizeContext.Consumer, null, function (originSize) {
    return /*#__PURE__*/React.createElement(SizeContext.Provider, {
      value: size || originSize
    }, children);
  });
};

var __rest$13 = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var InternalAvatar = function InternalAvatar(props, ref) {
  var _classNames, _classNames2;

  var groupSize = React.useContext(SizeContext);

  var _React$useState = React.useState(1),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      scale = _React$useState2[0],
      setScale = _React$useState2[1];

  var _React$useState3 = React.useState(false),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      mounted = _React$useState4[0],
      setMounted = _React$useState4[1];

  var _React$useState5 = React.useState(true),
      _React$useState6 = _slicedToArray(_React$useState5, 2),
      isImgExist = _React$useState6[0],
      setIsImgExist = _React$useState6[1];

  var avatarNodeRef = React.useRef();
  var avatarChildrenRef = React.useRef();
  var avatarNodeMergeRef = composeRef(ref, avatarNodeRef);

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls;

  var setScaleParam = function setScaleParam() {
    if (!avatarChildrenRef.current || !avatarNodeRef.current) {
      return;
    }

    var childrenWidth = avatarChildrenRef.current.offsetWidth; // offsetWidth avoid affecting be transform scale

    var nodeWidth = avatarNodeRef.current.offsetWidth; // denominator is 0 is no meaning

    if (childrenWidth !== 0 && nodeWidth !== 0) {
      var _props$gap = props.gap,
          gap = _props$gap === void 0 ? 4 : _props$gap;

      if (gap * 2 < nodeWidth) {
        setScale(nodeWidth - gap * 2 < childrenWidth ? (nodeWidth - gap * 2) / childrenWidth : 1);
      }
    }
  };

  React.useEffect(function () {
    setMounted(true);
  }, []);
  React.useEffect(function () {
    setIsImgExist(true);
    setScale(1);
  }, [props.src]);
  React.useEffect(function () {
    setScaleParam();
  }, [props.gap]);

  var handleImgLoadError = function handleImgLoadError() {
    var onError = props.onError;
    var errorFlag = onError ? onError() : undefined;

    if (errorFlag !== false) {
      setIsImgExist(false);
    }
  };

  var customizePrefixCls = props.prefixCls,
      shape = props.shape,
      customSize = props.size,
      src = props.src,
      srcSet = props.srcSet,
      icon = props.icon,
      className = props.className,
      alt = props.alt,
      draggable = props.draggable,
      children = props.children,
      others = __rest$13(props, [\\"prefixCls\\", \\"shape\\", \\"size\\", \\"src\\", \\"srcSet\\", \\"icon\\", \\"className\\", \\"alt\\", \\"draggable\\", \\"children\\"]);

  var size = customSize === 'default' ? groupSize : customSize;
  var screens = useBreakpoint();
  var responsiveSizeStyle = React.useMemo(function () {
    if (_typeof(size) !== 'object') {
      return {};
    }

    var currentBreakpoint = responsiveArray.find(function (screen) {
      return screens[screen];
    });
    var currentSize = size[currentBreakpoint];
    return currentSize ? {
      width: currentSize,
      height: currentSize,
      lineHeight: \\"\\".concat(currentSize, \\"px\\"),
      fontSize: icon ? currentSize / 2 : 18
    } : {};
  }, [screens, size]);
  devWarning(!(typeof icon === 'string' && icon.length > 2), 'Avatar', \\"\`icon\` is using ReactNode instead of string naming in v4. Please check \`\\".concat(icon, \\"\` at https://ant.design/components/icon\\"));
  var prefixCls = getPrefixCls('avatar', customizePrefixCls);
  var sizeCls = classNames((_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-lg\\"), size === 'large'), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-sm\\"), size === 'small'), _classNames));
  var hasImageElement = /*#__PURE__*/React.isValidElement(src);
  var classString = classNames(prefixCls, sizeCls, (_classNames2 = {}, _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-\\").concat(shape), shape), _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-image\\"), hasImageElement || src && isImgExist), _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-icon\\"), icon), _classNames2), className);
  var sizeStyle = typeof size === 'number' ? {
    width: size,
    height: size,
    lineHeight: \\"\\".concat(size, \\"px\\"),
    fontSize: icon ? size / 2 : 18
  } : {};
  var childrenToRender;

  if (typeof src === 'string' && isImgExist) {
    childrenToRender = /*#__PURE__*/React.createElement(\\"img\\", {
      src: src,
      draggable: draggable,
      srcSet: srcSet,
      onError: handleImgLoadError,
      alt: alt
    });
  } else if (hasImageElement) {
    childrenToRender = src;
  } else if (icon) {
    childrenToRender = icon;
  } else if (mounted || scale !== 1) {
    var transformString = \\"scale(\\".concat(scale, \\") translateX(-50%)\\");
    var childrenStyle = {
      msTransform: transformString,
      WebkitTransform: transformString,
      transform: transformString
    };
    var sizeChildrenStyle = typeof size === 'number' ? {
      lineHeight: \\"\\".concat(size, \\"px\\")
    } : {};
    childrenToRender = /*#__PURE__*/React.createElement(ResizeObserver, {
      onResize: setScaleParam
    }, /*#__PURE__*/React.createElement(\\"span\\", {
      className: \\"\\".concat(prefixCls, \\"-string\\"),
      ref: function ref(node) {
        avatarChildrenRef.current = node;
      },
      style: _extends(_extends({}, sizeChildrenStyle), childrenStyle)
    }, children));
  } else {
    childrenToRender = /*#__PURE__*/React.createElement(\\"span\\", {
      className: \\"\\".concat(prefixCls, \\"-string\\"),
      style: {
        opacity: 0
      },
      ref: function ref(node) {
        avatarChildrenRef.current = node;
      }
    }, children);
  } // The event is triggered twice from bubbling up the DOM tree.
  // see https://codesandbox.io/s/kind-snow-9lidz


  delete others.onError;
  delete others.gap;
  return /*#__PURE__*/React.createElement(\\"span\\", _extends({}, others, {
    style: _extends(_extends(_extends({}, sizeStyle), responsiveSizeStyle), others.style),
    className: classString,
    ref: avatarNodeMergeRef
  }), childrenToRender);
};

var Avatar$1 = /*#__PURE__*/React.forwardRef(InternalAvatar);
Avatar$1.displayName = 'Avatar';
Avatar$1.defaultProps = {
  shape: 'circle',
  size: 'default'
};

var autoAdjustOverflowEnabled = {
  adjustX: 1,
  adjustY: 1
};
var autoAdjustOverflowDisabled = {
  adjustX: 0,
  adjustY: 0
};
var targetOffset = [0, 0];
function getOverflowOptions(autoAdjustOverflow) {
  if (typeof autoAdjustOverflow === 'boolean') {
    return autoAdjustOverflow ? autoAdjustOverflowEnabled : autoAdjustOverflowDisabled;
  }

  return _extends(_extends({}, autoAdjustOverflowDisabled), autoAdjustOverflow);
}
function getPlacements(config) {
  var _config$arrowWidth = config.arrowWidth,
      arrowWidth = _config$arrowWidth === void 0 ? 5 : _config$arrowWidth,
      _config$horizontalArr = config.horizontalArrowShift,
      horizontalArrowShift = _config$horizontalArr === void 0 ? 16 : _config$horizontalArr,
      _config$verticalArrow = config.verticalArrowShift,
      verticalArrowShift = _config$verticalArrow === void 0 ? 8 : _config$verticalArrow,
      autoAdjustOverflow = config.autoAdjustOverflow;
  var placementMap = {
    left: {
      points: ['cr', 'cl'],
      offset: [-4, 0]
    },
    right: {
      points: ['cl', 'cr'],
      offset: [4, 0]
    },
    top: {
      points: ['bc', 'tc'],
      offset: [0, -4]
    },
    bottom: {
      points: ['tc', 'bc'],
      offset: [0, 4]
    },
    topLeft: {
      points: ['bl', 'tc'],
      offset: [-(horizontalArrowShift + arrowWidth), -4]
    },
    leftTop: {
      points: ['tr', 'cl'],
      offset: [-4, -(verticalArrowShift + arrowWidth)]
    },
    topRight: {
      points: ['br', 'tc'],
      offset: [horizontalArrowShift + arrowWidth, -4]
    },
    rightTop: {
      points: ['tl', 'cr'],
      offset: [4, -(verticalArrowShift + arrowWidth)]
    },
    bottomRight: {
      points: ['tr', 'bc'],
      offset: [horizontalArrowShift + arrowWidth, 4]
    },
    rightBottom: {
      points: ['bl', 'cr'],
      offset: [4, verticalArrowShift + arrowWidth]
    },
    bottomLeft: {
      points: ['tl', 'bc'],
      offset: [-(horizontalArrowShift + arrowWidth), 4]
    },
    leftBottom: {
      points: ['br', 'cl'],
      offset: [-4, verticalArrowShift + arrowWidth]
    }
  };
  Object.keys(placementMap).forEach(function (key) {
    placementMap[key] = config.arrowPointAtCenter ? _extends(_extends({}, placementMap[key]), {
      overflow: getOverflowOptions(autoAdjustOverflow),
      targetOffset: targetOffset
    }) : _extends(_extends({}, placements[key]), {
      overflow: getOverflowOptions(autoAdjustOverflow)
    });
    placementMap[key].ignoreShake = true;
  });
  return placementMap;
}

// https://stackoverflow.com/questions/46176165/ways-to-get-string-literal-type-of-array-values-without-enum-overhead
var tuple = function tuple() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return args;
};
var tupleNum = function tupleNum() {
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  return args;
};

var PresetStatusColorTypes = tuple('success', 'processing', 'error', 'default', 'warning'); // eslint-disable-next-line import/prefer-default-export

var PresetColorTypes = tuple('pink', 'red', 'yellow', 'orange', 'cyan', 'green', 'blue', 'purple', 'geekblue', 'magenta', 'volcano', 'gold', 'lime');

var splitObject = function splitObject(obj, keys) {
  var picked = {};

  var omitted = _extends({}, obj);

  keys.forEach(function (key) {
    if (obj && key in obj) {
      picked[key] = obj[key];
      delete omitted[key];
    }
  });
  return {
    picked: picked,
    omitted: omitted
  };
};

var PresetColorRegex$1 = new RegExp(\\"^(\\".concat(PresetColorTypes.join('|'), \\")(-inverse)?$\\")); // Fix Tooltip won't hide at disabled button
// mouse events don't trigger at disabled button in Chrome
// https://github.com/react-component/tooltip/issues/18

function getDisabledCompatibleChildren(element, prefixCls) {
  var elementType = element.type;

  if ((elementType.__ANT_BUTTON === true || elementType.__ANT_SWITCH === true || elementType.__ANT_CHECKBOX === true || element.type === 'button') && element.props.disabled) {
    // Pick some layout related style properties up to span
    // Prevent layout bugs like https://github.com/ant-design/ant-design/issues/5254
    var _splitObject = splitObject(element.props.style, ['position', 'left', 'right', 'top', 'bottom', 'float', 'display', 'zIndex']),
        picked = _splitObject.picked,
        omitted = _splitObject.omitted;

    var spanStyle = _extends(_extends({
      display: 'inline-block'
    }, picked), {
      cursor: 'not-allowed',
      width: element.props.block ? '100%' : null
    });

    var buttonStyle = _extends(_extends({}, omitted), {
      pointerEvents: 'none'
    });

    var child = cloneElement(element, {
      style: buttonStyle,
      className: null
    });
    return /*#__PURE__*/React.createElement(\\"span\\", {
      style: spanStyle,
      className: classNames(element.props.className, \\"\\".concat(prefixCls, \\"-disabled-compatible-wrapper\\"))
    }, child);
  }

  return element;
}

var Tooltip = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _classNames2;

  var _React$useContext = React.useContext(ConfigContext),
      getContextPopupContainer = _React$useContext.getPopupContainer,
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  var _React$useState = React.useState(!!props.visible || !!props.defaultVisible),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      visible = _React$useState2[0],
      setVisible = _React$useState2[1];

  React.useEffect(function () {
    if ('visible' in props) {
      setVisible(props.visible);
    }
  }, [props.visible]);

  var isNoTitle = function isNoTitle() {
    var title = props.title,
        overlay = props.overlay;
    return !title && !overlay && title !== 0; // overlay for old version compatibility
  };

  var onVisibleChange = function onVisibleChange(vis) {
    if (!('visible' in props)) {
      setVisible(isNoTitle() ? false : vis);
    }

    if (props.onVisibleChange && !isNoTitle()) {
      props.onVisibleChange(vis);
    }
  };

  var getTooltipPlacements = function getTooltipPlacements() {
    var builtinPlacements = props.builtinPlacements,
        arrowPointAtCenter = props.arrowPointAtCenter,
        autoAdjustOverflow = props.autoAdjustOverflow;
    return builtinPlacements || getPlacements({
      arrowPointAtCenter: arrowPointAtCenter,
      autoAdjustOverflow: autoAdjustOverflow
    });
  }; // 动态设置动画点


  var onPopupAlign = function onPopupAlign(domNode, align) {
    var placements = getTooltipPlacements(); // 当前返回的位置

    var placement = Object.keys(placements).filter(function (key) {
      return placements[key].points[0] === align.points[0] && placements[key].points[1] === align.points[1];
    })[0];

    if (!placement) {
      return;
    } // 根据当前坐标设置动画点


    var rect = domNode.getBoundingClientRect();
    var transformOrigin = {
      top: '50%',
      left: '50%'
    };

    if (placement.indexOf('top') >= 0 || placement.indexOf('Bottom') >= 0) {
      transformOrigin.top = \\"\\".concat(rect.height - align.offset[1], \\"px\\");
    } else if (placement.indexOf('Top') >= 0 || placement.indexOf('bottom') >= 0) {
      transformOrigin.top = \\"\\".concat(-align.offset[1], \\"px\\");
    }

    if (placement.indexOf('left') >= 0 || placement.indexOf('Right') >= 0) {
      transformOrigin.left = \\"\\".concat(rect.width - align.offset[0], \\"px\\");
    } else if (placement.indexOf('right') >= 0 || placement.indexOf('Left') >= 0) {
      transformOrigin.left = \\"\\".concat(-align.offset[0], \\"px\\");
    }

    domNode.style.transformOrigin = \\"\\".concat(transformOrigin.left, \\" \\").concat(transformOrigin.top);
  };

  var getOverlay = function getOverlay() {
    var title = props.title,
        overlay = props.overlay;

    if (title === 0) {
      return title;
    }

    return overlay || title || '';
  };

  var customizePrefixCls = props.prefixCls,
      openClassName = props.openClassName,
      getPopupContainer = props.getPopupContainer,
      getTooltipContainer = props.getTooltipContainer,
      overlayClassName = props.overlayClassName,
      color = props.color,
      overlayInnerStyle = props.overlayInnerStyle,
      children = props.children;
  var prefixCls = getPrefixCls('tooltip', customizePrefixCls);
  var tempVisible = visible; // Hide tooltip when there is no title

  if (!('visible' in props) && isNoTitle()) {
    tempVisible = false;
  }

  var child = getDisabledCompatibleChildren(isValidElement(children) ? children : /*#__PURE__*/React.createElement(\\"span\\", null, children), prefixCls);
  var childProps = child.props;
  var childCls = classNames(childProps.className, _defineProperty({}, openClassName || \\"\\".concat(prefixCls, \\"-open\\"), true));
  var customOverlayClassName = classNames(overlayClassName, (_classNames2 = {}, _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-\\").concat(color), color && PresetColorRegex$1.test(color)), _classNames2));
  var formattedOverlayInnerStyle = overlayInnerStyle;
  var arrowContentStyle;

  if (color && !PresetColorRegex$1.test(color)) {
    formattedOverlayInnerStyle = _extends(_extends({}, overlayInnerStyle), {
      background: color
    });
    arrowContentStyle = {
      background: color
    };
  }

  return /*#__PURE__*/React.createElement(RcTooltip, _extends({}, props, {
    prefixCls: prefixCls,
    overlayClassName: customOverlayClassName,
    getTooltipContainer: getPopupContainer || getTooltipContainer || getContextPopupContainer,
    ref: ref,
    builtinPlacements: getTooltipPlacements(),
    overlay: getOverlay(),
    visible: tempVisible,
    onVisibleChange: onVisibleChange,
    onPopupAlign: onPopupAlign,
    overlayInnerStyle: formattedOverlayInnerStyle,
    arrowContent: /*#__PURE__*/React.createElement(\\"span\\", {
      className: \\"\\".concat(prefixCls, \\"-arrow-content\\"),
      style: arrowContentStyle
    })
  }), tempVisible ? cloneElement(child, {
    className: childCls
  }) : child);
});
Tooltip.displayName = 'Tooltip';
Tooltip.defaultProps = {
  placement: 'top',
  transitionName: 'zoom-big-fast',
  mouseEnterDelay: 0.1,
  mouseLeaveDelay: 0.1,
  arrowPointAtCenter: false,
  autoAdjustOverflow: true
};

var getRenderPropValue = function getRenderPropValue(propValue) {
  if (!propValue) {
    return null;
  }

  var isRenderFunction = typeof propValue === 'function';

  if (isRenderFunction) {
    return propValue();
  }

  return propValue;
};

var __rest$12 = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var Popover = /*#__PURE__*/React.forwardRef(function (_a, ref) {
  var customizePrefixCls = _a.prefixCls,
      title = _a.title,
      content = _a.content,
      otherProps = __rest$12(_a, [\\"prefixCls\\", \\"title\\", \\"content\\"]);

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls;

  var getOverlay = function getOverlay(prefixCls) {
    return /*#__PURE__*/React.createElement(React.Fragment, null, title && /*#__PURE__*/React.createElement(\\"div\\", {
      className: \\"\\".concat(prefixCls, \\"-title\\")
    }, getRenderPropValue(title)), /*#__PURE__*/React.createElement(\\"div\\", {
      className: \\"\\".concat(prefixCls, \\"-inner-content\\")
    }, getRenderPropValue(content)));
  };

  var prefixCls = getPrefixCls('popover', customizePrefixCls);
  return /*#__PURE__*/React.createElement(Tooltip, _extends({}, otherProps, {
    prefixCls: prefixCls,
    ref: ref,
    overlay: getOverlay(prefixCls)
  }));
});
Popover.displayName = 'Popover';
Popover.defaultProps = {
  placement: 'top',
  transitionName: 'zoom-big',
  trigger: 'hover',
  mouseEnterDelay: 0.1,
  mouseLeaveDelay: 0.1,
  overlayStyle: {}
};

var Group$3 = function Group(props) {
  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  var customizePrefixCls = props.prefixCls,
      _props$className = props.className,
      className = _props$className === void 0 ? '' : _props$className,
      maxCount = props.maxCount,
      maxStyle = props.maxStyle,
      size = props.size;
  var prefixCls = getPrefixCls('avatar-group', customizePrefixCls);
  var cls = classNames(prefixCls, _defineProperty({}, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), className);
  var children = props.children,
      _props$maxPopoverPlac = props.maxPopoverPlacement,
      maxPopoverPlacement = _props$maxPopoverPlac === void 0 ? 'top' : _props$maxPopoverPlac;
  var childrenWithProps = toArray$2(children).map(function (child, index) {
    return cloneElement(child, {
      key: \\"avatar-key-\\".concat(index)
    });
  });
  var numOfChildren = childrenWithProps.length;

  if (maxCount && maxCount < numOfChildren) {
    var childrenShow = childrenWithProps.slice(0, maxCount);
    var childrenHidden = childrenWithProps.slice(maxCount, numOfChildren);
    childrenShow.push( /*#__PURE__*/React.createElement(Popover, {
      key: \\"avatar-popover-key\\",
      content: childrenHidden,
      trigger: \\"hover\\",
      placement: maxPopoverPlacement,
      overlayClassName: \\"\\".concat(prefixCls, \\"-popover\\")
    }, /*#__PURE__*/React.createElement(Avatar$1, {
      style: maxStyle
    }, \\"+\\".concat(numOfChildren - maxCount))));
    return /*#__PURE__*/React.createElement(SizeContextProvider, {
      size: size
    }, /*#__PURE__*/React.createElement(\\"div\\", {
      className: cls,
      style: props.style
    }, childrenShow));
  }

  return /*#__PURE__*/React.createElement(SizeContextProvider, {
    size: size
  }, /*#__PURE__*/React.createElement(\\"div\\", {
    className: cls,
    style: props.style
  }, childrenWithProps));
};

var Avatar = Avatar$1;
Avatar.Group = Group$3;

// This icon file is generated automatically.
var VerticalAlignTopOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M859.9 168H164.1c-4.5 0-8.1 3.6-8.1 8v60c0 4.4 3.6 8 8.1 8h695.8c4.5 0 8.1-3.6 8.1-8v-60c0-4.4-3.6-8-8.1-8zM518.3 355a8 8 0 00-12.6 0l-112 141.7a7.98 7.98 0 006.3 12.9h73.9V848c0 4.4 3.6 8 8 8h60c4.4 0 8-3.6 8-8V509.7H624c6.7 0 10.4-7.7 6.3-12.9L518.3 355z\\" } }] }, \\"name\\": \\"vertical-align-top\\", \\"theme\\": \\"outlined\\" };

var VerticalAlignTopOutlined = function VerticalAlignTopOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: VerticalAlignTopOutlined$2
  }));
};

VerticalAlignTopOutlined.displayName = 'VerticalAlignTopOutlined';
var VerticalAlignTopOutlined$1 = /*#__PURE__*/React.forwardRef(VerticalAlignTopOutlined);

var BackTop = function BackTop(props) {
  var _useMergedState = useMergedState(false, {
    value: props.visible
  }),
      _useMergedState2 = _slicedToArray(_useMergedState, 2),
      visible = _useMergedState2[0],
      setVisible = _useMergedState2[1];

  var ref = /*#__PURE__*/React.createRef();
  var scrollEvent = React.useRef();

  var getDefaultTarget = function getDefaultTarget() {
    return ref.current && ref.current.ownerDocument ? ref.current.ownerDocument : window;
  };

  var handleScroll = throttleByAnimationFrame(function (e) {
    var visibilityHeight = props.visibilityHeight;
    var scrollTop = getScroll(e.target, true);
    setVisible(scrollTop > visibilityHeight);
  });

  var bindScrollEvent = function bindScrollEvent() {
    var target = props.target;
    var getTarget = target || getDefaultTarget;
    var container = getTarget();
    scrollEvent.current = addEventListener(container, 'scroll', function (e) {
      handleScroll(e);
    });
    handleScroll({
      target: container
    });
  };

  React.useEffect(function () {
    bindScrollEvent();
    return function () {
      if (scrollEvent.current) {
        scrollEvent.current.remove();
      }

      handleScroll.cancel();
    };
  }, [props.target]);

  var scrollToTop = function scrollToTop(e) {
    var onClick = props.onClick,
        target = props.target,
        _props$duration = props.duration,
        duration = _props$duration === void 0 ? 450 : _props$duration;
    scrollTo(0, {
      getContainer: target || getDefaultTarget,
      duration: duration
    });

    if (typeof onClick === 'function') {
      onClick(e);
    }
  };

  var renderChildren = function renderChildren(_ref) {
    var prefixCls = _ref.prefixCls;
    var children = props.children;
    var defaultElement = /*#__PURE__*/React.createElement(\\"div\\", {
      className: \\"\\".concat(prefixCls, \\"-content\\")
    }, /*#__PURE__*/React.createElement(\\"div\\", {
      className: \\"\\".concat(prefixCls, \\"-icon\\")
    }, /*#__PURE__*/React.createElement(VerticalAlignTopOutlined$1, null)));
    return /*#__PURE__*/React.createElement(CSSMotion, {
      visible: visible,
      motionName: \\"fade\\",
      removeOnLeave: true
    }, function (_ref2) {
      var motionClassName = _ref2.className;
      var childNode = children || defaultElement;
      return /*#__PURE__*/React.createElement(\\"div\\", null, cloneElement(childNode, function (_ref3) {
        var className = _ref3.className;
        return {
          className: classNames(motionClassName, className)
        };
      }));
    });
  };

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  var customizePrefixCls = props.prefixCls,
      _props$className = props.className,
      className = _props$className === void 0 ? '' : _props$className;
  var prefixCls = getPrefixCls('back-top', customizePrefixCls);
  var classString = classNames(prefixCls, _defineProperty({}, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), className); // fix https://fb.me/react-unknown-prop

  var divProps = omit(props, ['prefixCls', 'className', 'children', 'visibilityHeight', 'target', 'visible']);
  return /*#__PURE__*/React.createElement(\\"div\\", _extends({}, divProps, {
    className: classString,
    onClick: scrollToTop,
    ref: ref
  }), renderChildren({
    prefixCls: prefixCls
  }));
};

BackTop.defaultProps = {
  visibilityHeight: 400
};
var index$1 = /*#__PURE__*/React.memo(BackTop);

function UnitNumber(_ref) {
  var prefixCls = _ref.prefixCls,
      value = _ref.value,
      current = _ref.current,
      _ref$offset = _ref.offset,
      offset = _ref$offset === void 0 ? 0 : _ref$offset;
  var style;

  if (offset) {
    style = {
      position: 'absolute',
      top: \\"\\".concat(offset, \\"00%\\"),
      left: 0
    };
  }

  return /*#__PURE__*/React.createElement(\\"p\\", {
    style: style,
    className: classNames(\\"\\".concat(prefixCls, \\"-only-unit\\"), {
      current: current
    })
  }, value);
}

function getOffset(start, end, unit) {
  var index = start;
  var offset = 0;

  while ((index + 10) % 10 !== end) {
    index += unit;
    offset += unit;
  }

  return offset;
}

function SingleNumber(props) {
  var prefixCls = props.prefixCls,
      originCount = props.count,
      originValue = props.value;
  var value = Number(originValue);
  var count = Math.abs(originCount);

  var _React$useState = React.useState(value),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      prevValue = _React$useState2[0],
      setPrevValue = _React$useState2[1];

  var _React$useState3 = React.useState(count),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      prevCount = _React$useState4[0],
      setPrevCount = _React$useState4[1]; // ============================= Events =============================


  var onTransitionEnd = function onTransitionEnd() {
    setPrevValue(value);
    setPrevCount(count);
  }; // Fallback if transition event not support


  React.useEffect(function () {
    var timeout = setTimeout(function () {
      onTransitionEnd();
    }, 1000);
    return function () {
      clearTimeout(timeout);
    };
  }, [value]); // ============================= Render =============================
  // Render unit list

  var unitNodes;
  var offsetStyle;

  if (prevValue === value || Number.isNaN(value) || Number.isNaN(prevValue)) {
    // Nothing to change
    unitNodes = [/*#__PURE__*/React.createElement(UnitNumber, _extends({}, props, {
      key: value,
      current: true
    }))];
    offsetStyle = {
      transition: 'none'
    };
  } else {
    unitNodes = []; // Fill basic number units

    var end = value + 10;
    var unitNumberList = [];

    for (var index = value; index <= end; index += 1) {
      unitNumberList.push(index);
    } // Fill with number unit nodes


    var prevIndex = unitNumberList.findIndex(function (n) {
      return n % 10 === prevValue;
    });
    unitNodes = unitNumberList.map(function (n, index) {
      var singleUnit = n % 10;
      return /*#__PURE__*/React.createElement(UnitNumber, _extends({}, props, {
        key: n,
        value: singleUnit,
        offset: index - prevIndex,
        current: index === prevIndex
      }));
    }); // Calculate container offset value

    var unit = prevCount < count ? 1 : -1;
    offsetStyle = {
      transform: \\"translateY(\\".concat(-getOffset(prevValue, value, unit), \\"00%)\\")
    };
  }

  return /*#__PURE__*/React.createElement(\\"span\\", {
    className: \\"\\".concat(prefixCls, \\"-only\\"),
    style: offsetStyle,
    onTransitionEnd: onTransitionEnd
  }, unitNodes);
}

var __rest$11 = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var ScrollNumber = function ScrollNumber(_a) {
  var customizePrefixCls = _a.prefixCls,
      count = _a.count,
      className = _a.className,
      motionClassName = _a.motionClassName,
      style = _a.style,
      title = _a.title,
      show = _a.show,
      _a$component = _a.component,
      component = _a$component === void 0 ? 'sup' : _a$component,
      children = _a.children,
      restProps = __rest$11(_a, [\\"prefixCls\\", \\"count\\", \\"className\\", \\"motionClassName\\", \\"style\\", \\"title\\", \\"show\\", \\"component\\", \\"children\\"]);

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls;

  var prefixCls = getPrefixCls('scroll-number', customizePrefixCls); // ============================ Render ============================

  var newProps = _extends(_extends({}, restProps), {
    'data-show': show,
    style: style,
    className: classNames(prefixCls, className, motionClassName),
    title: title
  }); // Only integer need motion


  var numberNodes = count;

  if (count && Number(count) % 1 === 0) {
    var numberList = String(count).split('');
    numberNodes = numberList.map(function (num, i) {
      return /*#__PURE__*/React.createElement(SingleNumber, {
        prefixCls: prefixCls,
        count: Number(count),
        value: num // eslint-disable-next-line react/no-array-index-key
        ,
        key: numberList.length - i
      });
    });
  } // allow specify the border
  // mock border-color by box-shadow for compatible with old usage:
  // <Badge count={4} style={{ backgroundColor: '#fff', color: '#999', borderColor: '#d9d9d9' }} />


  if (style && style.borderColor) {
    newProps.style = _extends(_extends({}, style), {
      boxShadow: \\"0 0 0 1px \\".concat(style.borderColor, \\" inset\\")
    });
  }

  if (children) {
    return cloneElement(children, function (oriProps) {
      return {
        className: classNames(\\"\\".concat(prefixCls, \\"-custom-component\\"), oriProps === null || oriProps === void 0 ? void 0 : oriProps.className, motionClassName)
      };
    });
  }

  return /*#__PURE__*/React.createElement(component, newProps, numberNodes);
};

function isPresetColor(color) {
  return PresetColorTypes.indexOf(color) !== -1;
}

var Ribbon = function Ribbon(_ref) {
  var _classNames;

  var className = _ref.className,
      customizePrefixCls = _ref.prefixCls,
      style = _ref.style,
      color = _ref.color,
      children = _ref.children,
      text = _ref.text,
      _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? 'end' : _ref$placement;

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  var prefixCls = getPrefixCls('ribbon', customizePrefixCls);
  var colorInPreset = isPresetColor(color);
  var ribbonCls = classNames(prefixCls, \\"\\".concat(prefixCls, \\"-placement-\\").concat(placement), (_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-color-\\").concat(color), colorInPreset), _classNames), className);
  var colorStyle = {};
  var cornerColorStyle = {};

  if (color && !colorInPreset) {
    colorStyle.background = color;
    cornerColorStyle.color = color;
  }

  return /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-wrapper\\")
  }, children, /*#__PURE__*/React.createElement(\\"div\\", {
    className: ribbonCls,
    style: _extends(_extends({}, colorStyle), style)
  }, /*#__PURE__*/React.createElement(\\"span\\", {
    className: \\"\\".concat(prefixCls, \\"-text\\")
  }, text), /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-corner\\"),
    style: cornerColorStyle
  })));
};

var __rest$10 = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var Badge = function Badge(_a) {
  var _classNames, _classNames2;

  var customizePrefixCls = _a.prefixCls,
      customizeScrollNumberPrefixCls = _a.scrollNumberPrefixCls,
      children = _a.children,
      status = _a.status,
      text = _a.text,
      color = _a.color,
      _a$count = _a.count,
      count = _a$count === void 0 ? null : _a$count,
      _a$overflowCount = _a.overflowCount,
      overflowCount = _a$overflowCount === void 0 ? 99 : _a$overflowCount,
      _a$dot = _a.dot,
      dot = _a$dot === void 0 ? false : _a$dot,
      _a$size = _a.size,
      size = _a$size === void 0 ? 'default' : _a$size,
      title = _a.title,
      offset = _a.offset,
      style = _a.style,
      className = _a.className,
      _a$showZero = _a.showZero,
      showZero = _a$showZero === void 0 ? false : _a$showZero,
      restProps = __rest$10(_a, [\\"prefixCls\\", \\"scrollNumberPrefixCls\\", \\"children\\", \\"status\\", \\"text\\", \\"color\\", \\"count\\", \\"overflowCount\\", \\"dot\\", \\"size\\", \\"title\\", \\"offset\\", \\"style\\", \\"className\\", \\"showZero\\"]);

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  var prefixCls = getPrefixCls('badge', customizePrefixCls); // ================================ Misc ================================

  var numberedDisplayCount = count > overflowCount ? \\"\\".concat(overflowCount, \\"+\\") : count;
  var hasStatus = status !== null && status !== undefined || color !== null && color !== undefined;
  var isZero = numberedDisplayCount === '0' || numberedDisplayCount === 0;
  var showAsDot = dot && !isZero || hasStatus;
  var mergedCount = showAsDot ? '' : numberedDisplayCount;
  var isHidden = useMemo$1(function () {
    var isEmpty = mergedCount === null || mergedCount === undefined || mergedCount === '';
    return (isEmpty || isZero && !showZero) && !showAsDot;
  }, [mergedCount, isZero, showZero, showAsDot]); // Count should be cache in case hidden change it

  var countRef = useRef(count);

  if (!isHidden) {
    countRef.current = count;
  }

  var livingCount = countRef.current; // We need cache count since remove motion should not change count display

  var displayCountRef = useRef(mergedCount);

  if (!isHidden) {
    displayCountRef.current = mergedCount;
  }

  var displayCount = displayCountRef.current; // We will cache the dot status to avoid shaking on leaved motion

  var isDotRef = useRef(showAsDot);

  if (!isHidden) {
    isDotRef.current = showAsDot;
  } // =============================== Styles ===============================


  var mergedStyle = useMemo$1(function () {
    if (!offset) {
      return _extends({}, style);
    }

    var offsetStyle = {
      marginTop: offset[1]
    };

    if (direction === 'rtl') {
      offsetStyle.left = parseInt(offset[0], 10);
    } else {
      offsetStyle.right = -parseInt(offset[0], 10);
    }

    return _extends(_extends({}, offsetStyle), style);
  }, [direction, offset, style]); // =============================== Render ===============================
  // >>> Title

  var titleNode = title !== null && title !== void 0 ? title : typeof livingCount === 'string' || typeof livingCount === 'number' ? livingCount : undefined; // >>> Status Text

  var statusTextNode = isHidden || !text ? null : /*#__PURE__*/React.createElement(\\"span\\", {
    className: \\"\\".concat(prefixCls, \\"-status-text\\")
  }, text); // >>> Display Component

  var displayNode = !livingCount || _typeof(livingCount) !== 'object' ? undefined : cloneElement(livingCount, function (oriProps) {
    return {
      style: _extends(_extends({}, mergedStyle), oriProps.style)
    };
  }); // Shared styles

  var statusCls = classNames((_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-status-dot\\"), hasStatus), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-status-\\").concat(status), !!status), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-status-\\").concat(color), isPresetColor(color)), _classNames));
  var statusStyle = {};

  if (color && !isPresetColor(color)) {
    statusStyle.background = color;
  }

  var badgeClassName = classNames(prefixCls, (_classNames2 = {}, _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-status\\"), hasStatus), _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-not-a-wrapper\\"), !children), _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), _classNames2), className); // <Badge status=\\"success\\" />

  if (!children && hasStatus) {
    var statusTextColor = mergedStyle.color;
    return /*#__PURE__*/React.createElement(\\"span\\", _extends({}, restProps, {
      className: badgeClassName,
      style: mergedStyle
    }), /*#__PURE__*/React.createElement(\\"span\\", {
      className: statusCls,
      style: statusStyle
    }), /*#__PURE__*/React.createElement(\\"span\\", {
      style: {
        color: statusTextColor
      },
      className: \\"\\".concat(prefixCls, \\"-status-text\\")
    }, text));
  } // <Badge status=\\"success\\" count={<Icon type=\\"xxx\\" />}></Badge>


  return /*#__PURE__*/React.createElement(\\"span\\", _extends({}, restProps, {
    className: badgeClassName
  }), children, /*#__PURE__*/React.createElement(CSSMotion, {
    visible: !isHidden,
    motionName: \\"\\".concat(prefixCls, \\"-zoom\\"),
    motionAppear: false
  }, function (_ref) {
    var _classNames3;

    var motionClassName = _ref.className;
    var scrollNumberPrefixCls = getPrefixCls('scroll-number', customizeScrollNumberPrefixCls);
    var isDot = isDotRef.current;
    var scrollNumberCls = classNames((_classNames3 = {}, _defineProperty(_classNames3, \\"\\".concat(prefixCls, \\"-dot\\"), isDot), _defineProperty(_classNames3, \\"\\".concat(prefixCls, \\"-count\\"), !isDot), _defineProperty(_classNames3, \\"\\".concat(prefixCls, \\"-count-sm\\"), size === 'small'), _defineProperty(_classNames3, \\"\\".concat(prefixCls, \\"-multiple-words\\"), !isDot && displayCount && (displayCount === null || displayCount === void 0 ? void 0 : displayCount.toString().length) > 1), _defineProperty(_classNames3, \\"\\".concat(prefixCls, \\"-status-\\").concat(status), !!status), _defineProperty(_classNames3, \\"\\".concat(prefixCls, \\"-status-\\").concat(color), isPresetColor(color)), _classNames3));

    var scrollNumberStyle = _extends({}, mergedStyle);

    if (color && !isPresetColor(color)) {
      scrollNumberStyle = scrollNumberStyle || {};
      scrollNumberStyle.background = color;
    }

    return /*#__PURE__*/React.createElement(ScrollNumber, {
      prefixCls: scrollNumberPrefixCls,
      show: !isHidden,
      motionClassName: motionClassName,
      className: scrollNumberCls,
      count: displayCount,
      title: titleNode,
      style: scrollNumberStyle,
      key: \\"scrollNumber\\"
    }, displayNode);
  }), statusTextNode);
};

Badge.Ribbon = Ribbon;

// This icon file is generated automatically.
var RightOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M765.7 486.8L314.9 134.7A7.97 7.97 0 00302 141v77.3c0 4.9 2.3 9.6 6.1 12.6l360 281.1-360 281.1c-3.9 3-6.1 7.7-6.1 12.6V883c0 6.7 7.7 10.4 12.9 6.3l450.8-352.1a31.96 31.96 0 000-50.4z\\" } }] }, \\"name\\": \\"right\\", \\"theme\\": \\"outlined\\" };

var RightOutlined = function RightOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: RightOutlined$2
  }));
};

RightOutlined.displayName = 'RightOutlined';
var RightOutlined$1 = /*#__PURE__*/React.forwardRef(RightOutlined);

// This icon file is generated automatically.
var EllipsisOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M176 511a56 56 0 10112 0 56 56 0 10-112 0zm280 0a56 56 0 10112 0 56 56 0 10-112 0zm280 0a56 56 0 10112 0 56 56 0 10-112 0z\\" } }] }, \\"name\\": \\"ellipsis\\", \\"theme\\": \\"outlined\\" };

var EllipsisOutlined = function EllipsisOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: EllipsisOutlined$2
  }));
};

EllipsisOutlined.displayName = 'EllipsisOutlined';
var EllipsisOutlined$1 = /*#__PURE__*/React.forwardRef(EllipsisOutlined);

var UnreachableException = function UnreachableException(value) {
  _classCallCheck(this, UnreachableException);

  return new Error(\\"unreachable case: \\".concat(JSON.stringify(value)));
};

var __rest$$ = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var ButtonGroup$1 = function ButtonGroup(props) {
  return /*#__PURE__*/React.createElement(ConfigConsumer, null, function (_ref) {
    var _classNames;

    var getPrefixCls = _ref.getPrefixCls,
        direction = _ref.direction;

    var customizePrefixCls = props.prefixCls,
        size = props.size,
        className = props.className,
        others = __rest$$(props, [\\"prefixCls\\", \\"size\\", \\"className\\"]);

    var prefixCls = getPrefixCls('btn-group', customizePrefixCls); // large => lg
    // small => sm

    var sizeCls = '';

    switch (size) {
      case 'large':
        sizeCls = 'lg';
        break;

      case 'small':
        sizeCls = 'sm';
        break;

      case 'middle':
      case undefined:
        break;

      default:
        // eslint-disable-next-line no-console
        console.warn(new UnreachableException(size));
    }

    var classes = classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-\\").concat(sizeCls), sizeCls), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), _classNames), className);
    return /*#__PURE__*/React.createElement(\\"div\\", _extends({}, others, {
      className: classes
    }));
  });
};

var id = 0;
var ids = {}; // Support call raf with delay specified frame

function wrapperRaf(callback) {
  var delayFrames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  var myId = id++;
  var restFrames = delayFrames;

  function internalCallback() {
    restFrames -= 1;

    if (restFrames <= 0) {
      callback();
      delete ids[myId];
    } else {
      ids[myId] = raf(internalCallback);
    }
  }

  ids[myId] = raf(internalCallback);
  return myId;
}

wrapperRaf.cancel = function cancel(pid) {
  if (pid === undefined) return;
  raf.cancel(ids[pid]);
  delete ids[pid];
};

wrapperRaf.ids = ids; // export this for test usage

var styleForPseudo; // Where el is the DOM element you'd like to test for visibility

function isHidden(element) {
  if (\\"production\\" === 'test') {
    return false;
  }

  return !element || element.offsetParent === null || element.hidden;
}

function isNotGrey(color) {
  // eslint-disable-next-line no-useless-escape
  var match = (color || '').match(/rgba?\\\\((\\\\d*), (\\\\d*), (\\\\d*)(, [\\\\d.]*)?\\\\)/);

  if (match && match[1] && match[2] && match[3]) {
    return !(match[1] === match[2] && match[2] === match[3]);
  }

  return true;
}

var Wave = /*#__PURE__*/function (_React$Component) {
  _inherits(Wave, _React$Component);

  var _super = _createSuper(Wave);

  function Wave() {
    var _this;

    _classCallCheck(this, Wave);

    _this = _super.apply(this, arguments);
    _this.containerRef = /*#__PURE__*/React.createRef();
    _this.animationStart = false;
    _this.destroyed = false;

    _this.onClick = function (node, waveColor) {
      if (!node || isHidden(node) || node.className.indexOf('-leave') >= 0) {
        return;
      }

      var insertExtraNode = _this.props.insertExtraNode;
      _this.extraNode = document.createElement('div');

      var _assertThisInitialize = _assertThisInitialized(_this),
          extraNode = _assertThisInitialize.extraNode;

      var getPrefixCls = _this.context.getPrefixCls;
      extraNode.className = \\"\\".concat(getPrefixCls(''), \\"-click-animating-node\\");

      var attributeName = _this.getAttributeName();

      node.setAttribute(attributeName, 'true'); // Not white or transparent or grey

      styleForPseudo = styleForPseudo || document.createElement('style');

      if (waveColor && waveColor !== '#ffffff' && waveColor !== 'rgb(255, 255, 255)' && isNotGrey(waveColor) && !/rgba\\\\((?:\\\\d*, ){3}0\\\\)/.test(waveColor) && // any transparent rgba color
      waveColor !== 'transparent') {
        // Add nonce if CSP exist
        if (_this.csp && _this.csp.nonce) {
          styleForPseudo.nonce = _this.csp.nonce;
        }

        extraNode.style.borderColor = waveColor;
        styleForPseudo.innerHTML = \\"\\\\n      [\\".concat(getPrefixCls(''), \\"-click-animating-without-extra-node='true']::after, .\\").concat(getPrefixCls(''), \\"-click-animating-node {\\\\n        --antd-wave-shadow-color: \\").concat(waveColor, \\";\\\\n      }\\");

        if (!node.ownerDocument.body.contains(styleForPseudo)) {
          node.ownerDocument.body.appendChild(styleForPseudo);
        }
      }

      if (insertExtraNode) {
        node.appendChild(extraNode);
      }

      ['transition', 'animation'].forEach(function (name) {
        node.addEventListener(\\"\\".concat(name, \\"start\\"), _this.onTransitionStart);
        node.addEventListener(\\"\\".concat(name, \\"end\\"), _this.onTransitionEnd);
      });
    };

    _this.onTransitionStart = function (e) {
      if (_this.destroyed) {
        return;
      }

      var node = _this.containerRef.current;

      if (!e || e.target !== node || _this.animationStart) {
        return;
      }

      _this.resetEffect(node);
    };

    _this.onTransitionEnd = function (e) {
      if (!e || e.animationName !== 'fadeEffect') {
        return;
      }

      _this.resetEffect(e.target);
    };

    _this.bindAnimationEvent = function (node) {
      if (!node || !node.getAttribute || node.getAttribute('disabled') || node.className.indexOf('disabled') >= 0) {
        return;
      }

      var onClick = function onClick(e) {
        // Fix radio button click twice
        if (e.target.tagName === 'INPUT' || isHidden(e.target)) {
          return;
        }

        _this.resetEffect(node); // Get wave color from target


        var waveColor = getComputedStyle(node).getPropertyValue('border-top-color') || // Firefox Compatible
        getComputedStyle(node).getPropertyValue('border-color') || getComputedStyle(node).getPropertyValue('background-color');
        _this.clickWaveTimeoutId = window.setTimeout(function () {
          return _this.onClick(node, waveColor);
        }, 0);
        wrapperRaf.cancel(_this.animationStartId);
        _this.animationStart = true; // Render to trigger transition event cost 3 frames. Let's delay 10 frames to reset this.

        _this.animationStartId = wrapperRaf(function () {
          _this.animationStart = false;
        }, 10);
      };

      node.addEventListener('click', onClick, true);
      return {
        cancel: function cancel() {
          node.removeEventListener('click', onClick, true);
        }
      };
    };

    _this.renderWave = function (_ref) {
      var csp = _ref.csp;
      var children = _this.props.children;
      _this.csp = csp;
      if (! /*#__PURE__*/React.isValidElement(children)) return children;
      var ref = _this.containerRef;

      if (supportRef(children)) {
        ref = composeRef(children.ref, _this.containerRef);
      }

      return cloneElement(children, {
        ref: ref
      });
    };

    return _this;
  }

  _createClass(Wave, [{
    key: \\"componentDidMount\\",
    value: function componentDidMount() {
      var node = this.containerRef.current;

      if (!node || node.nodeType !== 1) {
        return;
      }

      this.instance = this.bindAnimationEvent(node);
    }
  }, {
    key: \\"componentWillUnmount\\",
    value: function componentWillUnmount() {
      if (this.instance) {
        this.instance.cancel();
      }

      if (this.clickWaveTimeoutId) {
        clearTimeout(this.clickWaveTimeoutId);
      }

      this.destroyed = true;
    }
  }, {
    key: \\"getAttributeName\\",
    value: function getAttributeName() {
      var getPrefixCls = this.context.getPrefixCls;
      var insertExtraNode = this.props.insertExtraNode;
      return insertExtraNode ? \\"\\".concat(getPrefixCls(''), \\"-click-animating\\") : \\"\\".concat(getPrefixCls(''), \\"-click-animating-without-extra-node\\");
    }
  }, {
    key: \\"resetEffect\\",
    value: function resetEffect(node) {
      var _this2 = this;

      if (!node || node === this.extraNode || !(node instanceof Element)) {
        return;
      }

      var insertExtraNode = this.props.insertExtraNode;
      var attributeName = this.getAttributeName();
      node.setAttribute(attributeName, 'false'); // edge has bug on \`removeAttribute\` #14466

      if (styleForPseudo) {
        styleForPseudo.innerHTML = '';
      }

      if (insertExtraNode && this.extraNode && node.contains(this.extraNode)) {
        node.removeChild(this.extraNode);
      }

      ['transition', 'animation'].forEach(function (name) {
        node.removeEventListener(\\"\\".concat(name, \\"start\\"), _this2.onTransitionStart);
        node.removeEventListener(\\"\\".concat(name, \\"end\\"), _this2.onTransitionEnd);
      });
    }
  }, {
    key: \\"render\\",
    value: function render() {
      return /*#__PURE__*/React.createElement(ConfigConsumer, null, this.renderWave);
    }
  }]);

  return Wave;
}(React.Component);
Wave.contextType = ConfigContext;

var getCollapsedWidth = function getCollapsedWidth() {
  return {
    width: 0,
    opacity: 0,
    transform: 'scale(0)'
  };
};

var getRealWidth = function getRealWidth(node) {
  return {
    width: node.scrollWidth,
    opacity: 1,
    transform: 'scale(1)'
  };
};

var LoadingIcon = function LoadingIcon(_ref) {
  var prefixCls = _ref.prefixCls,
      loading = _ref.loading,
      existIcon = _ref.existIcon;
  var visible = !!loading;

  if (existIcon) {
    return /*#__PURE__*/React__default.createElement(\\"span\\", {
      className: \\"\\".concat(prefixCls, \\"-loading-icon\\")
    }, /*#__PURE__*/React__default.createElement(LoadingOutlined$1, null));
  }

  return /*#__PURE__*/React__default.createElement(CSSMotion, {
    visible: visible // We do not really use this motionName
    ,
    motionName: \\"\\".concat(prefixCls, \\"-loading-icon-motion\\"),
    removeOnLeave: true,
    onAppearStart: getCollapsedWidth,
    onAppearActive: getRealWidth,
    onEnterStart: getCollapsedWidth,
    onEnterActive: getRealWidth,
    onLeaveStart: getRealWidth,
    onLeaveActive: getCollapsedWidth
  }, function (_ref2, ref) {
    var className = _ref2.className,
        style = _ref2.style;
    return /*#__PURE__*/React__default.createElement(\\"span\\", {
      className: \\"\\".concat(prefixCls, \\"-loading-icon\\"),
      style: style,
      ref: ref
    }, /*#__PURE__*/React__default.createElement(LoadingOutlined$1, {
      className: className
    }));
  });
};

var __rest$_ = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var rxTwoCNChar = /^[\\\\u4e00-\\\\u9fa5]{2}$/;
var isTwoCNChar = rxTwoCNChar.test.bind(rxTwoCNChar);

function isString(str) {
  return typeof str === 'string';
}

function isUnborderedButtonType(type) {
  return type === 'text' || type === 'link';
} // Insert one space between two chinese characters automatically.


function insertSpace(child, needInserted) {
  // Check the child if is undefined or null.
  if (child == null) {
    return;
  }

  var SPACE = needInserted ? ' ' : ''; // strictNullChecks oops.

  if (typeof child !== 'string' && typeof child !== 'number' && isString(child.type) && isTwoCNChar(child.props.children)) {
    return cloneElement(child, {
      children: child.props.children.split('').join(SPACE)
    });
  }

  if (typeof child === 'string') {
    if (isTwoCNChar(child)) {
      child = child.split('').join(SPACE);
    }

    return /*#__PURE__*/React.createElement(\\"span\\", null, child);
  }

  return child;
}

function spaceChildren(children, needInserted) {
  var isPrevChildPure = false;
  var childList = [];
  React.Children.forEach(children, function (child) {
    var type = _typeof(child);

    var isCurrentChildPure = type === 'string' || type === 'number';

    if (isPrevChildPure && isCurrentChildPure) {
      var lastIndex = childList.length - 1;
      var lastChild = childList[lastIndex];
      childList[lastIndex] = \\"\\".concat(lastChild).concat(child);
    } else {
      childList.push(child);
    }

    isPrevChildPure = isCurrentChildPure;
  }); // Pass to React.Children.map to auto fill key

  return React.Children.map(childList, function (child) {
    return insertSpace(child, needInserted);
  });
}

var ButtonTypes = tuple('default', 'primary', 'ghost', 'dashed', 'link', 'text');
var ButtonShapes = tuple('circle', 'round');
var ButtonHTMLTypes = tuple('submit', 'button', 'reset');
function convertLegacyProps(type) {
  if (type === 'danger') {
    return {
      danger: true
    };
  }

  return {
    type: type
  };
}

var InternalButton = function InternalButton(props, ref) {
  var _classNames;

  var _props$loading = props.loading,
      loading = _props$loading === void 0 ? false : _props$loading,
      customizePrefixCls = props.prefixCls,
      type = props.type,
      danger = props.danger,
      shape = props.shape,
      customizeSize = props.size,
      className = props.className,
      children = props.children,
      icon = props.icon,
      _props$ghost = props.ghost,
      ghost = _props$ghost === void 0 ? false : _props$ghost,
      _props$block = props.block,
      block = _props$block === void 0 ? false : _props$block,
      _props$htmlType = props.htmlType,
      htmlType = _props$htmlType === void 0 ? 'button' : _props$htmlType,
      rest = __rest$_(props, [\\"loading\\", \\"prefixCls\\", \\"type\\", \\"danger\\", \\"shape\\", \\"size\\", \\"className\\", \\"children\\", \\"icon\\", \\"ghost\\", \\"block\\", \\"htmlType\\"]);

  var size = React.useContext(SizeContext$1);

  var _React$useState = React.useState(!!loading),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      innerLoading = _React$useState2[0],
      setLoading = _React$useState2[1];

  var _React$useState3 = React.useState(false),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      hasTwoCNChar = _React$useState4[0],
      setHasTwoCNChar = _React$useState4[1];

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      autoInsertSpaceInButton = _React$useContext.autoInsertSpaceInButton,
      direction = _React$useContext.direction;

  var buttonRef = ref || /*#__PURE__*/React.createRef();
  var delayTimeoutRef = React.useRef();

  var isNeedInserted = function isNeedInserted() {
    return React.Children.count(children) === 1 && !icon && !isUnborderedButtonType(type);
  };

  var fixTwoCNChar = function fixTwoCNChar() {
    // Fix for HOC usage like <FormatMessage />
    if (!buttonRef || !buttonRef.current || autoInsertSpaceInButton === false) {
      return;
    }

    var buttonText = buttonRef.current.textContent;

    if (isNeedInserted() && isTwoCNChar(buttonText)) {
      if (!hasTwoCNChar) {
        setHasTwoCNChar(true);
      }
    } else if (hasTwoCNChar) {
      setHasTwoCNChar(false);
    }
  }; // =============== Update Loading ===============


  var loadingOrDelay;

  if (_typeof(loading) === 'object' && loading.delay) {
    loadingOrDelay = loading.delay || true;
  } else {
    loadingOrDelay = !!loading;
  }

  React.useEffect(function () {
    clearTimeout(delayTimeoutRef.current);

    if (typeof loadingOrDelay === 'number') {
      delayTimeoutRef.current = window.setTimeout(function () {
        setLoading(loadingOrDelay);
      }, loadingOrDelay);
    } else {
      setLoading(loadingOrDelay);
    }
  }, [loadingOrDelay]);
  React.useEffect(fixTwoCNChar, [buttonRef]);

  var handleClick = function handleClick(e) {
    var onClick = props.onClick;

    if (innerLoading) {
      return;
    }

    if (onClick) {
      onClick(e);
    }
  };

  devWarning(!(typeof icon === 'string' && icon.length > 2), 'Button', \\"\`icon\` is using ReactNode instead of string naming in v4. Please check \`\\".concat(icon, \\"\` at https://ant.design/components/icon\\"));
  devWarning(!(ghost && isUnborderedButtonType(type)), 'Button', \\"\`link\` or \`text\` button can't be a \`ghost\` button.\\");
  var prefixCls = getPrefixCls('btn', customizePrefixCls);
  var autoInsertSpace = autoInsertSpaceInButton !== false; // large => lg
  // small => sm

  var sizeCls = '';

  switch (customizeSize || size) {
    case 'large':
      sizeCls = 'lg';
      break;

    case 'small':
      sizeCls = 'sm';
      break;

    default:
      break;
  }

  var iconType = innerLoading ? 'loading' : icon;
  var classes = classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-\\").concat(type), type), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-\\").concat(shape), shape), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-\\").concat(sizeCls), sizeCls), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-icon-only\\"), !children && children !== 0 && iconType), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-background-ghost\\"), ghost && !isUnborderedButtonType(type)), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-loading\\"), innerLoading), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-two-chinese-chars\\"), hasTwoCNChar && autoInsertSpace), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-block\\"), block), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-dangerous\\"), !!danger), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), _classNames), className);
  var iconNode = icon && !innerLoading ? icon : /*#__PURE__*/React.createElement(LoadingIcon, {
    existIcon: !!icon,
    prefixCls: prefixCls,
    loading: !!innerLoading
  });
  var kids = children || children === 0 ? spaceChildren(children, isNeedInserted() && autoInsertSpace) : null;
  var linkButtonRestProps = omit(rest, ['navigate']);

  if (linkButtonRestProps.href !== undefined) {
    return /*#__PURE__*/React.createElement(\\"a\\", _extends({}, linkButtonRestProps, {
      className: classes,
      onClick: handleClick,
      ref: buttonRef
    }), iconNode, kids);
  }

  var buttonNode = /*#__PURE__*/React.createElement(\\"button\\", _extends({}, rest, {
    type: htmlType,
    className: classes,
    onClick: handleClick,
    ref: buttonRef
  }), iconNode, kids);

  if (isUnborderedButtonType(type)) {
    return buttonNode;
  }

  return /*#__PURE__*/React.createElement(Wave, null, buttonNode);
};

var Button$1 = /*#__PURE__*/React.forwardRef(InternalButton);
Button$1.displayName = 'Button';
Button$1.Group = ButtonGroup$1;
Button$1.__ANT_BUTTON = true;

var __rest$Z = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var ButtonGroup = Button$1.Group;

var DropdownButton = function DropdownButton(props) {
  var _React$useContext = React.useContext(ConfigContext),
      getContextPopupContainer = _React$useContext.getPopupContainer,
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  var customizePrefixCls = props.prefixCls,
      type = props.type,
      disabled = props.disabled,
      onClick = props.onClick,
      htmlType = props.htmlType,
      children = props.children,
      className = props.className,
      overlay = props.overlay,
      trigger = props.trigger,
      align = props.align,
      visible = props.visible,
      onVisibleChange = props.onVisibleChange,
      placement = props.placement,
      getPopupContainer = props.getPopupContainer,
      href = props.href,
      _props$icon = props.icon,
      icon = _props$icon === void 0 ? /*#__PURE__*/React.createElement(EllipsisOutlined$1, null) : _props$icon,
      title = props.title,
      buttonsRender = props.buttonsRender,
      restProps = __rest$Z(props, [\\"prefixCls\\", \\"type\\", \\"disabled\\", \\"onClick\\", \\"htmlType\\", \\"children\\", \\"className\\", \\"overlay\\", \\"trigger\\", \\"align\\", \\"visible\\", \\"onVisibleChange\\", \\"placement\\", \\"getPopupContainer\\", \\"href\\", \\"icon\\", \\"title\\", \\"buttonsRender\\"]);

  var prefixCls = getPrefixCls('dropdown-button', customizePrefixCls);
  var dropdownProps = {
    align: align,
    overlay: overlay,
    disabled: disabled,
    trigger: disabled ? [] : trigger,
    onVisibleChange: onVisibleChange,
    getPopupContainer: getPopupContainer || getContextPopupContainer
  };

  if ('visible' in props) {
    dropdownProps.visible = visible;
  }

  if ('placement' in props) {
    dropdownProps.placement = placement;
  } else {
    dropdownProps.placement = direction === 'rtl' ? 'bottomLeft' : 'bottomRight';
  }

  var leftButton = /*#__PURE__*/React.createElement(Button$1, {
    type: type,
    disabled: disabled,
    onClick: onClick,
    htmlType: htmlType,
    href: href,
    title: title
  }, children);
  var rightButton = /*#__PURE__*/React.createElement(Button$1, {
    type: type,
    icon: icon
  });

  var _buttonsRender = buttonsRender([leftButton, rightButton]),
      _buttonsRender2 = _slicedToArray(_buttonsRender, 2),
      leftButtonToRender = _buttonsRender2[0],
      rightButtonToRender = _buttonsRender2[1];

  return /*#__PURE__*/React.createElement(ButtonGroup, _extends({}, restProps, {
    className: classNames(prefixCls, className)
  }), leftButtonToRender, /*#__PURE__*/React.createElement(Dropdown, dropdownProps, rightButtonToRender));
};

DropdownButton.__ANT_BUTTON = true;
DropdownButton.defaultProps = {
  type: 'default',
  buttonsRender: function buttonsRender(buttons) {
    return buttons;
  }
};

var Placements = tuple('topLeft', 'topCenter', 'topRight', 'bottomLeft', 'bottomCenter', 'bottomRight');

var Dropdown = function Dropdown(props) {
  var _React$useContext = React.useContext(ConfigContext),
      getContextPopupContainer = _React$useContext.getPopupContainer,
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  var getTransitionName = function getTransitionName() {
    var _props$placement = props.placement,
        placement = _props$placement === void 0 ? '' : _props$placement,
        transitionName = props.transitionName;

    if (transitionName !== undefined) {
      return transitionName;
    }

    if (placement.indexOf('top') >= 0) {
      return 'slide-down';
    }

    return 'slide-up';
  };

  var renderOverlay = function renderOverlay(prefixCls) {
    // rc-dropdown already can process the function of overlay, but we have check logic here.
    // So we need render the element to check and pass back to rc-dropdown.
    var overlay = props.overlay;
    var overlayNode;

    if (typeof overlay === 'function') {
      overlayNode = overlay();
    } else {
      overlayNode = overlay;
    }

    overlayNode = React.Children.only(typeof overlayNode === 'string' ? /*#__PURE__*/React.createElement(\\"span\\", null, overlayNode) : overlayNode);
    var overlayProps = overlayNode.props; // Warning if use other mode

    devWarning(!overlayProps.mode || overlayProps.mode === 'vertical', 'Dropdown', \\"mode=\\\\\\"\\".concat(overlayProps.mode, \\"\\\\\\" is not supported for Dropdown's Menu.\\")); // menu cannot be selectable in dropdown defaultly
    // menu should be focusable in dropdown defaultly

    var _overlayProps$selecta = overlayProps.selectable,
        selectable = _overlayProps$selecta === void 0 ? false : _overlayProps$selecta,
        _overlayProps$focusab = overlayProps.focusable,
        focusable = _overlayProps$focusab === void 0 ? true : _overlayProps$focusab;
    var expandIcon = /*#__PURE__*/React.createElement(\\"span\\", {
      className: \\"\\".concat(prefixCls, \\"-menu-submenu-arrow\\")
    }, /*#__PURE__*/React.createElement(RightOutlined$1, {
      className: \\"\\".concat(prefixCls, \\"-menu-submenu-arrow-icon\\")
    }));
    var fixedModeOverlay = typeof overlayNode.type === 'string' ? overlayNode : cloneElement(overlayNode, {
      mode: 'vertical',
      selectable: selectable,
      focusable: focusable,
      expandIcon: expandIcon
    });
    return fixedModeOverlay;
  };

  var getPlacement = function getPlacement() {
    var placement = props.placement;

    if (placement !== undefined) {
      return placement;
    }

    return direction === 'rtl' ? 'bottomRight' : 'bottomLeft';
  };

  var arrow = props.arrow,
      customizePrefixCls = props.prefixCls,
      children = props.children,
      trigger = props.trigger,
      disabled = props.disabled,
      getPopupContainer = props.getPopupContainer,
      overlayClassName = props.overlayClassName;
  var prefixCls = getPrefixCls('dropdown', customizePrefixCls);
  var child = React.Children.only(children);
  var dropdownTrigger = cloneElement(child, {
    className: classNames(\\"\\".concat(prefixCls, \\"-trigger\\"), _defineProperty({}, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), child.props.className),
    disabled: disabled
  });
  var overlayClassNameCustomized = classNames(overlayClassName, _defineProperty({}, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'));
  var triggerActions = disabled ? [] : trigger;
  var alignPoint;

  if (triggerActions && triggerActions.indexOf('contextMenu') !== -1) {
    alignPoint = true;
  }

  return /*#__PURE__*/React.createElement(RcDropdown, _extends({
    arrow: arrow,
    alignPoint: alignPoint
  }, props, {
    overlayClassName: overlayClassNameCustomized,
    prefixCls: prefixCls,
    getPopupContainer: getPopupContainer || getContextPopupContainer,
    transitionName: getTransitionName(),
    trigger: triggerActions,
    overlay: function overlay() {
      return renderOverlay(prefixCls);
    },
    placement: getPlacement()
  }), dropdownTrigger);
};

Dropdown.Button = DropdownButton;
Dropdown.defaultProps = {
  mouseEnterDelay: 0.15,
  mouseLeaveDelay: 0.1
};

var __rest$Y = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var BreadcrumbItem = function BreadcrumbItem(_a) {
  var customizePrefixCls = _a.prefixCls,
      _a$separator = _a.separator,
      separator = _a$separator === void 0 ? '/' : _a$separator,
      children = _a.children,
      overlay = _a.overlay,
      dropdownProps = _a.dropdownProps,
      restProps = __rest$Y(_a, [\\"prefixCls\\", \\"separator\\", \\"children\\", \\"overlay\\", \\"dropdownProps\\"]);

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls;

  var prefixCls = getPrefixCls('breadcrumb', customizePrefixCls);
  /** If overlay is have Wrap a DropDown */

  var renderBreadcrumbNode = function renderBreadcrumbNode(breadcrumbItem) {
    if (overlay) {
      return /*#__PURE__*/React.createElement(Dropdown, _extends({
        overlay: overlay,
        placement: \\"bottomCenter\\"
      }, dropdownProps), /*#__PURE__*/React.createElement(\\"span\\", {
        className: \\"\\".concat(prefixCls, \\"-overlay-link\\")
      }, breadcrumbItem, /*#__PURE__*/React.createElement(DownOutlined$1, null)));
    }

    return breadcrumbItem;
  };

  var link;

  if ('href' in restProps) {
    link = /*#__PURE__*/React.createElement(\\"a\\", _extends({
      className: \\"\\".concat(prefixCls, \\"-link\\")
    }, restProps), children);
  } else {
    link = /*#__PURE__*/React.createElement(\\"span\\", _extends({
      className: \\"\\".concat(prefixCls, \\"-link\\")
    }, restProps), children);
  } // wrap to dropDown


  link = renderBreadcrumbNode(link);

  if (children) {
    return /*#__PURE__*/React.createElement(\\"span\\", null, link, separator && separator !== '' && /*#__PURE__*/React.createElement(\\"span\\", {
      className: \\"\\".concat(prefixCls, \\"-separator\\")
    }, separator));
  }

  return null;
};

BreadcrumbItem.__ANT_BREADCRUMB_ITEM = true;

var BreadcrumbSeparator = function BreadcrumbSeparator(_ref) {
  var children = _ref.children;

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls;

  var prefixCls = getPrefixCls('breadcrumb');
  return /*#__PURE__*/React.createElement(\\"span\\", {
    className: \\"\\".concat(prefixCls, \\"-separator\\")
  }, children || '/');
};

BreadcrumbSeparator.__ANT_BREADCRUMB_SEPARATOR = true;

var MenuContext = /*#__PURE__*/createContext({
  inlineCollapsed: false
});

var SubMenu$1 = /*#__PURE__*/function (_React$Component) {
  _inherits(SubMenu, _React$Component);

  var _super = _createSuper(SubMenu);

  function SubMenu() {
    _classCallCheck(this, SubMenu);

    return _super.apply(this, arguments);
  }

  _createClass(SubMenu, [{
    key: \\"renderTitle\\",
    value: function renderTitle(inlineCollapsed) {
      var _this$props = this.props,
          icon = _this$props.icon,
          title = _this$props.title,
          level = _this$props.level,
          rootPrefixCls = _this$props.rootPrefixCls;

      if (!icon) {
        return inlineCollapsed && level === 1 && title && typeof title === 'string' ? /*#__PURE__*/React.createElement(\\"div\\", {
          className: \\"\\".concat(rootPrefixCls, \\"-inline-collapsed-noicon\\")
        }, title.charAt(0)) : title;
      } // inline-collapsed.md demo 依赖 span 来隐藏文字,有 icon 属性，则内部包裹一个 span
      // ref: https://github.com/ant-design/ant-design/pull/23456


      var titleIsSpan = isValidElement(title) && title.type === 'span';
      return /*#__PURE__*/React.createElement(React.Fragment, null, icon, titleIsSpan ? title : /*#__PURE__*/React.createElement(\\"span\\", null, title));
    }
  }, {
    key: \\"render\\",
    value: function render() {
      var _this = this;

      var _this$props2 = this.props,
          rootPrefixCls = _this$props2.rootPrefixCls,
          popupClassName = _this$props2.popupClassName;
      return /*#__PURE__*/React.createElement(MenuContext.Consumer, null, function (_ref) {
        var inlineCollapsed = _ref.inlineCollapsed,
            antdMenuTheme = _ref.antdMenuTheme;
        return /*#__PURE__*/React.createElement(SubMenu$2, _extends({}, omit(_this.props, ['icon']), {
          title: _this.renderTitle(inlineCollapsed),
          popupClassName: classNames(rootPrefixCls, \\"\\".concat(rootPrefixCls, \\"-\\").concat(antdMenuTheme), popupClassName)
        }));
      });
    }
  }]);

  return SubMenu;
}(React.Component);

SubMenu$1.contextType = MenuContext; // fix issue:https://github.com/ant-design/ant-design/issues/8666

SubMenu$1.isSubMenu = 1;

// This icon file is generated automatically.
var BarsOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"0 0 1024 1024\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M912 192H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 284H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 284H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM104 228a56 56 0 10112 0 56 56 0 10-112 0zm0 284a56 56 0 10112 0 56 56 0 10-112 0zm0 284a56 56 0 10112 0 56 56 0 10-112 0z\\" } }] }, \\"name\\": \\"bars\\", \\"theme\\": \\"outlined\\" };

var BarsOutlined = function BarsOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: BarsOutlined$2
  }));
};

BarsOutlined.displayName = 'BarsOutlined';
var BarsOutlined$1 = /*#__PURE__*/React.forwardRef(BarsOutlined);

// This icon file is generated automatically.
var LeftOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M724 218.3V141c0-6.7-7.7-10.4-12.9-6.3L260.3 486.8a31.86 31.86 0 000 50.3l450.8 352.1c5.3 4.1 12.9.4 12.9-6.3v-77.3c0-4.9-2.3-9.6-6.1-12.6l-360-281 360-281.1c3.8-3 6.1-7.7 6.1-12.6z\\" } }] }, \\"name\\": \\"left\\", \\"theme\\": \\"outlined\\" };

var LeftOutlined = function LeftOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: LeftOutlined$2
  }));
};

LeftOutlined.displayName = 'LeftOutlined';
var LeftOutlined$1 = /*#__PURE__*/React.forwardRef(LeftOutlined);

var __rest$X = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var LayoutContext = /*#__PURE__*/React.createContext({
  siderHook: {
    addSider: function addSider() {
      return null;
    },
    removeSider: function removeSider() {
      return null;
    }
  }
});

function generator(_ref) {
  var suffixCls = _ref.suffixCls,
      tagName = _ref.tagName,
      displayName = _ref.displayName;
  return function (BasicComponent) {
    var Adapter = function Adapter(props) {
      var _React$useContext = React.useContext(ConfigContext),
          getPrefixCls = _React$useContext.getPrefixCls;

      var customizePrefixCls = props.prefixCls;
      var prefixCls = getPrefixCls(suffixCls, customizePrefixCls);
      return /*#__PURE__*/React.createElement(BasicComponent, _extends({
        prefixCls: prefixCls,
        tagName: tagName
      }, props));
    };

    Adapter.displayName = displayName;
    return Adapter;
  };
}

var Basic = function Basic(props) {
  var prefixCls = props.prefixCls,
      className = props.className,
      children = props.children,
      tagName = props.tagName,
      others = __rest$X(props, [\\"prefixCls\\", \\"className\\", \\"children\\", \\"tagName\\"]);

  var classString = classNames(prefixCls, className);
  return /*#__PURE__*/React.createElement(tagName, _extends({
    className: classString
  }, others), children);
};

var BasicLayout = function BasicLayout(props) {
  var _classNames;

  var _React$useContext2 = React.useContext(ConfigContext),
      direction = _React$useContext2.direction;

  var _React$useState = React.useState([]),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      siders = _React$useState2[0],
      setSiders = _React$useState2[1];

  var prefixCls = props.prefixCls,
      className = props.className,
      children = props.children,
      hasSider = props.hasSider,
      Tag = props.tagName,
      others = __rest$X(props, [\\"prefixCls\\", \\"className\\", \\"children\\", \\"hasSider\\", \\"tagName\\"]);

  var classString = classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-has-sider\\"), typeof hasSider === 'boolean' ? hasSider : siders.length > 0), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), _classNames), className);
  return /*#__PURE__*/React.createElement(LayoutContext.Provider, {
    value: {
      siderHook: {
        addSider: function addSider(id) {
          setSiders(function (prev) {
            return [].concat(_toConsumableArray(prev), [id]);
          });
        },
        removeSider: function removeSider(id) {
          setSiders(function (prev) {
            return prev.filter(function (currentId) {
              return currentId !== id;
            });
          });
        }
      }
    }
  }, /*#__PURE__*/React.createElement(Tag, _extends({
    className: classString
  }, others), children));
};

var Layout$1 = generator({
  suffixCls: 'layout',
  tagName: 'section',
  displayName: 'Layout'
})(BasicLayout);
var Header = generator({
  suffixCls: 'layout-header',
  tagName: 'header',
  displayName: 'Header'
})(Basic);
var Footer = generator({
  suffixCls: 'layout-footer',
  tagName: 'footer',
  displayName: 'Footer'
})(Basic);
var Content = generator({
  suffixCls: 'layout-content',
  tagName: 'main',
  displayName: 'Content'
})(Basic);

var isNumeric = function isNumeric(value) {
  return !isNaN(parseFloat(value)) && isFinite(value);
};

var __rest$W = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var dimensionMaxMap = {
  xs: '479.98px',
  sm: '575.98px',
  md: '767.98px',
  lg: '991.98px',
  xl: '1199.98px',
  xxl: '1599.98px'
};
var SiderContext = /*#__PURE__*/React.createContext({});

var generateId = function () {
  var i = 0;
  return function () {
    var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    i += 1;
    return \\"\\".concat(prefix).concat(i);
  };
}();

var Sider = function Sider(_a) {
  var customizePrefixCls = _a.prefixCls,
      className = _a.className,
      trigger = _a.trigger,
      children = _a.children,
      _a$defaultCollapsed = _a.defaultCollapsed,
      defaultCollapsed = _a$defaultCollapsed === void 0 ? false : _a$defaultCollapsed,
      _a$theme = _a.theme,
      theme = _a$theme === void 0 ? 'dark' : _a$theme,
      _a$style = _a.style,
      style = _a$style === void 0 ? {} : _a$style,
      _a$collapsible = _a.collapsible,
      collapsible = _a$collapsible === void 0 ? false : _a$collapsible,
      _a$reverseArrow = _a.reverseArrow,
      reverseArrow = _a$reverseArrow === void 0 ? false : _a$reverseArrow,
      _a$width = _a.width,
      width = _a$width === void 0 ? 200 : _a$width,
      _a$collapsedWidth = _a.collapsedWidth,
      collapsedWidth = _a$collapsedWidth === void 0 ? 80 : _a$collapsedWidth,
      zeroWidthTriggerStyle = _a.zeroWidthTriggerStyle,
      breakpoint = _a.breakpoint,
      onCollapse = _a.onCollapse,
      onBreakpoint = _a.onBreakpoint,
      props = __rest$W(_a, [\\"prefixCls\\", \\"className\\", \\"trigger\\", \\"children\\", \\"defaultCollapsed\\", \\"theme\\", \\"style\\", \\"collapsible\\", \\"reverseArrow\\", \\"width\\", \\"collapsedWidth\\", \\"zeroWidthTriggerStyle\\", \\"breakpoint\\", \\"onCollapse\\", \\"onBreakpoint\\"]);

  var _useContext = useContext(LayoutContext),
      siderHook = _useContext.siderHook;

  var _useState = useState('collapsed' in props ? props.collapsed : defaultCollapsed),
      _useState2 = _slicedToArray(_useState, 2),
      collapsed = _useState2[0],
      setCollapsed = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      below = _useState4[0],
      setBelow = _useState4[1];

  useEffect(function () {
    if ('collapsed' in props) {
      setCollapsed(props.collapsed);
    }
  }, [props.collapsed]);

  var handleSetCollapsed = function handleSetCollapsed(value, type) {
    if (!('collapsed' in props)) {
      setCollapsed(value);
    }

    if (onCollapse) {
      onCollapse(value, type);
    }
  }; // ========================= Responsive =========================


  var responsiveHandlerRef = useRef();

  responsiveHandlerRef.current = function (mql) {
    setBelow(mql.matches);

    if (onBreakpoint) {
      onBreakpoint(mql.matches);
    }

    if (collapsed !== mql.matches) {
      handleSetCollapsed(mql.matches, 'responsive');
    }
  };

  useEffect(function () {
    function responsiveHandler(mql) {
      return responsiveHandlerRef.current(mql);
    }

    var mql;

    if (typeof window !== 'undefined') {
      var _window = window,
          matchMedia = _window.matchMedia;

      if (matchMedia && breakpoint && breakpoint in dimensionMaxMap) {
        mql = matchMedia(\\"(max-width: \\".concat(dimensionMaxMap[breakpoint], \\")\\"));

        try {
          mql.addEventListener('change', responsiveHandler);
        } catch (error) {
          mql.addListener(responsiveHandler);
        }

        responsiveHandler(mql);
      }
    }

    return function () {
      try {
        mql === null || mql === void 0 ? void 0 : mql.removeEventListener('change', responsiveHandler);
      } catch (error) {
        mql === null || mql === void 0 ? void 0 : mql.removeListener(responsiveHandler);
      }
    };
  }, []);
  useEffect(function () {
    var uniqueId = generateId('ant-sider-');
    siderHook.addSider(uniqueId);
    return function () {
      return siderHook.removeSider(uniqueId);
    };
  }, []);

  var toggle = function toggle() {
    handleSetCollapsed(!collapsed, 'clickTrigger');
  };

  var _useContext2 = useContext(ConfigContext),
      getPrefixCls = _useContext2.getPrefixCls;

  var renderSider = function renderSider() {
    var _classNames;

    var prefixCls = getPrefixCls('layout-sider', customizePrefixCls);
    var divProps = omit(props, ['collapsed']);
    var rawWidth = collapsed ? collapsedWidth : width; // use \\"px\\" as fallback unit for width

    var siderWidth = isNumeric(rawWidth) ? \\"\\".concat(rawWidth, \\"px\\") : String(rawWidth); // special trigger when collapsedWidth == 0

    var zeroWidthTrigger = parseFloat(String(collapsedWidth || 0)) === 0 ? /*#__PURE__*/React.createElement(\\"span\\", {
      onClick: toggle,
      className: classNames(\\"\\".concat(prefixCls, \\"-zero-width-trigger\\"), \\"\\".concat(prefixCls, \\"-zero-width-trigger-\\").concat(reverseArrow ? 'right' : 'left')),
      style: zeroWidthTriggerStyle
    }, trigger || /*#__PURE__*/React.createElement(BarsOutlined$1, null)) : null;
    var iconObj = {
      expanded: reverseArrow ? /*#__PURE__*/React.createElement(RightOutlined$1, null) : /*#__PURE__*/React.createElement(LeftOutlined$1, null),
      collapsed: reverseArrow ? /*#__PURE__*/React.createElement(LeftOutlined$1, null) : /*#__PURE__*/React.createElement(RightOutlined$1, null)
    };
    var status = collapsed ? 'collapsed' : 'expanded';
    var defaultTrigger = iconObj[status];
    var triggerDom = trigger !== null ? zeroWidthTrigger || /*#__PURE__*/React.createElement(\\"div\\", {
      className: \\"\\".concat(prefixCls, \\"-trigger\\"),
      onClick: toggle,
      style: {
        width: siderWidth
      }
    }, trigger || defaultTrigger) : null;

    var divStyle = _extends(_extends({}, style), {
      flex: \\"0 0 \\".concat(siderWidth),
      maxWidth: siderWidth,
      minWidth: siderWidth,
      width: siderWidth
    });

    var siderCls = classNames(prefixCls, \\"\\".concat(prefixCls, \\"-\\").concat(theme), (_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-collapsed\\"), !!collapsed), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-has-trigger\\"), collapsible && trigger !== null && !zeroWidthTrigger), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-below\\"), !!below), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-zero-width\\"), parseFloat(siderWidth) === 0), _classNames), className);
    return /*#__PURE__*/React.createElement(\\"aside\\", _extends({
      className: siderCls
    }, divProps, {
      style: divStyle
    }), /*#__PURE__*/React.createElement(\\"div\\", {
      className: \\"\\".concat(prefixCls, \\"-children\\")
    }, children), collapsible || below && zeroWidthTrigger ? triggerDom : null);
  };

  return /*#__PURE__*/React.createElement(SiderContext.Provider, {
    value: {
      siderCollapsed: collapsed,
      collapsedWidth: collapsedWidth
    }
  }, renderSider());
};

var __rest$V = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var MenuItem$1 = /*#__PURE__*/function (_React$Component) {
  _inherits(MenuItem, _React$Component);

  var _super = _createSuper(MenuItem);

  function MenuItem() {
    var _this;

    _classCallCheck(this, MenuItem);

    _this = _super.apply(this, arguments);

    _this.renderItem = function (_ref) {
      var siderCollapsed = _ref.siderCollapsed;
      var _this$props = _this.props,
          level = _this$props.level,
          className = _this$props.className,
          children = _this$props.children,
          rootPrefixCls = _this$props.rootPrefixCls;

      var _a = _this.props,
          title = _a.title,
          icon = _a.icon,
          danger = _a.danger,
          rest = __rest$V(_a, [\\"title\\", \\"icon\\", \\"danger\\"]);

      return /*#__PURE__*/React.createElement(MenuContext.Consumer, null, function (_ref2) {
        var _classNames;

        var inlineCollapsed = _ref2.inlineCollapsed,
            direction = _ref2.direction;

        var _a;

        var tooltipTitle = title;

        if (typeof title === 'undefined') {
          tooltipTitle = level === 1 ? children : '';
        } else if (title === false) {
          tooltipTitle = '';
        }

        var tooltipProps = {
          title: tooltipTitle
        };

        if (!siderCollapsed && !inlineCollapsed) {
          tooltipProps.title = null; // Reset \`visible\` to fix control mode tooltip display not correct
          // ref: https://github.com/ant-design/ant-design/issues/16742

          tooltipProps.visible = false;
        }

        var childrenLength = toArray$2(children).length;
        return /*#__PURE__*/React.createElement(Tooltip, _extends({}, tooltipProps, {
          placement: direction === 'rtl' ? 'left' : 'right',
          overlayClassName: \\"\\".concat(rootPrefixCls, \\"-inline-collapsed-tooltip\\")
        }), /*#__PURE__*/React.createElement(Item$2, _extends({}, rest, {
          className: classNames((_classNames = {}, _defineProperty(_classNames, \\"\\".concat(rootPrefixCls, \\"-item-danger\\"), danger), _defineProperty(_classNames, \\"\\".concat(rootPrefixCls, \\"-item-only-child\\"), (icon ? childrenLength + 1 : childrenLength) === 1), _classNames), className),
          title: title
        }), cloneElement(icon, {
          className: classNames(isValidElement(icon) ? (_a = icon.props) === null || _a === void 0 ? void 0 : _a.className : '', \\"\\".concat(rootPrefixCls, \\"-item-icon\\"))
        }), _this.renderItemChildren(inlineCollapsed)));
      });
    };

    return _this;
  }

  _createClass(MenuItem, [{
    key: \\"renderItemChildren\\",
    value: function renderItemChildren(inlineCollapsed) {
      var _this$props2 = this.props,
          icon = _this$props2.icon,
          children = _this$props2.children,
          level = _this$props2.level,
          rootPrefixCls = _this$props2.rootPrefixCls; // inline-collapsed.md demo 依赖 span 来隐藏文字,有 icon 属性，则内部包裹一个 span
      // ref: https://github.com/ant-design/ant-design/pull/23456

      if (!icon || isValidElement(children) && children.type === 'span') {
        if (children && inlineCollapsed && level === 1 && typeof children === 'string') {
          return /*#__PURE__*/React.createElement(\\"div\\", {
            className: \\"\\".concat(rootPrefixCls, \\"-inline-collapsed-noicon\\")
          }, children.charAt(0));
        }

        return children;
      }

      return /*#__PURE__*/React.createElement(\\"span\\", null, children);
    }
  }, {
    key: \\"render\\",
    value: function render() {
      return /*#__PURE__*/React.createElement(SiderContext.Consumer, null, this.renderItem);
    }
  }]);

  return MenuItem;
}(React.Component);
MenuItem$1.isMenuItem = true;

// ================== Collapse Motion ==================
var getCollapsedHeight = function getCollapsedHeight() {
  return {
    height: 0,
    opacity: 0
  };
};

var getRealHeight = function getRealHeight(node) {
  return {
    height: node.scrollHeight,
    opacity: 1
  };
};

var getCurrentHeight = function getCurrentHeight(node) {
  return {
    height: node.offsetHeight
  };
};

var skipOpacityTransition = function skipOpacityTransition(_, event) {
  return event.propertyName === 'height';
};

var collapseMotion = {
  motionName: 'ant-motion-collapse',
  onAppearStart: getCollapsedHeight,
  onEnterStart: getCollapsedHeight,
  onAppearActive: getRealHeight,
  onEnterActive: getRealHeight,
  onLeaveStart: getCurrentHeight,
  onLeaveActive: getCollapsedHeight,
  onAppearEnd: skipOpacityTransition,
  onEnterEnd: skipOpacityTransition,
  onLeaveEnd: skipOpacityTransition,
  motionDeadline: 500
};

var InternalMenu = /*#__PURE__*/function (_React$Component) {
  _inherits(InternalMenu, _React$Component);

  var _super = _createSuper(InternalMenu);

  function InternalMenu(props) {
    var _this;

    _classCallCheck(this, InternalMenu);

    _this = _super.call(this, props);

    _this.renderMenu = function (_ref) {
      var getPopupContainer = _ref.getPopupContainer,
          getPrefixCls = _ref.getPrefixCls,
          direction = _ref.direction;
      var _this$props = _this.props,
          customizePrefixCls = _this$props.prefixCls,
          className = _this$props.className,
          theme = _this$props.theme,
          expandIcon = _this$props.expandIcon;
      var defaultMotions = {
        horizontal: {
          motionName: 'slide-up'
        },
        inline: collapseMotion,
        other: {
          motionName: 'zoom-big'
        }
      };
      var prefixCls = getPrefixCls('menu', customizePrefixCls);
      var menuClassName = classNames(\\"\\".concat(prefixCls, \\"-\\").concat(theme), _defineProperty({}, \\"\\".concat(prefixCls, \\"-inline-collapsed\\"), _this.getInlineCollapsed()), className);
      return /*#__PURE__*/React.createElement(MenuContext.Provider, {
        value: {
          inlineCollapsed: _this.getInlineCollapsed() || false,
          antdMenuTheme: theme,
          direction: direction
        }
      }, /*#__PURE__*/React.createElement(RcMenu, _extends({
        getPopupContainer: getPopupContainer
      }, _this.props, {
        className: menuClassName,
        prefixCls: prefixCls,
        direction: direction,
        defaultMotions: defaultMotions,
        expandIcon: cloneElement(expandIcon, {
          className: \\"\\".concat(prefixCls, \\"-submenu-expand-icon\\")
        })
      })));
    };

    devWarning(!('inlineCollapsed' in props && props.mode !== 'inline'), 'Menu', '\`inlineCollapsed\` should only be used when \`mode\` is inline.');
    devWarning(!(props.siderCollapsed !== undefined && 'inlineCollapsed' in props), 'Menu', '\`inlineCollapsed\` not control Menu under Sider. Should set \`collapsed\` on Sider instead.');
    return _this;
  }

  _createClass(InternalMenu, [{
    key: \\"getInlineCollapsed\\",
    value: function getInlineCollapsed() {
      var _this$props2 = this.props,
          inlineCollapsed = _this$props2.inlineCollapsed,
          siderCollapsed = _this$props2.siderCollapsed;

      if (siderCollapsed !== undefined) {
        return siderCollapsed;
      }

      return inlineCollapsed;
    }
  }, {
    key: \\"render\\",
    value: function render() {
      return /*#__PURE__*/React.createElement(ConfigConsumer, null, this.renderMenu);
    }
  }]);

  return InternalMenu;
}(React.Component);

InternalMenu.defaultProps = {
  className: '',
  theme: 'light',
  focusable: false
}; // We should keep this as ref-able

var Menu = /*#__PURE__*/function (_React$Component2) {
  _inherits(Menu, _React$Component2);

  var _super2 = _createSuper(Menu);

  function Menu() {
    _classCallCheck(this, Menu);

    return _super2.apply(this, arguments);
  }

  _createClass(Menu, [{
    key: \\"render\\",
    value: function render() {
      var _this2 = this;

      return /*#__PURE__*/React.createElement(SiderContext.Consumer, null, function (context) {
        return /*#__PURE__*/React.createElement(InternalMenu, _extends({}, _this2.props, context));
      });
    }
  }]);

  return Menu;
}(React.Component);

Menu.Divider = Divider$1;
Menu.Item = MenuItem$1;
Menu.SubMenu = SubMenu$1;
Menu.ItemGroup = ItemGroup;

var __rest$U = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

function getBreadcrumbName(route, params) {
  if (!route.breadcrumbName) {
    return null;
  }

  var paramsKeys = Object.keys(params).join('|');
  var name = route.breadcrumbName.replace(new RegExp(\\":(\\".concat(paramsKeys, \\")\\"), 'g'), function (replacement, key) {
    return params[key] || replacement;
  });
  return name;
}

function defaultItemRender(route, params, routes, paths) {
  var isLastItem = routes.indexOf(route) === routes.length - 1;
  var name = getBreadcrumbName(route, params);
  return isLastItem ? /*#__PURE__*/React.createElement(\\"span\\", null, name) : /*#__PURE__*/React.createElement(\\"a\\", {
    href: \\"#/\\".concat(paths.join('/'))
  }, name);
}

var getPath = function getPath(path, params) {
  path = (path || '').replace(/^\\\\//, '');
  Object.keys(params).forEach(function (key) {
    path = path.replace(\\":\\".concat(key), params[key]);
  });
  return path;
};

var addChildPath = function addChildPath(paths) {
  var childPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var params = arguments.length > 2 ? arguments[2] : undefined;

  var originalPaths = _toConsumableArray(paths);

  var path = getPath(childPath, params);

  if (path) {
    originalPaths.push(path);
  }

  return originalPaths;
};

var Breadcrumb = function Breadcrumb(_a) {
  var customizePrefixCls = _a.prefixCls,
      _a$separator = _a.separator,
      separator = _a$separator === void 0 ? '/' : _a$separator,
      style = _a.style,
      className = _a.className,
      routes = _a.routes,
      children = _a.children,
      _a$itemRender = _a.itemRender,
      itemRender = _a$itemRender === void 0 ? defaultItemRender : _a$itemRender,
      _a$params = _a.params,
      params = _a$params === void 0 ? {} : _a$params,
      restProps = __rest$U(_a, [\\"prefixCls\\", \\"separator\\", \\"style\\", \\"className\\", \\"routes\\", \\"children\\", \\"itemRender\\", \\"params\\"]);

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  var crumbs;
  var prefixCls = getPrefixCls('breadcrumb', customizePrefixCls);

  if (routes && routes.length > 0) {
    // generated by route
    var paths = [];
    crumbs = routes.map(function (route) {
      var path = getPath(route.path, params);

      if (path) {
        paths.push(path);
      } // generated overlay by route.children


      var overlay;

      if (route.children && route.children.length) {
        overlay = /*#__PURE__*/React.createElement(Menu, null, route.children.map(function (child) {
          return /*#__PURE__*/React.createElement(Menu.Item, {
            key: child.path || child.breadcrumbName
          }, itemRender(child, params, routes, addChildPath(paths, child.path, params)));
        }));
      }

      return /*#__PURE__*/React.createElement(BreadcrumbItem, {
        overlay: overlay,
        separator: separator,
        key: path || route.breadcrumbName
      }, itemRender(route, params, routes, paths));
    });
  } else if (children) {
    crumbs = toArray$2(children).map(function (element, index) {
      if (!element) {
        return element;
      }

      devWarning(element.type && (element.type.__ANT_BREADCRUMB_ITEM === true || element.type.__ANT_BREADCRUMB_SEPARATOR === true), 'Breadcrumb', \\"Only accepts Breadcrumb.Item and Breadcrumb.Separator as it's children\\");
      return cloneElement(element, {
        separator: separator,
        key: index
      });
    });
  }

  var breadcrumbClassName = classNames(prefixCls, _defineProperty({}, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), className);
  return /*#__PURE__*/React.createElement(\\"div\\", _extends({
    className: breadcrumbClassName,
    style: style
  }, restProps), crumbs);
};

Breadcrumb.Item = BreadcrumbItem;
Breadcrumb.Separator = BreadcrumbSeparator;

var RadioGroupContext = /*#__PURE__*/React.createContext(null);
var RadioGroupContextProvider = RadioGroupContext.Provider;

var __rest$T = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var InternalRadio = function InternalRadio(props, ref) {
  var _classNames;

  var context = React.useContext(RadioGroupContext);

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  var innerRef = React.useRef();
  var mergedRef = composeRef(ref, innerRef);
  React.useEffect(function () {
    devWarning(!('optionType' in props), 'Radio', '\`optionType\` is only support in Radio.Group.');
  }, []);

  var onChange = function onChange(e) {
    if (props.onChange) {
      props.onChange(e);
    }

    if (context === null || context === void 0 ? void 0 : context.onChange) {
      context.onChange(e);
    }
  };

  var customizePrefixCls = props.prefixCls,
      className = props.className,
      children = props.children,
      style = props.style,
      restProps = __rest$T(props, [\\"prefixCls\\", \\"className\\", \\"children\\", \\"style\\"]);

  var prefixCls = getPrefixCls('radio', customizePrefixCls);

  var radioProps = _extends({}, restProps);

  if (context) {
    radioProps.name = context.name;
    radioProps.onChange = onChange;
    radioProps.checked = props.value === context.value;
    radioProps.disabled = props.disabled || context.disabled;
  }

  var wrapperClassString = classNames(\\"\\".concat(prefixCls, \\"-wrapper\\"), (_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-wrapper-checked\\"), radioProps.checked), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-wrapper-disabled\\"), radioProps.disabled), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-wrapper-rtl\\"), direction === 'rtl'), _classNames), className);
  return (
    /*#__PURE__*/
    // eslint-disable-next-line jsx-a11y/label-has-associated-control
    React.createElement(\\"label\\", {
      className: wrapperClassString,
      style: style,
      onMouseEnter: props.onMouseEnter,
      onMouseLeave: props.onMouseLeave
    }, /*#__PURE__*/React.createElement(RcCheckbox, _extends({}, radioProps, {
      prefixCls: prefixCls,
      ref: mergedRef
    })), children !== undefined ? /*#__PURE__*/React.createElement(\\"span\\", null, children) : null)
  );
};

var Radio$1 = /*#__PURE__*/React.forwardRef(InternalRadio);
Radio$1.displayName = 'Radio';
Radio$1.defaultProps = {
  type: 'radio'
};

var RadioGroup = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  var size = React.useContext(SizeContext$1);

  var _useMergedState = useMergedState(props.defaultValue, {
    value: props.value
  }),
      _useMergedState2 = _slicedToArray(_useMergedState, 2),
      value = _useMergedState2[0],
      setValue = _useMergedState2[1];

  var onRadioChange = function onRadioChange(ev) {
    var lastValue = value;
    var val = ev.target.value;

    if (!('value' in props)) {
      setValue(val);
    }

    var onChange = props.onChange;

    if (onChange && val !== lastValue) {
      onChange(ev);
    }
  };

  var renderGroup = function renderGroup() {
    var _classNames;

    var customizePrefixCls = props.prefixCls,
        _props$className = props.className,
        className = _props$className === void 0 ? '' : _props$className,
        options = props.options,
        optionType = props.optionType,
        _props$buttonStyle = props.buttonStyle,
        buttonStyle = _props$buttonStyle === void 0 ? 'outline' : _props$buttonStyle,
        disabled = props.disabled,
        children = props.children,
        customizeSize = props.size,
        style = props.style,
        id = props.id,
        onMouseEnter = props.onMouseEnter,
        onMouseLeave = props.onMouseLeave;
    var prefixCls = getPrefixCls('radio', customizePrefixCls);
    var groupPrefixCls = \\"\\".concat(prefixCls, \\"-group\\");
    var childrenToRender = children; // 如果存在 options, 优先使用

    if (options && options.length > 0) {
      var optionsPrefixCls = optionType === 'button' ? \\"\\".concat(prefixCls, \\"-button\\") : prefixCls;
      childrenToRender = options.map(function (option) {
        if (typeof option === 'string') {
          // 此处类型自动推导为 string
          return /*#__PURE__*/React.createElement(Radio$1, {
            key: option,
            prefixCls: optionsPrefixCls,
            disabled: disabled,
            value: option,
            checked: value === option
          }, option);
        } // 此处类型自动推导为 { label: string value: string }


        return /*#__PURE__*/React.createElement(Radio$1, {
          key: \\"radio-group-value-options-\\".concat(option.value),
          prefixCls: optionsPrefixCls,
          disabled: option.disabled || disabled,
          value: option.value,
          checked: value === option.value,
          style: option.style
        }, option.label);
      });
    }

    var mergedSize = customizeSize || size;
    var classString = classNames(groupPrefixCls, \\"\\".concat(groupPrefixCls, \\"-\\").concat(buttonStyle), (_classNames = {}, _defineProperty(_classNames, \\"\\".concat(groupPrefixCls, \\"-\\").concat(mergedSize), mergedSize), _defineProperty(_classNames, \\"\\".concat(groupPrefixCls, \\"-rtl\\"), direction === 'rtl'), _classNames), className);
    return /*#__PURE__*/React.createElement(\\"div\\", {
      className: classString,
      style: style,
      onMouseEnter: onMouseEnter,
      onMouseLeave: onMouseLeave,
      id: id,
      ref: ref
    }, childrenToRender);
  };

  return /*#__PURE__*/React.createElement(RadioGroupContextProvider, {
    value: {
      onChange: onRadioChange,
      value: value,
      disabled: props.disabled,
      name: props.name
    }
  }, renderGroup());
});
var Group$2 = /*#__PURE__*/React.memo(RadioGroup);

var __rest$S = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var RadioButton = function RadioButton(props, ref) {
  var radioGroupContext = React.useContext(RadioGroupContext);

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls;

  var customizePrefixCls = props.prefixCls,
      radioProps = __rest$S(props, [\\"prefixCls\\"]);

  var prefixCls = getPrefixCls('radio-button', customizePrefixCls);

  if (radioGroupContext) {
    radioProps.checked = props.value === radioGroupContext.value;
    radioProps.disabled = props.disabled || radioGroupContext.disabled;
  }

  return /*#__PURE__*/React.createElement(Radio$1, _extends({
    prefixCls: prefixCls
  }, radioProps, {
    type: \\"radio\\",
    ref: ref
  }));
};

var Button = /*#__PURE__*/React.forwardRef(RadioButton);

var Radio = Radio$1;
Radio.Button = Button;
Radio.Group = Group$2;

var YearSelectOffset = 10;
var YearSelectTotal = 20;

function YearSelect(props) {
  var fullscreen = props.fullscreen,
      validRange = props.validRange,
      generateConfig = props.generateConfig,
      locale = props.locale,
      prefixCls = props.prefixCls,
      value = props.value,
      _onChange = props.onChange,
      divRef = props.divRef;
  var year = generateConfig.getYear(value);
  var start = year - YearSelectOffset;
  var end = start + YearSelectTotal;

  if (validRange) {
    start = generateConfig.getYear(validRange[0]);
    end = generateConfig.getYear(validRange[1]) + 1;
  }

  var suffix = locale && locale.year === '年' ? '年' : '';
  var options = [];

  for (var index = start; index < end; index++) {
    options.push({
      label: \\"\\".concat(index).concat(suffix),
      value: index
    });
  }

  return /*#__PURE__*/React.createElement(Select, {
    size: fullscreen ? undefined : 'small',
    options: options,
    value: year,
    className: \\"\\".concat(prefixCls, \\"-year-select\\"),
    onChange: function onChange(numYear) {
      var newDate = generateConfig.setYear(value, numYear);

      if (validRange) {
        var _validRange = _slicedToArray(validRange, 2),
            startDate = _validRange[0],
            endDate = _validRange[1];

        var newYear = generateConfig.getYear(newDate);
        var newMonth = generateConfig.getMonth(newDate);

        if (newYear === generateConfig.getYear(endDate) && newMonth > generateConfig.getMonth(endDate)) {
          newDate = generateConfig.setMonth(newDate, generateConfig.getMonth(endDate));
        }

        if (newYear === generateConfig.getYear(startDate) && newMonth < generateConfig.getMonth(startDate)) {
          newDate = generateConfig.setMonth(newDate, generateConfig.getMonth(startDate));
        }
      }

      _onChange(newDate);
    },
    getPopupContainer: function getPopupContainer() {
      return divRef.current;
    }
  });
}

function MonthSelect(props) {
  var prefixCls = props.prefixCls,
      fullscreen = props.fullscreen,
      validRange = props.validRange,
      value = props.value,
      generateConfig = props.generateConfig,
      locale = props.locale,
      _onChange2 = props.onChange,
      divRef = props.divRef;
  var month = generateConfig.getMonth(value);
  var start = 0;
  var end = 11;

  if (validRange) {
    var _validRange2 = _slicedToArray(validRange, 2),
        rangeStart = _validRange2[0],
        rangeEnd = _validRange2[1];

    var currentYear = generateConfig.getYear(value);

    if (generateConfig.getYear(rangeEnd) === currentYear) {
      end = generateConfig.getMonth(rangeEnd);
    }

    if (generateConfig.getYear(rangeStart) === currentYear) {
      start = generateConfig.getMonth(rangeStart);
    }
  }

  var months = locale.shortMonths || generateConfig.locale.getShortMonths(locale.locale);
  var options = [];

  for (var index = start; index <= end; index += 1) {
    options.push({
      label: months[index],
      value: index
    });
  }

  return /*#__PURE__*/React.createElement(Select, {
    size: fullscreen ? undefined : 'small',
    className: \\"\\".concat(prefixCls, \\"-month-select\\"),
    value: month,
    options: options,
    onChange: function onChange(newMonth) {
      _onChange2(generateConfig.setMonth(value, newMonth));
    },
    getPopupContainer: function getPopupContainer() {
      return divRef.current;
    }
  });
}

function ModeSwitch(props) {
  var prefixCls = props.prefixCls,
      locale = props.locale,
      mode = props.mode,
      fullscreen = props.fullscreen,
      onModeChange = props.onModeChange;
  return /*#__PURE__*/React.createElement(Group$2, {
    onChange: function onChange(_ref) {
      var value = _ref.target.value;
      onModeChange(value);
    },
    value: mode,
    size: fullscreen ? undefined : 'small',
    className: \\"\\".concat(prefixCls, \\"-mode-switch\\")
  }, /*#__PURE__*/React.createElement(Button, {
    value: \\"month\\"
  }, locale.month), /*#__PURE__*/React.createElement(Button, {
    value: \\"year\\"
  }, locale.year));
}

function CalendarHeader(props) {
  var prefixCls = props.prefixCls,
      fullscreen = props.fullscreen,
      mode = props.mode,
      onChange = props.onChange,
      onModeChange = props.onModeChange;
  var divRef = React.useRef(null);

  var sharedProps = _extends(_extends({}, props), {
    onChange: onChange,
    fullscreen: fullscreen,
    divRef: divRef
  });

  return /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-header\\"),
    ref: divRef
  }, /*#__PURE__*/React.createElement(YearSelect, sharedProps), mode === 'month' && /*#__PURE__*/React.createElement(MonthSelect, sharedProps), /*#__PURE__*/React.createElement(ModeSwitch, _extends({}, sharedProps, {
    onModeChange: onModeChange
  })));
}

function generateCalendar(generateConfig) {
  function isSameYear(date1, date2) {
    return date1 && date2 && generateConfig.getYear(date1) === generateConfig.getYear(date2);
  }

  function isSameMonth(date1, date2) {
    return isSameYear(date1, date2) && generateConfig.getMonth(date1) === generateConfig.getMonth(date2);
  }

  function isSameDate(date1, date2) {
    return isSameMonth(date1, date2) && generateConfig.getDate(date1) === generateConfig.getDate(date2);
  }

  var Calendar = function Calendar(props) {
    var customizePrefixCls = props.prefixCls,
        className = props.className,
        style = props.style,
        dateFullCellRender = props.dateFullCellRender,
        dateCellRender = props.dateCellRender,
        monthFullCellRender = props.monthFullCellRender,
        monthCellRender = props.monthCellRender,
        headerRender = props.headerRender,
        value = props.value,
        defaultValue = props.defaultValue,
        disabledDate = props.disabledDate,
        mode = props.mode,
        validRange = props.validRange,
        _props$fullscreen = props.fullscreen,
        fullscreen = _props$fullscreen === void 0 ? true : _props$fullscreen,
        onChange = props.onChange,
        onPanelChange = props.onPanelChange,
        onSelect = props.onSelect;

    var _React$useContext = React.useContext(ConfigContext),
        getPrefixCls = _React$useContext.getPrefixCls,
        direction = _React$useContext.direction;

    var prefixCls = getPrefixCls('picker', customizePrefixCls);
    var calendarPrefixCls = \\"\\".concat(prefixCls, \\"-calendar\\");
    var today = generateConfig.getNow(); // ====================== State =======================
    // Value

    var _useMergedState = useMergedState(function () {
      return value || generateConfig.getNow();
    }, {
      defaultValue: defaultValue,
      value: value
    }),
        _useMergedState2 = _slicedToArray(_useMergedState, 2),
        mergedValue = _useMergedState2[0],
        setMergedValue = _useMergedState2[1]; // Mode


    var _useMergedState3 = useMergedState('month', {
      value: mode
    }),
        _useMergedState4 = _slicedToArray(_useMergedState3, 2),
        mergedMode = _useMergedState4[0],
        setMergedMode = _useMergedState4[1];

    var panelMode = React.useMemo(function () {
      return mergedMode === 'year' ? 'month' : 'date';
    }, [mergedMode]); // Disabled Date

    var mergedDisabledDate = React.useCallback(function (date) {
      var notInRange = validRange ? generateConfig.isAfter(validRange[0], date) || generateConfig.isAfter(date, validRange[1]) : false;
      return notInRange || !!(disabledDate === null || disabledDate === void 0 ? void 0 : disabledDate(date));
    }, [disabledDate, validRange]); // ====================== Events ======================

    var triggerPanelChange = function triggerPanelChange(date, newMode) {
      if (onPanelChange) {
        onPanelChange(date, newMode);
      }
    };

    var triggerChange = function triggerChange(date) {
      setMergedValue(date);

      if (!isSameDate(date, mergedValue)) {
        // Trigger when month panel switch month
        if (panelMode === 'date' && !isSameMonth(date, mergedValue) || panelMode === 'month' && !isSameYear(date, mergedValue)) {
          triggerPanelChange(date, mergedMode);
        }

        if (onChange) {
          onChange(date);
        }
      }
    };

    var triggerModeChange = function triggerModeChange(newMode) {
      setMergedMode(newMode);
      triggerPanelChange(mergedValue, newMode);
    };

    var onInternalSelect = function onInternalSelect(date) {
      triggerChange(date);

      if (onSelect) {
        onSelect(date);
      }
    }; // ====================== Locale ======================


    var getDefaultLocale = function getDefaultLocale() {
      var locale$1 = props.locale;

      var result = _extends(_extends({}, locale), locale$1);

      result.lang = _extends(_extends({}, result.lang), (locale$1 || {}).lang);
      return result;
    }; // ====================== Render ======================


    var dateRender = React.useCallback(function (date) {
      if (dateFullCellRender) {
        return dateFullCellRender(date);
      }

      return /*#__PURE__*/React.createElement(\\"div\\", {
        className: classNames(\\"\\".concat(prefixCls, \\"-cell-inner\\"), \\"\\".concat(calendarPrefixCls, \\"-date\\"), _defineProperty({}, \\"\\".concat(calendarPrefixCls, \\"-date-today\\"), isSameDate(today, date)))
      }, /*#__PURE__*/React.createElement(\\"div\\", {
        className: \\"\\".concat(calendarPrefixCls, \\"-date-value\\")
      }, padStart(String(generateConfig.getDate(date)), 2, '0')), /*#__PURE__*/React.createElement(\\"div\\", {
        className: \\"\\".concat(calendarPrefixCls, \\"-date-content\\")
      }, dateCellRender && dateCellRender(date)));
    }, [dateFullCellRender, dateCellRender]);
    var monthRender = React.useCallback(function (date, locale) {
      if (monthFullCellRender) {
        return monthFullCellRender(date);
      }

      var months = locale.shortMonths || generateConfig.locale.getShortMonths(locale.locale);
      return /*#__PURE__*/React.createElement(\\"div\\", {
        className: classNames(\\"\\".concat(prefixCls, \\"-cell-inner\\"), \\"\\".concat(calendarPrefixCls, \\"-date\\"), _defineProperty({}, \\"\\".concat(calendarPrefixCls, \\"-date-today\\"), isSameMonth(today, date)))
      }, /*#__PURE__*/React.createElement(\\"div\\", {
        className: \\"\\".concat(calendarPrefixCls, \\"-date-value\\")
      }, months[generateConfig.getMonth(date)]), /*#__PURE__*/React.createElement(\\"div\\", {
        className: \\"\\".concat(calendarPrefixCls, \\"-date-content\\")
      }, monthCellRender && monthCellRender(date)));
    }, [monthFullCellRender, monthCellRender]);
    return /*#__PURE__*/React.createElement(LocaleReceiver, {
      componentName: \\"Calendar\\",
      defaultLocale: getDefaultLocale
    }, function (mergedLocale) {
      var _classNames3;

      return /*#__PURE__*/React.createElement(\\"div\\", {
        className: classNames(calendarPrefixCls, (_classNames3 = {}, _defineProperty(_classNames3, \\"\\".concat(calendarPrefixCls, \\"-full\\"), fullscreen), _defineProperty(_classNames3, \\"\\".concat(calendarPrefixCls, \\"-mini\\"), !fullscreen), _defineProperty(_classNames3, \\"\\".concat(calendarPrefixCls, \\"-rtl\\"), direction === 'rtl'), _classNames3), className),
        style: style
      }, headerRender ? headerRender({
        value: mergedValue,
        type: mergedMode,
        onChange: onInternalSelect,
        onTypeChange: triggerModeChange
      }) : /*#__PURE__*/React.createElement(CalendarHeader, {
        prefixCls: calendarPrefixCls,
        value: mergedValue,
        generateConfig: generateConfig,
        mode: mergedMode,
        fullscreen: fullscreen,
        locale: mergedLocale.lang,
        validRange: validRange,
        onChange: onInternalSelect,
        onModeChange: triggerModeChange
      }), /*#__PURE__*/React.createElement(PickerPanel, {
        value: mergedValue,
        prefixCls: prefixCls,
        locale: mergedLocale.lang,
        generateConfig: generateConfig,
        dateRender: dateRender,
        monthCellRender: function monthCellRender(date) {
          return monthRender(date, mergedLocale.lang);
        },
        onSelect: onInternalSelect,
        mode: panelMode,
        picker: panelMode,
        disabledDate: mergedDisabledDate,
        hideHeader: true
      }));
    });
  };

  return Calendar;
}

var Calendar = generateCalendar(momentGenerateConfig);

var __rest$R = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var Grid = function Grid(_a) {
  var prefixCls = _a.prefixCls,
      className = _a.className,
      _a$hoverable = _a.hoverable,
      hoverable = _a$hoverable === void 0 ? true : _a$hoverable,
      props = __rest$R(_a, [\\"prefixCls\\", \\"className\\", \\"hoverable\\"]);

  return /*#__PURE__*/React.createElement(ConfigConsumer, null, function (_ref) {
    var getPrefixCls = _ref.getPrefixCls;
    var prefix = getPrefixCls('card', prefixCls);
    var classString = classNames(\\"\\".concat(prefix, \\"-grid\\"), className, _defineProperty({}, \\"\\".concat(prefix, \\"-grid-hoverable\\"), hoverable));
    return /*#__PURE__*/React.createElement(\\"div\\", _extends({}, props, {
      className: classString
    }));
  });
};

var __rest$Q = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var Meta$1 = function Meta(props) {
  return /*#__PURE__*/React.createElement(ConfigConsumer, null, function (_ref) {
    var getPrefixCls = _ref.getPrefixCls;

    var customizePrefixCls = props.prefixCls,
        className = props.className,
        avatar = props.avatar,
        title = props.title,
        description = props.description,
        others = __rest$Q(props, [\\"prefixCls\\", \\"className\\", \\"avatar\\", \\"title\\", \\"description\\"]);

    var prefixCls = getPrefixCls('card', customizePrefixCls);
    var classString = classNames(\\"\\".concat(prefixCls, \\"-meta\\"), className);
    var avatarDom = avatar ? /*#__PURE__*/React.createElement(\\"div\\", {
      className: \\"\\".concat(prefixCls, \\"-meta-avatar\\")
    }, avatar) : null;
    var titleDom = title ? /*#__PURE__*/React.createElement(\\"div\\", {
      className: \\"\\".concat(prefixCls, \\"-meta-title\\")
    }, title) : null;
    var descriptionDom = description ? /*#__PURE__*/React.createElement(\\"div\\", {
      className: \\"\\".concat(prefixCls, \\"-meta-description\\")
    }, description) : null;
    var MetaDetail = titleDom || descriptionDom ? /*#__PURE__*/React.createElement(\\"div\\", {
      className: \\"\\".concat(prefixCls, \\"-meta-detail\\")
    }, titleDom, descriptionDom) : null;
    return /*#__PURE__*/React.createElement(\\"div\\", _extends({}, others, {
      className: classString
    }), avatarDom, MetaDetail);
  });
};

// This icon file is generated automatically.
var PlusOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"defs\\", \\"attrs\\": {}, \\"children\\": [{ \\"tag\\": \\"style\\", \\"attrs\\": {} }] }, { \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z\\" } }, { \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z\\" } }] }, \\"name\\": \\"plus\\", \\"theme\\": \\"outlined\\" };

var PlusOutlined = function PlusOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: PlusOutlined$2
  }));
};

PlusOutlined.displayName = 'PlusOutlined';
var PlusOutlined$1 = /*#__PURE__*/React.forwardRef(PlusOutlined);

var __rest$P = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

function Tabs(_a) {
  var _classNames;

  var type = _a.type,
      className = _a.className,
      size = _a.size,
      _onEdit = _a.onEdit,
      hideAdd = _a.hideAdd,
      centered = _a.centered,
      addIcon = _a.addIcon,
      props = __rest$P(_a, [\\"type\\", \\"className\\", \\"size\\", \\"onEdit\\", \\"hideAdd\\", \\"centered\\", \\"addIcon\\"]);

  var customizePrefixCls = props.prefixCls;

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  var prefixCls = getPrefixCls('tabs', customizePrefixCls);
  var editable;

  if (type === 'editable-card') {
    editable = {
      onEdit: function onEdit(editType, _ref) {
        var key = _ref.key,
            event = _ref.event;
        _onEdit === null || _onEdit === void 0 ? void 0 : _onEdit(editType === 'add' ? event : key, editType);
      },
      removeIcon: /*#__PURE__*/React.createElement(CloseOutlined$1, null),
      addIcon: addIcon || /*#__PURE__*/React.createElement(PlusOutlined$1, null),
      showAdd: hideAdd !== true
    };
  }

  devWarning(!('onPrevClick' in props) && !('onNextClick' in props), 'Tabs', '\`onPrevClick\` and \`onNextClick\` has been removed. Please use \`onTabScroll\` instead.');
  return /*#__PURE__*/React.createElement(RcTabs, _extends({
    direction: direction
  }, props, {
    moreTransitionName: \\"slide-up\\",
    className: classNames((_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-\\").concat(size), size), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-card\\"), ['card', 'editable-card'].includes(type)), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-editable-card\\"), type === 'editable-card'), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-centered\\"), centered), _classNames), className),
    editable: editable,
    moreIcon: /*#__PURE__*/React.createElement(EllipsisOutlined$1, null),
    prefixCls: prefixCls
  }));
}

Tabs.TabPane = TabPane;

var RowContext = /*#__PURE__*/createContext({});

var canUseDocElement = function canUseDocElement() {
  return canUseDom() && window.document.documentElement;
};
var isStyleSupport = function isStyleSupport(styleName) {
  if (canUseDocElement()) {
    var styleNameList = Array.isArray(styleName) ? styleName : [styleName];
    var documentElement = window.document.documentElement;
    return styleNameList.some(function (name) {
      return name in documentElement.style;
    });
  }

  return false;
};
var flexGapSupported;
var detectFlexGapSupported = function detectFlexGapSupported() {
  if (!canUseDocElement()) {
    return false;
  }

  if (flexGapSupported !== undefined) {
    return flexGapSupported;
  } // create flex container with row-gap set


  var flex = document.createElement('div');
  flex.style.display = 'flex';
  flex.style.flexDirection = 'column';
  flex.style.rowGap = '1px'; // create two, elements inside it

  flex.appendChild(document.createElement('div'));
  flex.appendChild(document.createElement('div')); // append to the DOM (needed to obtain scrollHeight)

  document.body.appendChild(flex);
  flexGapSupported = flex.scrollHeight === 1; // flex container should be 1px high from the row-gap

  document.body.removeChild(flex);
  return flexGapSupported;
};

var __rest$O = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var RowAligns = tuple('top', 'middle', 'bottom', 'stretch');
var RowJustify = tuple('start', 'end', 'center', 'space-around', 'space-between');
var Row$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _classNames;

  var customizePrefixCls = props.prefixCls,
      justify = props.justify,
      align = props.align,
      className = props.className,
      style = props.style,
      children = props.children,
      _props$gutter = props.gutter,
      gutter = _props$gutter === void 0 ? 0 : _props$gutter,
      wrap = props.wrap,
      others = __rest$O(props, [\\"prefixCls\\", \\"justify\\", \\"align\\", \\"className\\", \\"style\\", \\"children\\", \\"gutter\\", \\"wrap\\"]);

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  var _React$useState = React.useState({
    xs: true,
    sm: true,
    md: true,
    lg: true,
    xl: true,
    xxl: true
  }),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      screens = _React$useState2[0],
      setScreens = _React$useState2[1];

  var gutterRef = React.useRef(gutter);
  React.useEffect(function () {
    var token = responsiveObserve.subscribe(function (screen) {
      var currentGutter = gutterRef.current || 0;

      if (!Array.isArray(currentGutter) && _typeof(currentGutter) === 'object' || Array.isArray(currentGutter) && (_typeof(currentGutter[0]) === 'object' || _typeof(currentGutter[1]) === 'object')) {
        setScreens(screen);
      }
    });
    return function () {
      return responsiveObserve.unsubscribe(token);
    };
  }, []);

  var getGutter = function getGutter() {
    var results = [0, 0];
    var normalizedGutter = Array.isArray(gutter) ? gutter : [gutter, 0];
    normalizedGutter.forEach(function (g, index) {
      if (_typeof(g) === 'object') {
        for (var i = 0; i < responsiveArray.length; i++) {
          var breakpoint = responsiveArray[i];

          if (screens[breakpoint] && g[breakpoint] !== undefined) {
            results[index] = g[breakpoint];
            break;
          }
        }
      } else {
        results[index] = g || 0;
      }
    });
    return results;
  };

  var prefixCls = getPrefixCls('row', customizePrefixCls);
  var gutters = getGutter();
  var classes = classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-no-wrap\\"), wrap === false), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-\\").concat(justify), justify), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-\\").concat(align), align), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), _classNames), className); // Add gutter related style

  var rowStyle = {};
  var horizontalGutter = gutters[0] > 0 ? gutters[0] / -2 : undefined;
  var verticalGutter = gutters[1] > 0 ? gutters[1] / -2 : undefined;
  rowStyle.marginLeft = horizontalGutter;
  rowStyle.marginRight = horizontalGutter;

  if (detectFlexGapSupported()) {
    // Set gap direct if flex gap support
    var _gutters = _slicedToArray(gutters, 2);

    rowStyle.rowGap = _gutters[1];
  } else {
    rowStyle.marginTop = verticalGutter;
    rowStyle.marginBottom = verticalGutter;
  }

  return /*#__PURE__*/React.createElement(RowContext.Provider, {
    value: {
      gutter: gutters,
      wrap: wrap
    }
  }, /*#__PURE__*/React.createElement(\\"div\\", _extends({}, others, {
    className: classes,
    style: _extends(_extends({}, rowStyle), style),
    ref: ref
  }), children));
});
Row$1.displayName = 'Row';

var __rest$N = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

function parseFlex(flex) {
  if (typeof flex === 'number') {
    return \\"\\".concat(flex, \\" \\").concat(flex, \\" auto\\");
  }

  if (/^\\\\d+(\\\\.\\\\d+)?(px|em|rem|%)$/.test(flex)) {
    return \\"0 0 \\".concat(flex);
  }

  return flex;
}

var sizes = ['xs', 'sm', 'md', 'lg', 'xl', 'xxl'];
var Col = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _classNames;

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  var _React$useContext2 = React.useContext(RowContext),
      gutter = _React$useContext2.gutter,
      wrap = _React$useContext2.wrap;

  var customizePrefixCls = props.prefixCls,
      span = props.span,
      order = props.order,
      offset = props.offset,
      push = props.push,
      pull = props.pull,
      className = props.className,
      children = props.children,
      flex = props.flex,
      style = props.style,
      others = __rest$N(props, [\\"prefixCls\\", \\"span\\", \\"order\\", \\"offset\\", \\"push\\", \\"pull\\", \\"className\\", \\"children\\", \\"flex\\", \\"style\\"]);

  var prefixCls = getPrefixCls('col', customizePrefixCls);
  var sizeClassObj = {};
  sizes.forEach(function (size) {
    var _extends2;

    var sizeProps = {};
    var propSize = props[size];

    if (typeof propSize === 'number') {
      sizeProps.span = propSize;
    } else if (_typeof(propSize) === 'object') {
      sizeProps = propSize || {};
    }

    delete others[size];
    sizeClassObj = _extends(_extends({}, sizeClassObj), (_extends2 = {}, _defineProperty(_extends2, \\"\\".concat(prefixCls, \\"-\\").concat(size, \\"-\\").concat(sizeProps.span), sizeProps.span !== undefined), _defineProperty(_extends2, \\"\\".concat(prefixCls, \\"-\\").concat(size, \\"-order-\\").concat(sizeProps.order), sizeProps.order || sizeProps.order === 0), _defineProperty(_extends2, \\"\\".concat(prefixCls, \\"-\\").concat(size, \\"-offset-\\").concat(sizeProps.offset), sizeProps.offset || sizeProps.offset === 0), _defineProperty(_extends2, \\"\\".concat(prefixCls, \\"-\\").concat(size, \\"-push-\\").concat(sizeProps.push), sizeProps.push || sizeProps.push === 0), _defineProperty(_extends2, \\"\\".concat(prefixCls, \\"-\\").concat(size, \\"-pull-\\").concat(sizeProps.pull), sizeProps.pull || sizeProps.pull === 0), _defineProperty(_extends2, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), _extends2));
  });
  var classes = classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-\\").concat(span), span !== undefined), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-order-\\").concat(order), order), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-offset-\\").concat(offset), offset), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-push-\\").concat(push), push), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-pull-\\").concat(pull), pull), _classNames), className, sizeClassObj);
  var mergedStyle = {}; // Horizontal gutter use padding

  if (gutter && gutter[0] > 0) {
    var horizontalGutter = gutter[0] / 2;
    mergedStyle.paddingLeft = horizontalGutter;
    mergedStyle.paddingRight = horizontalGutter;
  } // Vertical gutter use padding when gap not support


  if (gutter && gutter[1] > 0 && !detectFlexGapSupported()) {
    var verticalGutter = gutter[1] / 2;
    mergedStyle.paddingTop = verticalGutter;
    mergedStyle.paddingBottom = verticalGutter;
  }

  if (flex) {
    mergedStyle.flex = parseFlex(flex); // Hack for Firefox to avoid size issue
    // https://github.com/ant-design/ant-design/pull/20023#issuecomment-564389553

    if (flex === 'auto' && wrap === false && !mergedStyle.minWidth) {
      mergedStyle.minWidth = 0;
    }
  }

  return /*#__PURE__*/React.createElement(\\"div\\", _extends({}, others, {
    style: _extends(_extends({}, mergedStyle), style),
    className: classes,
    ref: ref
  }), children);
});
Col.displayName = 'Col';

var index = {
  useBreakpoint: useBreakpoint
};

var __rest$M = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

function getAction(actions) {
  var actionList = actions.map(function (action, index) {
    return (
      /*#__PURE__*/
      // eslint-disable-next-line react/no-array-index-key
      React.createElement(\\"li\\", {
        style: {
          width: \\"\\".concat(100 / actions.length, \\"%\\")
        },
        key: \\"action-\\".concat(index)
      }, /*#__PURE__*/React.createElement(\\"span\\", null, action))
    );
  });
  return actionList;
}

var Card = function Card(props) {
  var _extends2, _classNames;

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  var size = React.useContext(SizeContext$1);

  var onTabChange = function onTabChange(key) {
    if (props.onTabChange) {
      props.onTabChange(key);
    }
  };

  var isContainGrid = function isContainGrid() {
    var containGrid;
    React.Children.forEach(props.children, function (element) {
      if (element && element.type && element.type === Grid) {
        containGrid = true;
      }
    });
    return containGrid;
  };

  var customizePrefixCls = props.prefixCls,
      className = props.className,
      extra = props.extra,
      _props$headStyle = props.headStyle,
      headStyle = _props$headStyle === void 0 ? {} : _props$headStyle,
      _props$bodyStyle = props.bodyStyle,
      bodyStyle = _props$bodyStyle === void 0 ? {} : _props$bodyStyle,
      title = props.title,
      loading = props.loading,
      _props$bordered = props.bordered,
      bordered = _props$bordered === void 0 ? true : _props$bordered,
      customizeSize = props.size,
      type = props.type,
      cover = props.cover,
      actions = props.actions,
      tabList = props.tabList,
      children = props.children,
      activeTabKey = props.activeTabKey,
      defaultActiveTabKey = props.defaultActiveTabKey,
      tabBarExtraContent = props.tabBarExtraContent,
      hoverable = props.hoverable,
      _props$tabProps = props.tabProps,
      tabProps = _props$tabProps === void 0 ? {} : _props$tabProps,
      others = __rest$M(props, [\\"prefixCls\\", \\"className\\", \\"extra\\", \\"headStyle\\", \\"bodyStyle\\", \\"title\\", \\"loading\\", \\"bordered\\", \\"size\\", \\"type\\", \\"cover\\", \\"actions\\", \\"tabList\\", \\"children\\", \\"activeTabKey\\", \\"defaultActiveTabKey\\", \\"tabBarExtraContent\\", \\"hoverable\\", \\"tabProps\\"]);

  var prefixCls = getPrefixCls('card', customizePrefixCls);
  var loadingBlockStyle = bodyStyle.padding === 0 || bodyStyle.padding === '0px' ? {
    padding: 24
  } : undefined;
  var block = /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-loading-block\\")
  });
  var loadingBlock = /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-loading-content\\"),
    style: loadingBlockStyle
  }, /*#__PURE__*/React.createElement(Row$1, {
    gutter: 8
  }, /*#__PURE__*/React.createElement(Col, {
    span: 22
  }, block)), /*#__PURE__*/React.createElement(Row$1, {
    gutter: 8
  }, /*#__PURE__*/React.createElement(Col, {
    span: 8
  }, block), /*#__PURE__*/React.createElement(Col, {
    span: 15
  }, block)), /*#__PURE__*/React.createElement(Row$1, {
    gutter: 8
  }, /*#__PURE__*/React.createElement(Col, {
    span: 6
  }, block), /*#__PURE__*/React.createElement(Col, {
    span: 18
  }, block)), /*#__PURE__*/React.createElement(Row$1, {
    gutter: 8
  }, /*#__PURE__*/React.createElement(Col, {
    span: 13
  }, block), /*#__PURE__*/React.createElement(Col, {
    span: 9
  }, block)), /*#__PURE__*/React.createElement(Row$1, {
    gutter: 8
  }, /*#__PURE__*/React.createElement(Col, {
    span: 4
  }, block), /*#__PURE__*/React.createElement(Col, {
    span: 3
  }, block), /*#__PURE__*/React.createElement(Col, {
    span: 16
  }, block)));
  var hasActiveTabKey = activeTabKey !== undefined;

  var extraProps = _extends(_extends({}, tabProps), (_extends2 = {}, _defineProperty(_extends2, hasActiveTabKey ? 'activeKey' : 'defaultActiveKey', hasActiveTabKey ? activeTabKey : defaultActiveTabKey), _defineProperty(_extends2, \\"tabBarExtraContent\\", tabBarExtraContent), _extends2));

  var head;
  var tabs = tabList && tabList.length ? /*#__PURE__*/React.createElement(Tabs, _extends({
    size: \\"large\\"
  }, extraProps, {
    className: \\"\\".concat(prefixCls, \\"-head-tabs\\"),
    onChange: onTabChange
  }), tabList.map(function (item) {
    return /*#__PURE__*/React.createElement(Tabs.TabPane, {
      tab: item.tab,
      disabled: item.disabled,
      key: item.key
    });
  })) : null;

  if (title || extra || tabs) {
    head = /*#__PURE__*/React.createElement(\\"div\\", {
      className: \\"\\".concat(prefixCls, \\"-head\\"),
      style: headStyle
    }, /*#__PURE__*/React.createElement(\\"div\\", {
      className: \\"\\".concat(prefixCls, \\"-head-wrapper\\")
    }, title && /*#__PURE__*/React.createElement(\\"div\\", {
      className: \\"\\".concat(prefixCls, \\"-head-title\\")
    }, title), extra && /*#__PURE__*/React.createElement(\\"div\\", {
      className: \\"\\".concat(prefixCls, \\"-extra\\")
    }, extra)), tabs);
  }

  var coverDom = cover ? /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-cover\\")
  }, cover) : null;
  var body = /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-body\\"),
    style: bodyStyle
  }, loading ? loadingBlock : children);
  var actionDom = actions && actions.length ? /*#__PURE__*/React.createElement(\\"ul\\", {
    className: \\"\\".concat(prefixCls, \\"-actions\\")
  }, getAction(actions)) : null;
  var divProps = omit(others, ['onTabChange']);
  var mergedSize = customizeSize || size;
  var classString = classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-loading\\"), loading), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-bordered\\"), bordered), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-hoverable\\"), hoverable), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-contain-grid\\"), isContainGrid()), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-contain-tabs\\"), tabList && tabList.length), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-\\").concat(mergedSize), mergedSize), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-type-\\").concat(type), !!type), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), _classNames), className);
  return /*#__PURE__*/React.createElement(\\"div\\", _extends({}, divProps, {
    className: classString
  }), head, coverDom, body, actionDom);
};

Card.Grid = Grid;
Card.Meta = Meta$1;

var CollapsePanel = function CollapsePanel(props) {
  devWarning(!('disabled' in props), 'Collapse.Panel', '\`disabled\` is deprecated. Please use \`collapsible=\\"disabled\\"\` instead.');

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls;

  var customizePrefixCls = props.prefixCls,
      _props$className = props.className,
      className = _props$className === void 0 ? '' : _props$className,
      _props$showArrow = props.showArrow,
      showArrow = _props$showArrow === void 0 ? true : _props$showArrow;
  var prefixCls = getPrefixCls('collapse', customizePrefixCls);
  var collapsePanelClassName = classNames(_defineProperty({}, \\"\\".concat(prefixCls, \\"-no-arrow\\"), !showArrow), className);
  return /*#__PURE__*/React.createElement(RcCollapse.Panel, _extends({}, props, {
    prefixCls: prefixCls,
    className: collapsePanelClassName
  }));
};

var Collapse = function Collapse(props) {
  var _classNames;

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  var customizePrefixCls = props.prefixCls,
      _props$className = props.className,
      className = _props$className === void 0 ? '' : _props$className,
      _props$bordered = props.bordered,
      bordered = _props$bordered === void 0 ? true : _props$bordered,
      ghost = props.ghost;
  var prefixCls = getPrefixCls('collapse', customizePrefixCls);

  var getIconPosition = function getIconPosition() {
    var expandIconPosition = props.expandIconPosition;

    if (expandIconPosition !== undefined) {
      return expandIconPosition;
    }

    return direction === 'rtl' ? 'right' : 'left';
  };

  var renderExpandIcon = function renderExpandIcon() {
    var panelProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var expandIcon = props.expandIcon;
    var icon = expandIcon ? expandIcon(panelProps) : /*#__PURE__*/React.createElement(RightOutlined$1, {
      rotate: panelProps.isActive ? 90 : undefined
    });
    return cloneElement(icon, function () {
      return {
        className: classNames(icon.props.className, \\"\\".concat(prefixCls, \\"-arrow\\"))
      };
    });
  };

  var iconPosition = getIconPosition();
  var collapseClassName = classNames((_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-borderless\\"), !bordered), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-icon-position-\\").concat(iconPosition), true), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-ghost\\"), !!ghost), _classNames), className);

  var openMotion = _extends(_extends({}, collapseMotion), {
    motionAppear: false,
    leavedClassName: \\"\\".concat(prefixCls, \\"-content-hidden\\")
  });

  var getItems = function getItems() {
    var children = props.children;
    return toArray$2(children).map(function (child, index) {
      var _a;

      if ((_a = child.props) === null || _a === void 0 ? void 0 : _a.disabled) {
        var key = child.key || String(index);
        var _child$props = child.props,
            disabled = _child$props.disabled,
            collapsible = _child$props.collapsible;

        var childProps = _extends(_extends({}, omit(child.props, ['disabled'])), {
          key: key,
          collapsible: collapsible !== null && collapsible !== void 0 ? collapsible : disabled ? 'disabled' : undefined
        });

        return cloneElement(child, childProps);
      }

      return child;
    });
  };

  return /*#__PURE__*/React.createElement(RcCollapse, _extends({
    openMotion: openMotion
  }, props, {
    bordered: bordered,
    expandIcon: renderExpandIcon,
    prefixCls: prefixCls,
    className: collapseClassName
  }), getItems());
};

Collapse.Panel = CollapsePanel;

var __rest$L = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var Carousel = /*#__PURE__*/React.forwardRef(function (_a, ref) {
  var _classNames;

  var _a$dots = _a.dots,
      dots = _a$dots === void 0 ? true : _a$dots,
      _a$arrows = _a.arrows,
      arrows = _a$arrows === void 0 ? false : _a$arrows,
      _a$draggable = _a.draggable,
      draggable = _a$draggable === void 0 ? false : _a$draggable,
      _a$dotPosition = _a.dotPosition,
      dotPosition = _a$dotPosition === void 0 ? 'bottom' : _a$dotPosition,
      props = __rest$L(_a, [\\"dots\\", \\"arrows\\", \\"draggable\\", \\"dotPosition\\"]);

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  var slickRef = React.useRef();

  var goTo = function goTo(slide) {
    var dontAnimate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    slickRef.current.slickGoTo(slide, dontAnimate);
  };

  React.useImperativeHandle(ref, function () {
    return {
      goTo: goTo,
      autoPlay: slickRef.current.innerSlider.autoPlay,
      innerSlider: slickRef.current.innerSlider,
      prev: slickRef.current.slickPrev,
      next: slickRef.current.slickNext
    };
  }, [slickRef.current]);
  React.useEffect(function () {
    var func = function func() {
      // Fix https://github.com/ant-design/ant-design/issues/2550
      var autoplay = props.autoplay;

      if (autoplay && slickRef.current && slickRef.current.innerSlider && slickRef.current.innerSlider.autoPlay) {
        slickRef.current.innerSlider.autoPlay();
      }
    };

    var onWindowResized = debounce(func, 500, {
      leading: false
    });

    if (props.autoplay) {
      window.addEventListener('resize', onWindowResized);
    }

    return function () {
      if (props.autoplay) {
        window.removeEventListener('resize', onWindowResized);
        onWindowResized.cancel();
      }
    };
  }, [slickRef.current, props.autoplay]);
  var prevCount = React.useRef(React.Children.count(props.children));
  React.useEffect(function () {
    if (prevCount.current !== React.Children.count(props.children)) {
      goTo(props.initialSlide || 0, false);
      prevCount.current = React.Children.count(props.children);
    }
  }, [props.children]);

  var newProps = _extends({}, props);

  if (newProps.effect === 'fade') {
    newProps.fade = true;
  }

  var prefixCls = getPrefixCls('carousel', newProps.prefixCls);
  var dotsClass = 'slick-dots';
  newProps.vertical = dotPosition === 'left' || dotPosition === 'right';
  var enableDots = !!dots;
  var dsClass = classNames(dotsClass, \\"\\".concat(dotsClass, \\"-\\").concat(dotPosition), typeof dots === 'boolean' ? false : dots === null || dots === void 0 ? void 0 : dots.className);
  var className = classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-vertical\\"), newProps.vertical), _classNames));
  return /*#__PURE__*/React.createElement(\\"div\\", {
    className: className
  }, /*#__PURE__*/React.createElement(SlickCarousel, _extends({
    ref: slickRef
  }, newProps, {
    dots: enableDots,
    dotsClass: dsClass,
    arrows: arrows,
    draggable: draggable
  })));
});

// This icon file is generated automatically.
var RedoOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M758.2 839.1C851.8 765.9 912 651.9 912 523.9 912 303 733.5 124.3 512.6 124 291.4 123.7 112 302.8 112 523.9c0 125.2 57.5 236.9 147.6 310.2 3.5 2.8 8.6 2.2 11.4-1.3l39.4-50.5c2.7-3.4 2.1-8.3-1.2-11.1-8.1-6.6-15.9-13.7-23.4-21.2a318.64 318.64 0 01-68.6-101.7C200.4 609 192 567.1 192 523.9s8.4-85.1 25.1-124.5c16.1-38.1 39.2-72.3 68.6-101.7 29.4-29.4 63.6-52.5 101.7-68.6C426.9 212.4 468.8 204 512 204s85.1 8.4 124.5 25.1c38.1 16.1 72.3 39.2 101.7 68.6 29.4 29.4 52.5 63.6 68.6 101.7 16.7 39.4 25.1 81.3 25.1 124.5s-8.4 85.1-25.1 124.5a318.64 318.64 0 01-68.6 101.7c-9.3 9.3-19.1 18-29.3 26L668.2 724a8 8 0 00-14.1 3l-39.6 162.2c-1.2 5 2.6 9.9 7.7 9.9l167 .8c6.7 0 10.5-7.7 6.3-12.9l-37.3-47.9z\\" } }] }, \\"name\\": \\"redo\\", \\"theme\\": \\"outlined\\" };

var RedoOutlined = function RedoOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: RedoOutlined$2
  }));
};

RedoOutlined.displayName = 'RedoOutlined';
var RedoOutlined$1 = /*#__PURE__*/React.forwardRef(RedoOutlined);

var ClearableInputType = tuple('text', 'input');
function hasPrefixSuffix(props) {
  return !!(props.prefix || props.suffix || props.allowClear);
}

function hasAddon(props) {
  return !!(props.addonBefore || props.addonAfter);
}

var ClearableLabeledInput = /*#__PURE__*/function (_React$Component) {
  _inherits(ClearableLabeledInput, _React$Component);

  var _super = _createSuper(ClearableLabeledInput);

  function ClearableLabeledInput() {
    var _this;

    _classCallCheck(this, ClearableLabeledInput);

    _this = _super.apply(this, arguments);
    /** @private Do not use out of this class. We do not promise this is always keep. */

    _this.containerRef = /*#__PURE__*/React.createRef();

    _this.onInputMouseUp = function (e) {
      var _a;

      if ((_a = _this.containerRef.current) === null || _a === void 0 ? void 0 : _a.contains(e.target)) {
        var triggerFocus = _this.props.triggerFocus;
        triggerFocus === null || triggerFocus === void 0 ? void 0 : triggerFocus();
      }
    };

    return _this;
  }

  _createClass(ClearableLabeledInput, [{
    key: \\"renderClearIcon\\",
    value: function renderClearIcon(prefixCls) {
      var _this$props = this.props,
          allowClear = _this$props.allowClear,
          value = _this$props.value,
          disabled = _this$props.disabled,
          readOnly = _this$props.readOnly,
          handleReset = _this$props.handleReset;

      if (!allowClear) {
        return null;
      }

      var needClear = !disabled && !readOnly && value;
      var className = \\"\\".concat(prefixCls, \\"-clear-icon\\");
      return /*#__PURE__*/React.createElement(CloseCircleFilled$1, {
        onClick: handleReset,
        className: classNames(_defineProperty({}, \\"\\".concat(className, \\"-hidden\\"), !needClear), className),
        role: \\"button\\"
      });
    }
  }, {
    key: \\"renderSuffix\\",
    value: function renderSuffix(prefixCls) {
      var _this$props2 = this.props,
          suffix = _this$props2.suffix,
          allowClear = _this$props2.allowClear;

      if (suffix || allowClear) {
        return /*#__PURE__*/React.createElement(\\"span\\", {
          className: \\"\\".concat(prefixCls, \\"-suffix\\")
        }, this.renderClearIcon(prefixCls), suffix);
      }

      return null;
    }
  }, {
    key: \\"renderLabeledIcon\\",
    value: function renderLabeledIcon(prefixCls, element) {
      var _classNames2;

      var _this$props3 = this.props,
          focused = _this$props3.focused,
          value = _this$props3.value,
          prefix = _this$props3.prefix,
          className = _this$props3.className,
          size = _this$props3.size,
          suffix = _this$props3.suffix,
          disabled = _this$props3.disabled,
          allowClear = _this$props3.allowClear,
          direction = _this$props3.direction,
          style = _this$props3.style,
          readOnly = _this$props3.readOnly,
          bordered = _this$props3.bordered;
      var suffixNode = this.renderSuffix(prefixCls);

      if (!hasPrefixSuffix(this.props)) {
        return cloneElement(element, {
          value: value
        });
      }

      var prefixNode = prefix ? /*#__PURE__*/React.createElement(\\"span\\", {
        className: \\"\\".concat(prefixCls, \\"-prefix\\")
      }, prefix) : null;
      var affixWrapperCls = classNames(\\"\\".concat(prefixCls, \\"-affix-wrapper\\"), (_classNames2 = {}, _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-affix-wrapper-focused\\"), focused), _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-affix-wrapper-disabled\\"), disabled), _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-affix-wrapper-sm\\"), size === 'small'), _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-affix-wrapper-lg\\"), size === 'large'), _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-affix-wrapper-input-with-clear-btn\\"), suffix && allowClear && value), _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-affix-wrapper-rtl\\"), direction === 'rtl'), _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-affix-wrapper-readonly\\"), readOnly), _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-affix-wrapper-borderless\\"), !bordered), _defineProperty(_classNames2, \\"\\".concat(className), !hasAddon(this.props) && className), _classNames2));
      return /*#__PURE__*/React.createElement(\\"span\\", {
        ref: this.containerRef,
        className: affixWrapperCls,
        style: style,
        onMouseUp: this.onInputMouseUp
      }, prefixNode, cloneElement(element, {
        style: null,
        value: value,
        className: getInputClassName(prefixCls, bordered, size, disabled)
      }), suffixNode);
    }
  }, {
    key: \\"renderInputWithLabel\\",
    value: function renderInputWithLabel(prefixCls, labeledElement) {
      var _classNames4;

      var _this$props4 = this.props,
          addonBefore = _this$props4.addonBefore,
          addonAfter = _this$props4.addonAfter,
          style = _this$props4.style,
          size = _this$props4.size,
          className = _this$props4.className,
          direction = _this$props4.direction; // Not wrap when there is not addons

      if (!hasAddon(this.props)) {
        return labeledElement;
      }

      var wrapperClassName = \\"\\".concat(prefixCls, \\"-group\\");
      var addonClassName = \\"\\".concat(wrapperClassName, \\"-addon\\");
      var addonBeforeNode = addonBefore ? /*#__PURE__*/React.createElement(\\"span\\", {
        className: addonClassName
      }, addonBefore) : null;
      var addonAfterNode = addonAfter ? /*#__PURE__*/React.createElement(\\"span\\", {
        className: addonClassName
      }, addonAfter) : null;
      var mergedWrapperClassName = classNames(\\"\\".concat(prefixCls, \\"-wrapper\\"), wrapperClassName, _defineProperty({}, \\"\\".concat(wrapperClassName, \\"-rtl\\"), direction === 'rtl'));
      var mergedGroupClassName = classNames(\\"\\".concat(prefixCls, \\"-group-wrapper\\"), (_classNames4 = {}, _defineProperty(_classNames4, \\"\\".concat(prefixCls, \\"-group-wrapper-sm\\"), size === 'small'), _defineProperty(_classNames4, \\"\\".concat(prefixCls, \\"-group-wrapper-lg\\"), size === 'large'), _defineProperty(_classNames4, \\"\\".concat(prefixCls, \\"-group-wrapper-rtl\\"), direction === 'rtl'), _classNames4), className); // Need another wrapper for changing display:table to display:inline-block
      // and put style prop in wrapper

      return /*#__PURE__*/React.createElement(\\"span\\", {
        className: mergedGroupClassName,
        style: style
      }, /*#__PURE__*/React.createElement(\\"span\\", {
        className: mergedWrapperClassName
      }, addonBeforeNode, cloneElement(labeledElement, {
        style: null
      }), addonAfterNode));
    }
  }, {
    key: \\"renderTextAreaWithClearIcon\\",
    value: function renderTextAreaWithClearIcon(prefixCls, element) {
      var _classNames5;

      var _this$props5 = this.props,
          value = _this$props5.value,
          allowClear = _this$props5.allowClear,
          className = _this$props5.className,
          style = _this$props5.style,
          direction = _this$props5.direction,
          bordered = _this$props5.bordered;

      if (!allowClear) {
        return cloneElement(element, {
          value: value
        });
      }

      var affixWrapperCls = classNames(\\"\\".concat(prefixCls, \\"-affix-wrapper\\"), \\"\\".concat(prefixCls, \\"-affix-wrapper-textarea-with-clear-btn\\"), (_classNames5 = {}, _defineProperty(_classNames5, \\"\\".concat(prefixCls, \\"-affix-wrapper-rtl\\"), direction === 'rtl'), _defineProperty(_classNames5, \\"\\".concat(prefixCls, \\"-affix-wrapper-borderless\\"), !bordered), _defineProperty(_classNames5, \\"\\".concat(className), !hasAddon(this.props) && className), _classNames5));
      return /*#__PURE__*/React.createElement(\\"span\\", {
        className: affixWrapperCls,
        style: style
      }, cloneElement(element, {
        style: null,
        value: value
      }), this.renderClearIcon(prefixCls));
    }
  }, {
    key: \\"render\\",
    value: function render() {
      var _this$props6 = this.props,
          prefixCls = _this$props6.prefixCls,
          inputType = _this$props6.inputType,
          element = _this$props6.element;

      if (inputType === ClearableInputType[0]) {
        return this.renderTextAreaWithClearIcon(prefixCls, element);
      }

      return this.renderInputWithLabel(prefixCls, this.renderLabeledIcon(prefixCls, element));
    }
  }]);

  return ClearableLabeledInput;
}(React.Component);

function fixControlledValue(value) {
  if (typeof value === 'undefined' || value === null) {
    return '';
  }

  return value;
}
function resolveOnChange(target, e, onChange) {
  if (onChange) {
    var event = e;

    if (e.type === 'click') {
      // click clear icon
      event = Object.create(e);
      event.target = target;
      event.currentTarget = target;
      var originalInputValue = target.value; // change target ref value cause e.target.value should be '' when clear input

      target.value = '';
      onChange(event); // reset target ref value

      target.value = originalInputValue;
      return;
    }

    onChange(event);
  }
}
function getInputClassName(prefixCls, bordered, size, disabled, direction) {
  var _classNames;

  return classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-sm\\"), size === 'small'), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-lg\\"), size === 'large'), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-disabled\\"), disabled), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-borderless\\"), !bordered), _classNames));
}
function triggerFocus(element, option) {
  if (!element) return;
  element.focus(option); // Selection content

  var _ref = option || {},
      cursor = _ref.cursor;

  if (cursor) {
    var len = element.value.length;

    switch (cursor) {
      case 'start':
        element.setSelectionRange(0, 0);
        break;

      case 'end':
        element.setSelectionRange(len, len);
        break;

      default:
        element.setSelectionRange(0, len);
    }
  }
}

var Input = /*#__PURE__*/function (_React$Component) {
  _inherits(Input, _React$Component);

  var _super = _createSuper(Input);

  function Input(props) {
    var _this;

    _classCallCheck(this, Input);

    _this = _super.call(this, props);
    _this.direction = 'ltr';

    _this.focus = function (option) {
      triggerFocus(_this.input, option);
    };

    _this.saveClearableInput = function (input) {
      _this.clearableInput = input;
    };

    _this.saveInput = function (input) {
      _this.input = input;
    };

    _this.onFocus = function (e) {
      var onFocus = _this.props.onFocus;

      _this.setState({
        focused: true
      }, _this.clearPasswordValueAttribute);

      if (onFocus) {
        onFocus(e);
      }
    };

    _this.onBlur = function (e) {
      var onBlur = _this.props.onBlur;

      _this.setState({
        focused: false
      }, _this.clearPasswordValueAttribute);

      if (onBlur) {
        onBlur(e);
      }
    };

    _this.handleReset = function (e) {
      _this.setValue('', function () {
        _this.focus();
      });

      resolveOnChange(_this.input, e, _this.props.onChange);
    };

    _this.renderInput = function (prefixCls, size, bordered) {
      var input = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      var _this$props = _this.props,
          className = _this$props.className,
          addonBefore = _this$props.addonBefore,
          addonAfter = _this$props.addonAfter,
          customizeSize = _this$props.size,
          disabled = _this$props.disabled; // Fix https://fb.me/react-unknown-prop

      var otherProps = omit(_this.props, ['prefixCls', 'onPressEnter', 'addonBefore', 'addonAfter', 'prefix', 'suffix', 'allowClear', // Input elements must be either controlled or uncontrolled,
      // specify either the value prop, or the defaultValue prop, but not both.
      'defaultValue', 'size', 'inputType', 'bordered']);
      return /*#__PURE__*/React.createElement(\\"input\\", _extends({
        autoComplete: input.autoComplete
      }, otherProps, {
        onChange: _this.handleChange,
        onFocus: _this.onFocus,
        onBlur: _this.onBlur,
        onKeyDown: _this.handleKeyDown,
        className: classNames(getInputClassName(prefixCls, bordered, customizeSize || size, disabled, _this.direction), _defineProperty({}, className, className && !addonBefore && !addonAfter)),
        ref: _this.saveInput
      }));
    };

    _this.clearPasswordValueAttribute = function () {
      // https://github.com/ant-design/ant-design/issues/20541
      _this.removePasswordTimeout = setTimeout(function () {
        if (_this.input && _this.input.getAttribute('type') === 'password' && _this.input.hasAttribute('value')) {
          _this.input.removeAttribute('value');
        }
      });
    };

    _this.handleChange = function (e) {
      _this.setValue(e.target.value, _this.clearPasswordValueAttribute);

      resolveOnChange(_this.input, e, _this.props.onChange);
    };

    _this.handleKeyDown = function (e) {
      var _this$props2 = _this.props,
          onPressEnter = _this$props2.onPressEnter,
          onKeyDown = _this$props2.onKeyDown;

      if (e.keyCode === 13 && onPressEnter) {
        onPressEnter(e);
      }

      if (onKeyDown) {
        onKeyDown(e);
      }
    };

    _this.renderComponent = function (_ref2) {
      var getPrefixCls = _ref2.getPrefixCls,
          direction = _ref2.direction,
          input = _ref2.input;
      var _this$state = _this.state,
          value = _this$state.value,
          focused = _this$state.focused;
      var _this$props3 = _this.props,
          customizePrefixCls = _this$props3.prefixCls,
          _this$props3$bordered = _this$props3.bordered,
          bordered = _this$props3$bordered === void 0 ? true : _this$props3$bordered;
      var prefixCls = getPrefixCls('input', customizePrefixCls);
      _this.direction = direction;
      return /*#__PURE__*/React.createElement(SizeContext$1.Consumer, null, function (size) {
        return /*#__PURE__*/React.createElement(ClearableLabeledInput, _extends({
          size: size
        }, _this.props, {
          prefixCls: prefixCls,
          inputType: \\"input\\",
          value: fixControlledValue(value),
          element: _this.renderInput(prefixCls, size, bordered, input),
          handleReset: _this.handleReset,
          ref: _this.saveClearableInput,
          direction: direction,
          focused: focused,
          triggerFocus: _this.focus,
          bordered: bordered
        }));
      });
    };

    var value = typeof props.value === 'undefined' ? props.defaultValue : props.value;
    _this.state = {
      value: value,
      focused: false,
      // eslint-disable-next-line react/no-unused-state
      prevValue: props.value
    };
    return _this;
  }

  _createClass(Input, [{
    key: \\"componentDidMount\\",
    value: function componentDidMount() {
      this.clearPasswordValueAttribute();
    } // Since polyfill \`getSnapshotBeforeUpdate\` need work with \`componentDidUpdate\`.
    // We keep an empty function here.

  }, {
    key: \\"componentDidUpdate\\",
    value: function componentDidUpdate() {}
  }, {
    key: \\"getSnapshotBeforeUpdate\\",
    value: function getSnapshotBeforeUpdate(prevProps) {
      if (hasPrefixSuffix(prevProps) !== hasPrefixSuffix(this.props)) {
        devWarning(this.input !== document.activeElement, 'Input', \\"When Input is focused, dynamic add or remove prefix / suffix will make it lose focus caused by dom structure change. Read more: https://ant.design/components/input/#FAQ\\");
      }

      return null;
    }
  }, {
    key: \\"componentWillUnmount\\",
    value: function componentWillUnmount() {
      if (this.removePasswordTimeout) {
        clearTimeout(this.removePasswordTimeout);
      }
    }
  }, {
    key: \\"blur\\",
    value: function blur() {
      this.input.blur();
    }
  }, {
    key: \\"setSelectionRange\\",
    value: function setSelectionRange(start, end, direction) {
      this.input.setSelectionRange(start, end, direction);
    }
  }, {
    key: \\"select\\",
    value: function select() {
      this.input.select();
    }
  }, {
    key: \\"setValue\\",
    value: function setValue(value, callback) {
      if (this.props.value === undefined) {
        this.setState({
          value: value
        }, callback);
      } else {
        callback === null || callback === void 0 ? void 0 : callback();
      }
    }
  }, {
    key: \\"render\\",
    value: function render() {
      return /*#__PURE__*/React.createElement(ConfigConsumer, null, this.renderComponent);
    }
  }], [{
    key: \\"getDerivedStateFromProps\\",
    value: function getDerivedStateFromProps(nextProps, _ref3) {
      var prevValue = _ref3.prevValue;
      var newState = {
        prevValue: nextProps.value
      };

      if (nextProps.value !== undefined || prevValue !== nextProps.value) {
        newState.value = nextProps.value;
      }

      return newState;
    }
  }]);

  return Input;
}(React.Component);

Input.defaultProps = {
  type: 'text'
};

var Group$1 = function Group(props) {
  return /*#__PURE__*/React.createElement(ConfigConsumer, null, function (_ref) {
    var _classNames;

    var getPrefixCls = _ref.getPrefixCls,
        direction = _ref.direction;
    var customizePrefixCls = props.prefixCls,
        _props$className = props.className,
        className = _props$className === void 0 ? '' : _props$className;
    var prefixCls = getPrefixCls('input-group', customizePrefixCls);
    var cls = classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-lg\\"), props.size === 'large'), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-sm\\"), props.size === 'small'), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-compact\\"), props.compact), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), _classNames), className);
    return /*#__PURE__*/React.createElement(\\"span\\", {
      className: cls,
      style: props.style,
      onMouseEnter: props.onMouseEnter,
      onMouseLeave: props.onMouseLeave,
      onFocus: props.onFocus,
      onBlur: props.onBlur
    }, props.children);
  });
};

var __rest$K = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var Search$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _classNames;

  var customizePrefixCls = props.prefixCls,
      customizeInputPrefixCls = props.inputPrefixCls,
      className = props.className,
      customizeSize = props.size,
      suffix = props.suffix,
      _props$enterButton = props.enterButton,
      enterButton = _props$enterButton === void 0 ? false : _props$enterButton,
      addonAfter = props.addonAfter,
      loading = props.loading,
      disabled = props.disabled,
      customOnSearch = props.onSearch,
      customOnChange = props.onChange,
      restProps = __rest$K(props, [\\"prefixCls\\", \\"inputPrefixCls\\", \\"className\\", \\"size\\", \\"suffix\\", \\"enterButton\\", \\"addonAfter\\", \\"loading\\", \\"disabled\\", \\"onSearch\\", \\"onChange\\"]);

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  var contextSize = React.useContext(SizeContext$1);
  var size = customizeSize || contextSize;
  var inputRef = React.useRef(null);

  var onChange = function onChange(e) {
    if (e && e.target && e.type === 'click' && customOnSearch) {
      customOnSearch(e.target.value, e);
    }

    if (customOnChange) {
      customOnChange(e);
    }
  };

  var onMouseDown = function onMouseDown(e) {
    var _a;

    if (document.activeElement === ((_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.input)) {
      e.preventDefault();
    }
  };

  var onSearch = function onSearch(e) {
    var _a;

    if (customOnSearch) {
      customOnSearch((_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.input.value, e);
    }
  };

  var prefixCls = getPrefixCls('input-search', customizePrefixCls);
  var inputPrefixCls = getPrefixCls('input', customizeInputPrefixCls);
  var searchIcon = typeof enterButton === 'boolean' || typeof enterButton === 'undefined' ? /*#__PURE__*/React.createElement(SearchOutlined$1, null) : null;
  var btnClassName = \\"\\".concat(prefixCls, \\"-button\\");
  var button;
  var enterButtonAsElement = enterButton || {};
  var isAntdButton = enterButtonAsElement.type && enterButtonAsElement.type.__ANT_BUTTON === true;

  if (isAntdButton || enterButtonAsElement.type === 'button') {
    button = cloneElement(enterButtonAsElement, _extends({
      onMouseDown: onMouseDown,
      onClick: onSearch,
      key: 'enterButton'
    }, isAntdButton ? {
      className: btnClassName,
      size: size
    } : {}));
  } else {
    button = /*#__PURE__*/React.createElement(Button$1, {
      className: btnClassName,
      type: enterButton ? 'primary' : undefined,
      size: size,
      disabled: disabled,
      key: \\"enterButton\\",
      onMouseDown: onMouseDown,
      onClick: onSearch,
      loading: loading,
      icon: searchIcon
    }, enterButton);
  }

  if (addonAfter) {
    button = [button, cloneElement(addonAfter, {
      key: 'addonAfter'
    })];
  }

  var cls = classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-\\").concat(size), !!size), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-with-button\\"), !!enterButton), _classNames), className);
  return /*#__PURE__*/React.createElement(Input, _extends({
    ref: composeRef(inputRef, ref),
    onPressEnter: onSearch
  }, restProps, {
    size: size,
    prefixCls: inputPrefixCls,
    addonAfter: button,
    suffix: suffix,
    onChange: onChange,
    className: cls,
    disabled: disabled
  }));
});
Search$1.displayName = 'Search';

var __rest$J = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var TextArea = /*#__PURE__*/React.forwardRef(function (_a, ref) {
  var _classNames;

  var customizePrefixCls = _a.prefixCls,
      _a$bordered = _a.bordered,
      bordered = _a$bordered === void 0 ? true : _a$bordered,
      _a$showCount = _a.showCount,
      showCount = _a$showCount === void 0 ? false : _a$showCount,
      maxLength = _a.maxLength,
      className = _a.className,
      style = _a.style,
      customizeSize = _a.size,
      props = __rest$J(_a, [\\"prefixCls\\", \\"bordered\\", \\"showCount\\", \\"maxLength\\", \\"className\\", \\"style\\", \\"size\\"]);

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  var size = React.useContext(SizeContext$1);
  var innerRef = React.useRef(null);
  var clearableInputRef = React.useRef(null);

  var _useMergedState = useMergedState(props.defaultValue, {
    value: props.value
  }),
      _useMergedState2 = _slicedToArray(_useMergedState, 2),
      value = _useMergedState2[0],
      setValue = _useMergedState2[1];

  var prevValue = React.useRef(props.value);
  React.useEffect(function () {
    if (props.value !== undefined || prevValue.current !== props.value) {
      setValue(props.value);
      prevValue.current = props.value;
    }
  }, [props.value, prevValue.current]);

  var handleSetValue = function handleSetValue(val, callback) {
    if (props.value === undefined) {
      setValue(val);
      callback === null || callback === void 0 ? void 0 : callback();
    }
  };

  var handleChange = function handleChange(e) {
    handleSetValue(e.target.value);
    resolveOnChange(innerRef.current, e, props.onChange);
  };

  var handleReset = function handleReset(e) {
    handleSetValue('', function () {
      var _a;

      (_a = innerRef.current) === null || _a === void 0 ? void 0 : _a.focus();
    });
    resolveOnChange(innerRef.current, e, props.onChange);
  };

  var prefixCls = getPrefixCls('input', customizePrefixCls);
  React.useImperativeHandle(ref, function () {
    var _a;

    return {
      resizableTextArea: (_a = innerRef.current) === null || _a === void 0 ? void 0 : _a.resizableTextArea,
      focus: function focus(option) {
        var _a, _b;

        triggerFocus((_b = (_a = innerRef.current) === null || _a === void 0 ? void 0 : _a.resizableTextArea) === null || _b === void 0 ? void 0 : _b.textArea, option);
      },
      blur: function blur() {
        var _a;

        return (_a = innerRef.current) === null || _a === void 0 ? void 0 : _a.blur();
      }
    };
  });
  var textArea = /*#__PURE__*/React.createElement(RcTextArea, _extends({}, omit(props, ['allowClear']), {
    maxLength: maxLength,
    className: classNames((_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-borderless\\"), !bordered), _defineProperty(_classNames, className, className && !showCount), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-sm\\"), size === 'small' || customizeSize === 'small'), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-lg\\"), size === 'large' || customizeSize === 'large'), _classNames)),
    style: showCount ? undefined : style,
    prefixCls: prefixCls,
    onChange: handleChange,
    ref: innerRef
  }));
  var val = fixControlledValue(value); // Max length value

  var hasMaxLength = Number(maxLength) > 0; // fix #27612 将value转为数组进行截取，解决 '😂'.length === 2 等emoji表情导致的截取乱码的问题

  val = hasMaxLength ? _toConsumableArray(val).slice(0, maxLength).join('') : val; // TextArea

  var textareaNode = /*#__PURE__*/React.createElement(ClearableLabeledInput, _extends({}, props, {
    prefixCls: prefixCls,
    direction: direction,
    inputType: \\"text\\",
    value: val,
    element: textArea,
    handleReset: handleReset,
    ref: clearableInputRef,
    bordered: bordered
  })); // Only show text area wrapper when needed

  if (showCount) {
    var valueLength = Math.min(val.length, maxLength !== null && maxLength !== void 0 ? maxLength : Infinity);
    var dataCount = '';

    if (_typeof(showCount) === 'object') {
      dataCount = showCount.formatter({
        count: valueLength,
        maxLength: maxLength
      });
    } else {
      dataCount = \\"\\".concat(valueLength).concat(hasMaxLength ? \\" / \\".concat(maxLength) : '');
    }

    return /*#__PURE__*/React.createElement(\\"div\\", {
      className: classNames(\\"\\".concat(prefixCls, \\"-textarea\\"), _defineProperty({}, \\"\\".concat(prefixCls, \\"-textarea-rtl\\"), direction === 'rtl'), \\"\\".concat(prefixCls, \\"-textarea-show-count\\"), className),
      style: style,
      \\"data-count\\": dataCount
    }, textareaNode);
  }

  return textareaNode;
});

// This icon file is generated automatically.
var EyeOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M942.2 486.2C847.4 286.5 704.1 186 512 186c-192.2 0-335.4 100.5-430.2 300.3a60.3 60.3 0 000 51.5C176.6 737.5 319.9 838 512 838c192.2 0 335.4-100.5 430.2-300.3 7.7-16.2 7.7-35 0-51.5zM512 766c-161.3 0-279.4-81.8-362.7-254C232.6 339.8 350.7 258 512 258c161.3 0 279.4 81.8 362.7 254C791.5 684.2 673.4 766 512 766zm-4-430c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176zm0 288c-61.9 0-112-50.1-112-112s50.1-112 112-112 112 50.1 112 112-50.1 112-112 112z\\" } }] }, \\"name\\": \\"eye\\", \\"theme\\": \\"outlined\\" };

var EyeOutlined = function EyeOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: EyeOutlined$2
  }));
};

EyeOutlined.displayName = 'EyeOutlined';
var EyeOutlined$1 = /*#__PURE__*/React.forwardRef(EyeOutlined);

// This icon file is generated automatically.
var EyeInvisibleOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M942.2 486.2Q889.47 375.11 816.7 305l-50.88 50.88C807.31 395.53 843.45 447.4 874.7 512 791.5 684.2 673.4 766 512 766q-72.67 0-133.87-22.38L323 798.75Q408 838 512 838q288.3 0 430.2-300.3a60.29 60.29 0 000-51.5zm-63.57-320.64L836 122.88a8 8 0 00-11.32 0L715.31 232.2Q624.86 186 512 186q-288.3 0-430.2 300.3a60.3 60.3 0 000 51.5q56.69 119.4 136.5 191.41L112.48 835a8 8 0 000 11.31L155.17 889a8 8 0 0011.31 0l712.15-712.12a8 8 0 000-11.32zM149.3 512C232.6 339.8 350.7 258 512 258c54.54 0 104.13 9.36 149.12 28.39l-70.3 70.3a176 176 0 00-238.13 238.13l-83.42 83.42C223.1 637.49 183.3 582.28 149.3 512zm246.7 0a112.11 112.11 0 01146.2-106.69L401.31 546.2A112 112 0 01396 512z\\" } }, { \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M508 624c-3.46 0-6.87-.16-10.25-.47l-52.82 52.82a176.09 176.09 0 00227.42-227.42l-52.82 52.82c.31 3.38.47 6.79.47 10.25a111.94 111.94 0 01-112 112z\\" } }] }, \\"name\\": \\"eye-invisible\\", \\"theme\\": \\"outlined\\" };

var EyeInvisibleOutlined = function EyeInvisibleOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: EyeInvisibleOutlined$2
  }));
};

EyeInvisibleOutlined.displayName = 'EyeInvisibleOutlined';
var EyeInvisibleOutlined$1 = /*#__PURE__*/React.forwardRef(EyeInvisibleOutlined);

var __rest$I = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var ActionMap = {
  click: 'onClick',
  hover: 'onMouseOver'
};
var Password = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      visible = _useState2[0],
      setVisible = _useState2[1];

  var onVisibleChange = function onVisibleChange() {
    var disabled = props.disabled;

    if (disabled) {
      return;
    }

    setVisible(!visible);
  };

  var getIcon = function getIcon(prefixCls) {
    var _iconProps;

    var action = props.action,
        _props$iconRender = props.iconRender,
        iconRender = _props$iconRender === void 0 ? function () {
      return null;
    } : _props$iconRender;
    var iconTrigger = ActionMap[action] || '';
    var icon = iconRender(visible);
    var iconProps = (_iconProps = {}, _defineProperty(_iconProps, iconTrigger, onVisibleChange), _defineProperty(_iconProps, \\"className\\", \\"\\".concat(prefixCls, \\"-icon\\")), _defineProperty(_iconProps, \\"key\\", 'passwordIcon'), _defineProperty(_iconProps, \\"onMouseDown\\", function onMouseDown(e) {
      // Prevent focused state lost
      // https://github.com/ant-design/ant-design/issues/15173
      e.preventDefault();
    }), _defineProperty(_iconProps, \\"onMouseUp\\", function onMouseUp(e) {
      // Prevent caret position change
      // https://github.com/ant-design/ant-design/issues/23524
      e.preventDefault();
    }), _iconProps);
    return /*#__PURE__*/React.cloneElement( /*#__PURE__*/React.isValidElement(icon) ? icon : /*#__PURE__*/React.createElement(\\"span\\", null, icon), iconProps);
  };

  var renderPassword = function renderPassword(_ref) {
    var getPrefixCls = _ref.getPrefixCls;

    var className = props.className,
        customizePrefixCls = props.prefixCls,
        customizeInputPrefixCls = props.inputPrefixCls,
        size = props.size,
        visibilityToggle = props.visibilityToggle,
        restProps = __rest$I(props, [\\"className\\", \\"prefixCls\\", \\"inputPrefixCls\\", \\"size\\", \\"visibilityToggle\\"]);

    var inputPrefixCls = getPrefixCls('input', customizeInputPrefixCls);
    var prefixCls = getPrefixCls('input-password', customizePrefixCls);
    var suffixIcon = visibilityToggle && getIcon(prefixCls);
    var inputClassName = classNames(prefixCls, className, _defineProperty({}, \\"\\".concat(prefixCls, \\"-\\").concat(size), !!size));

    var omittedProps = _extends(_extends({}, omit(restProps, ['suffix', 'iconRender'])), {
      type: visible ? 'text' : 'password',
      className: inputClassName,
      prefixCls: inputPrefixCls,
      suffix: suffixIcon
    });

    if (size) {
      omittedProps.size = size;
    }

    return /*#__PURE__*/React.createElement(Input, _extends({
      ref: ref
    }, omittedProps));
  };

  return /*#__PURE__*/React.createElement(ConfigConsumer, null, renderPassword);
});
Password.defaultProps = {
  action: 'click',
  visibilityToggle: true,
  iconRender: function iconRender(visible) {
    return visible ? /*#__PURE__*/React.createElement(EyeOutlined$1, null) : /*#__PURE__*/React.createElement(EyeInvisibleOutlined$1, null);
  }
};
Password.displayName = 'Password';

Input.Group = Group$1;
Input.Search = Search$1;
Input.TextArea = TextArea;
Input.Password = Password;

var __rest$H = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var defaultLimit = 50; // keep value when filtering

var keepFilteredValueField = '__KEEP_FILTERED_OPTION_VALUE';

function highlightKeyword(str, keyword, prefixCls) {
  return str.split(keyword).map(function (node, index) {
    return index === 0 ? node : [/*#__PURE__*/React.createElement(\\"span\\", {
      className: \\"\\".concat(prefixCls, \\"-menu-item-keyword\\"),
      key: \\"seperator\\"
    }, keyword), node];
  });
}

function defaultFilterOption(inputValue, path, names) {
  return path.some(function (option) {
    return option[names.label].indexOf(inputValue) > -1;
  });
}

function defaultRenderFilteredOption(inputValue, path, prefixCls, names) {
  return path.map(function (option, index) {
    var label = option[names.label];
    var node = label.indexOf(inputValue) > -1 ? highlightKeyword(label, inputValue, prefixCls) : label;
    return index === 0 ? node : [' / ', node];
  });
}

function defaultSortFilteredOption(a, b, inputValue, names) {
  function callback(elem) {
    return elem[names.label].indexOf(inputValue) > -1;
  }

  return a.findIndex(callback) - b.findIndex(callback);
}

function getFieldNames(_ref) {
  var fieldNames = _ref.fieldNames;
  return fieldNames;
}

function getFilledFieldNames(props) {
  var fieldNames = getFieldNames(props) || {};
  var names = {
    children: fieldNames.children || 'children',
    label: fieldNames.label || 'label',
    value: fieldNames.value || 'value'
  };
  return names;
}

function flattenTree(options, props) {
  var ancestor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var names = getFilledFieldNames(props);
  var flattenOptions = [];
  var childrenName = names.children;
  options.forEach(function (option) {
    var path = ancestor.concat(option);

    if (props.changeOnSelect || !option[childrenName] || !option[childrenName].length) {
      flattenOptions.push(path);
    }

    if (option[childrenName]) {
      flattenOptions = flattenOptions.concat(flattenTree(option[childrenName], props, path));
    }
  });
  return flattenOptions;
}

var defaultDisplayRender = function defaultDisplayRender(label) {
  return label.join(' / ');
};

function warningValueNotExist(list) {
  var fieldNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  (list || []).forEach(function (item) {
    var valueFieldName = fieldNames.value || 'value';
    devWarning(valueFieldName in item, 'Cascader', 'Not found \`value\` in \`options\`.');
    warningValueNotExist(item[fieldNames.children || 'children'], fieldNames);
  });
}

function getEmptyNode(renderEmpty, names, notFoundContent) {
  var _ref2;

  return _ref2 = {}, _defineProperty(_ref2, names.value, 'ANT_CASCADER_NOT_FOUND'), _defineProperty(_ref2, names.label, notFoundContent || renderEmpty('Cascader')), _defineProperty(_ref2, \\"disabled\\", true), _defineProperty(_ref2, \\"isEmptyNode\\", true), _ref2;
}

var Cascader = /*#__PURE__*/function (_React$Component) {
  _inherits(Cascader, _React$Component);

  var _super = _createSuper(Cascader);

  function Cascader(props) {
    var _this;

    _classCallCheck(this, Cascader);

    _this = _super.call(this, props);
    _this.cachedOptions = [];

    _this.setValue = function (value) {
      var selectedOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

      if (!('value' in _this.props)) {
        _this.setState({
          value: value
        });
      }

      var onChange = _this.props.onChange;

      if (onChange) {
        onChange(value, selectedOptions);
      }
    };

    _this.saveInput = function (node) {
      _this.input = node;
    };

    _this.handleChange = function (value, selectedOptions) {
      _this.setState({
        inputValue: ''
      });

      if (selectedOptions[0].__IS_FILTERED_OPTION) {
        var unwrappedValue = selectedOptions[0][keepFilteredValueField] === undefined ? value[0] : selectedOptions[0][keepFilteredValueField];
        var unwrappedSelectedOptions = selectedOptions[0].path;

        _this.setValue(unwrappedValue, unwrappedSelectedOptions);

        return;
      }

      _this.setValue(value, selectedOptions);
    };

    _this.handlePopupVisibleChange = function (popupVisible) {
      if (!('popupVisible' in _this.props)) {
        _this.setState(function (state) {
          return {
            popupVisible: popupVisible,
            inputFocused: popupVisible,
            inputValue: popupVisible ? state.inputValue : ''
          };
        });
      }

      var onPopupVisibleChange = _this.props.onPopupVisibleChange;

      if (onPopupVisibleChange) {
        onPopupVisibleChange(popupVisible);
      }
    };

    _this.handleInputBlur = function () {
      _this.setState({
        inputFocused: false
      });
    };

    _this.handleInputClick = function (e) {
      var _this$state = _this.state,
          inputFocused = _this$state.inputFocused,
          popupVisible = _this$state.popupVisible; // Prevent \`Trigger\` behaviour.

      if (inputFocused || popupVisible) {
        e.stopPropagation();
      }
    };

    _this.handleKeyDown = function (e) {
      // SPACE => https://github.com/ant-design/ant-design/issues/16871
      if (e.keyCode === KeyCode.BACKSPACE || e.keyCode === KeyCode.SPACE) {
        e.stopPropagation();
      }
    };

    _this.handleInputChange = function (e) {
      var popupVisible = _this.state.popupVisible;
      var inputValue = e.target.value;

      if (!popupVisible) {
        _this.handlePopupVisibleChange(true);
      }

      _this.setState({
        inputValue: inputValue
      });
    };

    _this.clearSelection = function (e) {
      var inputValue = _this.state.inputValue;
      e.preventDefault();
      e.stopPropagation();

      if (!inputValue) {
        _this.handlePopupVisibleChange(false);

        _this.clearSelectionTimeout = setTimeout(function () {
          _this.setValue([]);
        }, 200);
      } else {
        _this.setState({
          inputValue: ''
        });
      }
    };

    _this.renderCascader = function (_ref3, locale) {
      var getContextPopupContainer = _ref3.getPopupContainer,
          getPrefixCls = _ref3.getPrefixCls,
          renderEmpty = _ref3.renderEmpty,
          direction = _ref3.direction;
      return /*#__PURE__*/React.createElement(SizeContext$1.Consumer, null, function (size) {
        var _classNames, _classNames2, _classNames3, _classNames5;

        var _assertThisInitialize = _assertThisInitialized(_this),
            props = _assertThisInitialize.props,
            state = _assertThisInitialize.state;

        var customizePrefixCls = props.prefixCls,
            customizeInputPrefixCls = props.inputPrefixCls,
            children = props.children,
            _props$placeholder = props.placeholder,
            placeholder = _props$placeholder === void 0 ? locale.placeholder || 'Please select' : _props$placeholder,
            customizeSize = props.size,
            disabled = props.disabled,
            className = props.className,
            style = props.style,
            allowClear = props.allowClear,
            _props$showSearch = props.showSearch,
            showSearch = _props$showSearch === void 0 ? false : _props$showSearch,
            suffixIcon = props.suffixIcon,
            expandIcon = props.expandIcon,
            notFoundContent = props.notFoundContent,
            popupClassName = props.popupClassName,
            bordered = props.bordered,
            dropdownRender = props.dropdownRender,
            otherProps = __rest$H(props, [\\"prefixCls\\", \\"inputPrefixCls\\", \\"children\\", \\"placeholder\\", \\"size\\", \\"disabled\\", \\"className\\", \\"style\\", \\"allowClear\\", \\"showSearch\\", \\"suffixIcon\\", \\"expandIcon\\", \\"notFoundContent\\", \\"popupClassName\\", \\"bordered\\", \\"dropdownRender\\"]);

        var mergedSize = customizeSize || size;
        var value = state.value,
            inputFocused = state.inputFocused;
        var isRtlLayout = direction === 'rtl';
        var prefixCls = getPrefixCls('cascader', customizePrefixCls);
        var inputPrefixCls = getPrefixCls('input', customizeInputPrefixCls);
        var sizeCls = classNames((_classNames = {}, _defineProperty(_classNames, \\"\\".concat(inputPrefixCls, \\"-lg\\"), mergedSize === 'large'), _defineProperty(_classNames, \\"\\".concat(inputPrefixCls, \\"-sm\\"), mergedSize === 'small'), _classNames));
        var clearIcon = allowClear && !disabled && value.length > 0 || state.inputValue ? /*#__PURE__*/React.createElement(CloseCircleFilled$1, {
          className: \\"\\".concat(prefixCls, \\"-picker-clear\\"),
          onClick: _this.clearSelection
        }) : null;
        var arrowCls = classNames((_classNames2 = {}, _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-picker-arrow\\"), true), _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-picker-arrow-expand\\"), state.popupVisible), _classNames2));
        var pickerCls = classNames(\\"\\".concat(prefixCls, \\"-picker\\"), (_classNames3 = {}, _defineProperty(_classNames3, \\"\\".concat(prefixCls, \\"-picker-rtl\\"), isRtlLayout), _defineProperty(_classNames3, \\"\\".concat(prefixCls, \\"-picker-with-value\\"), state.inputValue), _defineProperty(_classNames3, \\"\\".concat(prefixCls, \\"-picker-disabled\\"), disabled), _defineProperty(_classNames3, \\"\\".concat(prefixCls, \\"-picker-\\").concat(mergedSize), !!mergedSize), _defineProperty(_classNames3, \\"\\".concat(prefixCls, \\"-picker-show-search\\"), !!showSearch), _defineProperty(_classNames3, \\"\\".concat(prefixCls, \\"-picker-focused\\"), inputFocused), _defineProperty(_classNames3, \\"\\".concat(prefixCls, \\"-picker-borderless\\"), !bordered), _classNames3), className); // Fix bug of https://github.com/facebook/react/pull/5004
        // and https://fb.me/react-unknown-prop

        var inputProps = omit( // Not know why these props left
        otherProps, ['onChange', 'options', 'popupPlacement', 'transitionName', 'displayRender', 'onPopupVisibleChange', 'changeOnSelect', 'expandTrigger', 'popupVisible', 'getPopupContainer', 'loadData', 'filterOption', 'renderFilteredOption', 'sortFilteredOption', 'fieldNames']);
        var options = props.options;
        var names = getFilledFieldNames(_this.props);

        if (options && options.length > 0) {
          if (state.inputValue) {
            options = _this.generateFilteredOptions(prefixCls, renderEmpty);
          }
        } else {
          options = [getEmptyNode(renderEmpty, names, notFoundContent)];
        } // Dropdown menu should keep previous status until it is fully closed.


        if (!state.popupVisible) {
          options = _this.cachedOptions;
        } else {
          _this.cachedOptions = options;
        }

        var dropdownMenuColumnStyle = {};
        var isNotFound = (options || []).length === 1 && options[0].isEmptyNode;

        if (isNotFound) {
          dropdownMenuColumnStyle.height = 'auto'; // Height of one row.
        } // The default value of \`matchInputWidth\` is \`true\`


        var resultListMatchInputWidth = showSearch.matchInputWidth !== false;

        if (resultListMatchInputWidth && (state.inputValue || isNotFound) && _this.input) {
          dropdownMenuColumnStyle.width = _this.input.input.offsetWidth;
        }

        var inputIcon;

        if (suffixIcon) {
          inputIcon = replaceElement(suffixIcon, /*#__PURE__*/React.createElement(\\"span\\", {
            className: \\"\\".concat(prefixCls, \\"-picker-arrow\\")
          }, suffixIcon), function () {
            var _classNames4;

            return {
              className: classNames((_classNames4 = {}, _defineProperty(_classNames4, suffixIcon.props.className, suffixIcon.props.className), _defineProperty(_classNames4, \\"\\".concat(prefixCls, \\"-picker-arrow\\"), true), _classNames4))
            };
          });
        } else {
          inputIcon = /*#__PURE__*/React.createElement(DownOutlined$1, {
            className: arrowCls
          });
        }

        var input = children || /*#__PURE__*/React.createElement(\\"span\\", {
          style: style,
          className: pickerCls
        }, /*#__PURE__*/React.createElement(\\"span\\", {
          className: \\"\\".concat(prefixCls, \\"-picker-label\\")
        }, _this.getLabel()), /*#__PURE__*/React.createElement(Input, _extends({}, inputProps, {
          tabIndex: -1,
          ref: _this.saveInput,
          prefixCls: inputPrefixCls,
          placeholder: value && value.length > 0 ? undefined : placeholder,
          className: \\"\\".concat(prefixCls, \\"-input \\").concat(sizeCls),
          value: state.inputValue,
          disabled: disabled,
          readOnly: !showSearch,
          autoComplete: inputProps.autoComplete || 'off',
          onClick: showSearch ? _this.handleInputClick : undefined,
          onBlur: showSearch ? _this.handleInputBlur : undefined,
          onKeyDown: _this.handleKeyDown,
          onChange: showSearch ? _this.handleInputChange : undefined
        })), clearIcon, inputIcon);
        var expandIconNode;

        if (expandIcon) {
          expandIconNode = expandIcon;
        } else {
          expandIconNode = isRtlLayout ? /*#__PURE__*/React.createElement(LeftOutlined$1, null) : /*#__PURE__*/React.createElement(RightOutlined$1, null);
        }

        var loadingIcon = /*#__PURE__*/React.createElement(\\"span\\", {
          className: \\"\\".concat(prefixCls, \\"-menu-item-loading-icon\\")
        }, /*#__PURE__*/React.createElement(RedoOutlined$1, {
          spin: true
        }));
        var getPopupContainer = props.getPopupContainer || getContextPopupContainer;
        var rest = omit(props, ['inputIcon', 'expandIcon', 'loadingIcon', 'bordered', 'className']);
        var rcCascaderPopupClassName = classNames(popupClassName, (_classNames5 = {}, _defineProperty(_classNames5, \\"\\".concat(prefixCls, \\"-menu-\\").concat(direction), direction === 'rtl'), _defineProperty(_classNames5, \\"\\".concat(prefixCls, \\"-menu-empty\\"), options.length === 1 && options[0].value === 'ANT_CASCADER_NOT_FOUND'), _classNames5));
        return /*#__PURE__*/React.createElement(RcCascader, _extends({}, rest, {
          prefixCls: prefixCls,
          getPopupContainer: getPopupContainer,
          options: options,
          value: value,
          popupVisible: state.popupVisible,
          onPopupVisibleChange: _this.handlePopupVisibleChange,
          onChange: _this.handleChange,
          dropdownMenuColumnStyle: dropdownMenuColumnStyle,
          expandIcon: expandIconNode,
          loadingIcon: loadingIcon,
          popupClassName: rcCascaderPopupClassName,
          popupPlacement: _this.getPopupPlacement(direction) // rc-cascader should update ts define to fix this case
          ,
          dropdownRender: dropdownRender
        }), input);
      });
    };

    _this.state = {
      value: props.value || props.defaultValue || [],
      inputValue: '',
      inputFocused: false,
      popupVisible: props.popupVisible,
      flattenOptions: props.showSearch ? flattenTree(props.options, props) : undefined,
      prevProps: props
    };
    return _this;
  }

  _createClass(Cascader, [{
    key: \\"componentWillUnmount\\",
    value: function componentWillUnmount() {
      if (this.clearSelectionTimeout) {
        clearTimeout(this.clearSelectionTimeout);
      }
    }
  }, {
    key: \\"getLabel\\",
    value: function getLabel() {
      var _this$props = this.props,
          options = _this$props.options,
          _this$props$displayRe = _this$props.displayRender,
          displayRender = _this$props$displayRe === void 0 ? defaultDisplayRender : _this$props$displayRe;
      var names = getFilledFieldNames(this.props);
      var value = this.state.value;
      var unwrappedValue = Array.isArray(value[0]) ? value[0] : value;
      var selectedOptions = arrayTreeFilter(options, function (o, level) {
        return o[names.value] === unwrappedValue[level];
      }, {
        childrenKeyName: names.children
      });
      var label = selectedOptions.length ? selectedOptions.map(function (o) {
        return o[names.label];
      }) : value;
      return displayRender(label, selectedOptions);
    }
  }, {
    key: \\"generateFilteredOptions\\",
    value: function generateFilteredOptions(prefixCls, renderEmpty) {
      var _this2 = this;

      var _this$props2 = this.props,
          showSearch = _this$props2.showSearch,
          notFoundContent = _this$props2.notFoundContent;
      var names = getFilledFieldNames(this.props);
      var _showSearch$filter = showSearch.filter,
          filter = _showSearch$filter === void 0 ? defaultFilterOption : _showSearch$filter,
          _showSearch$render = showSearch.render,
          render = _showSearch$render === void 0 ? defaultRenderFilteredOption : _showSearch$render,
          _showSearch$sort = showSearch.sort,
          sort = _showSearch$sort === void 0 ? defaultSortFilteredOption : _showSearch$sort,
          _showSearch$limit = showSearch.limit,
          limit = _showSearch$limit === void 0 ? defaultLimit : _showSearch$limit;
      var _this$state2 = this.state,
          _this$state2$flattenO = _this$state2.flattenOptions,
          flattenOptions = _this$state2$flattenO === void 0 ? [] : _this$state2$flattenO,
          inputValue = _this$state2.inputValue; // Limit the filter if needed

      var filtered;

      if (limit > 0) {
        filtered = [];
        var matchCount = 0; // Perf optimization to filter items only below the limit

        flattenOptions.some(function (path) {
          var match = filter(_this2.state.inputValue, path, names);

          if (match) {
            filtered.push(path);
            matchCount += 1;
          }

          return matchCount >= limit;
        });
      } else {
        devWarning(typeof limit !== 'number', 'Cascader', \\"'limit' of showSearch should be positive number or false.\\");
        filtered = flattenOptions.filter(function (path) {
          return filter(_this2.state.inputValue, path, names);
        });
      }

      filtered = filtered.sort(function (a, b) {
        return sort(a, b, inputValue, names);
      });

      if (filtered.length > 0) {
        // Fix issue: https://github.com/ant-design/ant-design/issues/26554
        var field = names.value === names.label ? keepFilteredValueField : names.value;
        return filtered.map(function (path) {
          var _ref4;

          return _ref4 = {
            __IS_FILTERED_OPTION: true,
            path: path
          }, _defineProperty(_ref4, field, path.map(function (o) {
            return o[names.value];
          })), _defineProperty(_ref4, names.label, render(inputValue, path, prefixCls, names)), _defineProperty(_ref4, \\"disabled\\", path.some(function (o) {
            return !!o.disabled;
          })), _defineProperty(_ref4, \\"isEmptyNode\\", true), _ref4;
        });
      }

      return [getEmptyNode(renderEmpty, names, notFoundContent)];
    }
  }, {
    key: \\"focus\\",
    value: function focus() {
      this.input.focus();
    }
  }, {
    key: \\"blur\\",
    value: function blur() {
      this.input.blur();
    }
  }, {
    key: \\"getPopupPlacement\\",
    value: function getPopupPlacement() {
      var direction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'ltr';
      var popupPlacement = this.props.popupPlacement;

      if (popupPlacement !== undefined) {
        return popupPlacement;
      }

      return direction === 'rtl' ? 'bottomRight' : 'bottomLeft';
    }
  }, {
    key: \\"render\\",
    value: function render() {
      var _this3 = this;

      return /*#__PURE__*/React.createElement(ConfigConsumer, null, function (configArgument) {
        return /*#__PURE__*/React.createElement(LocaleReceiver, null, function (locale) {
          return _this3.renderCascader(configArgument, locale);
        });
      });
    }
  }], [{
    key: \\"getDerivedStateFromProps\\",
    value: function getDerivedStateFromProps(nextProps, _ref5) {
      var prevProps = _ref5.prevProps;
      var newState = {
        prevProps: nextProps
      };

      if ('value' in nextProps) {
        newState.value = nextProps.value || [];
      }

      if ('popupVisible' in nextProps) {
        newState.popupVisible = nextProps.popupVisible;
      }

      if (nextProps.showSearch && prevProps.options !== nextProps.options) {
        newState.flattenOptions = flattenTree(nextProps.options, nextProps);
      }

      if (\\"production\\" !== 'production' && nextProps.options) {
        warningValueNotExist(nextProps.options, getFieldNames(nextProps));
      }

      return newState;
    }
  }]);

  return Cascader;
}(React.Component);

Cascader.defaultProps = {
  transitionName: 'slide-up',
  options: [],
  disabled: false,
  allowClear: true,
  bordered: true
};

var __rest$G = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var GroupContext = /*#__PURE__*/React.createContext(null);

var CheckboxGroup = function CheckboxGroup(_a) {
  var defaultValue = _a.defaultValue,
      children = _a.children,
      _a$options = _a.options,
      options = _a$options === void 0 ? [] : _a$options,
      customizePrefixCls = _a.prefixCls,
      className = _a.className,
      style = _a.style,
      onChange = _a.onChange,
      restProps = __rest$G(_a, [\\"defaultValue\\", \\"children\\", \\"options\\", \\"prefixCls\\", \\"className\\", \\"style\\", \\"onChange\\"]);

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  var _React$useState = React.useState(restProps.value || defaultValue || []),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      value = _React$useState2[0],
      setValue = _React$useState2[1];

  var _React$useState3 = React.useState([]),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      registeredValues = _React$useState4[0],
      setRegisteredValues = _React$useState4[1];

  React.useEffect(function () {
    if ('value' in restProps) {
      setValue(restProps.value || []);
    }
  }, [restProps.value]);

  var getOptions = function getOptions() {
    return options.map(function (option) {
      if (typeof option === 'string') {
        return {
          label: option,
          value: option
        };
      }

      return option;
    });
  };

  var cancelValue = function cancelValue(val) {
    setRegisteredValues(function (prevValues) {
      return prevValues.filter(function (v) {
        return v !== val;
      });
    });
  };

  var registerValue = function registerValue(val) {
    setRegisteredValues(function (prevValues) {
      return [].concat(_toConsumableArray(prevValues), [val]);
    });
  };

  var toggleOption = function toggleOption(option) {
    var optionIndex = value.indexOf(option.value);

    var newValue = _toConsumableArray(value);

    if (optionIndex === -1) {
      newValue.push(option.value);
    } else {
      newValue.splice(optionIndex, 1);
    }

    if (!('value' in restProps)) {
      setValue(newValue);
    }

    if (onChange) {
      var opts = getOptions();
      onChange(newValue.filter(function (val) {
        return registeredValues.indexOf(val) !== -1;
      }).sort(function (a, b) {
        var indexA = opts.findIndex(function (opt) {
          return opt.value === a;
        });
        var indexB = opts.findIndex(function (opt) {
          return opt.value === b;
        });
        return indexA - indexB;
      }));
    }
  };

  var prefixCls = getPrefixCls('checkbox', customizePrefixCls);
  var groupPrefixCls = \\"\\".concat(prefixCls, \\"-group\\");
  var domProps = omit(restProps, ['value', 'disabled']);

  if (options && options.length > 0) {
    children = getOptions().map(function (option) {
      return /*#__PURE__*/React.createElement(Checkbox$1, {
        prefixCls: prefixCls,
        key: option.value.toString(),
        disabled: 'disabled' in option ? option.disabled : restProps.disabled,
        value: option.value,
        checked: value.indexOf(option.value) !== -1,
        onChange: option.onChange,
        className: \\"\\".concat(groupPrefixCls, \\"-item\\"),
        style: option.style
      }, option.label);
    });
  }

  var context = {
    toggleOption: toggleOption,
    value: value,
    disabled: restProps.disabled,
    name: restProps.name,
    // https://github.com/ant-design/ant-design/issues/16376
    registerValue: registerValue,
    cancelValue: cancelValue
  };
  var classString = classNames(groupPrefixCls, _defineProperty({}, \\"\\".concat(groupPrefixCls, \\"-rtl\\"), direction === 'rtl'), className);
  return /*#__PURE__*/React.createElement(\\"div\\", _extends({
    className: classString,
    style: style
  }, domProps), /*#__PURE__*/React.createElement(GroupContext.Provider, {
    value: context
  }, children));
};

var Group = /*#__PURE__*/React.memo(CheckboxGroup);

var __rest$F = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var InternalCheckbox = function InternalCheckbox(_a, ref) {
  var _classNames;

  var customizePrefixCls = _a.prefixCls,
      className = _a.className,
      children = _a.children,
      _a$indeterminate = _a.indeterminate,
      indeterminate = _a$indeterminate === void 0 ? false : _a$indeterminate,
      style = _a.style,
      onMouseEnter = _a.onMouseEnter,
      onMouseLeave = _a.onMouseLeave,
      _a$skipGroup = _a.skipGroup,
      skipGroup = _a$skipGroup === void 0 ? false : _a$skipGroup,
      restProps = __rest$F(_a, [\\"prefixCls\\", \\"className\\", \\"children\\", \\"indeterminate\\", \\"style\\", \\"onMouseEnter\\", \\"onMouseLeave\\", \\"skipGroup\\"]);

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  var checkboxGroup = React.useContext(GroupContext);
  var prevValue = React.useRef(restProps.value);
  React.useEffect(function () {
    checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.registerValue(restProps.value);
    devWarning('checked' in restProps || !!checkboxGroup || !('value' in restProps), 'Checkbox', '\`value\` is not a valid prop, do you mean \`checked\`?');
  }, []);
  React.useEffect(function () {
    if (skipGroup) {
      return;
    }

    if (restProps.value !== prevValue.current) {
      checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.cancelValue(prevValue.current);
      checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.registerValue(restProps.value);
    }

    return function () {
      return checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.cancelValue(restProps.value);
    };
  }, [restProps.value]);
  var prefixCls = getPrefixCls('checkbox', customizePrefixCls);

  var checkboxProps = _extends({}, restProps);

  if (checkboxGroup && !skipGroup) {
    checkboxProps.onChange = function () {
      if (restProps.onChange) {
        restProps.onChange.apply(restProps, arguments);
      }

      if (checkboxGroup.toggleOption) {
        checkboxGroup.toggleOption({
          label: children,
          value: restProps.value
        });
      }
    };

    checkboxProps.name = checkboxGroup.name;
    checkboxProps.checked = checkboxGroup.value.indexOf(restProps.value) !== -1;
    checkboxProps.disabled = restProps.disabled || checkboxGroup.disabled;
  }

  var classString = classNames((_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-wrapper\\"), true), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-wrapper-checked\\"), checkboxProps.checked), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-wrapper-disabled\\"), checkboxProps.disabled), _classNames), className);
  var checkboxClass = classNames(_defineProperty({}, \\"\\".concat(prefixCls, \\"-indeterminate\\"), indeterminate));
  return (
    /*#__PURE__*/
    // eslint-disable-next-line jsx-a11y/label-has-associated-control
    React.createElement(\\"label\\", {
      className: classString,
      style: style,
      onMouseEnter: onMouseEnter,
      onMouseLeave: onMouseLeave
    }, /*#__PURE__*/React.createElement(RcCheckbox, _extends({}, checkboxProps, {
      prefixCls: prefixCls,
      className: checkboxClass,
      ref: ref
    })), children !== undefined && /*#__PURE__*/React.createElement(\\"span\\", null, children))
  );
};

var Checkbox$1 = /*#__PURE__*/React.forwardRef(InternalCheckbox);
Checkbox$1.displayName = 'Checkbox';

var Checkbox = Checkbox$1;
Checkbox.Group = Group;
Checkbox.__ANT_CHECKBOX = true;

var __rest$E = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var Comment = function Comment(_a) {
  var actions = _a.actions,
      author = _a.author,
      avatar = _a.avatar,
      children = _a.children,
      className = _a.className,
      content = _a.content,
      customizePrefixCls = _a.prefixCls,
      datetime = _a.datetime,
      otherProps = __rest$E(_a, [\\"actions\\", \\"author\\", \\"avatar\\", \\"children\\", \\"className\\", \\"content\\", \\"prefixCls\\", \\"datetime\\"]);

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  var renderNested = function renderNested(prefixCls, nestedChildren) {
    return /*#__PURE__*/React.createElement(\\"div\\", {
      className: classNames(\\"\\".concat(prefixCls, \\"-nested\\"))
    }, nestedChildren);
  };

  var prefixCls = getPrefixCls('comment', customizePrefixCls);
  var avatarDom = avatar ? /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-avatar\\")
  }, typeof avatar === 'string' ? /*#__PURE__*/React.createElement(\\"img\\", {
    src: avatar,
    alt: \\"comment-avatar\\"
  }) : avatar) : null;
  var actionDom = actions && actions.length ? /*#__PURE__*/React.createElement(\\"ul\\", {
    className: \\"\\".concat(prefixCls, \\"-actions\\")
  }, actions.map(function (action, index) {
    return /*#__PURE__*/React.createElement(\\"li\\", {
      key: \\"action-\\".concat(index)
    }, action) // eslint-disable-line react/no-array-index-key
    ;
  })) : null;
  var authorContent = (author || datetime) && /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-content-author\\")
  }, author && /*#__PURE__*/React.createElement(\\"span\\", {
    className: \\"\\".concat(prefixCls, \\"-content-author-name\\")
  }, author), datetime && /*#__PURE__*/React.createElement(\\"span\\", {
    className: \\"\\".concat(prefixCls, \\"-content-author-time\\")
  }, datetime));
  var contentDom = /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-content\\")
  }, authorContent, /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-content-detail\\")
  }, content), actionDom);
  var cls = classNames(prefixCls, _defineProperty({}, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), className);
  return /*#__PURE__*/React.createElement(\\"div\\", _extends({}, otherProps, {
    className: cls
  }), /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-inner\\")
  }, avatarDom, contentDom), children ? renderNested(prefixCls, children) : null);
};

function PickerButton(props) {
  return /*#__PURE__*/React.createElement(Button$1, _extends({
    size: \\"small\\",
    type: \\"primary\\"
  }, props));
}

var __rest$D = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var CheckableTag = function CheckableTag(_a) {
  var _classNames;

  var customizePrefixCls = _a.prefixCls,
      className = _a.className,
      checked = _a.checked,
      onChange = _a.onChange,
      onClick = _a.onClick,
      restProps = __rest$D(_a, [\\"prefixCls\\", \\"className\\", \\"checked\\", \\"onChange\\", \\"onClick\\"]);

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls;

  var handleClick = function handleClick(e) {
    if (onChange) {
      onChange(!checked);
    }

    if (onClick) {
      onClick(e);
    }
  };

  var prefixCls = getPrefixCls('tag', customizePrefixCls);
  var cls = classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-checkable\\"), true), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-checkable-checked\\"), checked), _classNames), className);
  return /*#__PURE__*/React.createElement(\\"span\\", _extends({}, restProps, {
    className: cls,
    onClick: handleClick
  }));
};

var __rest$C = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var PresetColorRegex = new RegExp(\\"^(\\".concat(PresetColorTypes.join('|'), \\")(-inverse)?$\\"));
var PresetStatusColorRegex = new RegExp(\\"^(\\".concat(PresetStatusColorTypes.join('|'), \\")$\\"));

var InternalTag = function InternalTag(_a, ref) {
  var _classNames;

  var customizePrefixCls = _a.prefixCls,
      className = _a.className,
      style = _a.style,
      children = _a.children,
      icon = _a.icon,
      color = _a.color,
      onClose = _a.onClose,
      closeIcon = _a.closeIcon,
      _a$closable = _a.closable,
      closable = _a$closable === void 0 ? false : _a$closable,
      props = __rest$C(_a, [\\"prefixCls\\", \\"className\\", \\"style\\", \\"children\\", \\"icon\\", \\"color\\", \\"onClose\\", \\"closeIcon\\", \\"closable\\"]);

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  var _React$useState = React.useState(true),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      visible = _React$useState2[0],
      setVisible = _React$useState2[1];

  React.useEffect(function () {
    if ('visible' in props) {
      setVisible(props.visible);
    }
  }, [props.visible]);

  var isPresetColor = function isPresetColor() {
    if (!color) {
      return false;
    }

    return PresetColorRegex.test(color) || PresetStatusColorRegex.test(color);
  };

  var tagStyle = _extends({
    backgroundColor: color && !isPresetColor() ? color : undefined
  }, style);

  var presetColor = isPresetColor();
  var prefixCls = getPrefixCls('tag', customizePrefixCls);
  var tagClassName = classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-\\").concat(color), presetColor), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-has-color\\"), color && !presetColor), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-hidden\\"), !visible), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), _classNames), className);

  var handleCloseClick = function handleCloseClick(e) {
    e.stopPropagation();

    if (onClose) {
      onClose(e);
    }

    if (e.defaultPrevented) {
      return;
    }

    if (!('visible' in props)) {
      setVisible(false);
    }
  };

  var renderCloseIcon = function renderCloseIcon() {
    if (closable) {
      return closeIcon ? /*#__PURE__*/React.createElement(\\"span\\", {
        className: \\"\\".concat(prefixCls, \\"-close-icon\\"),
        onClick: handleCloseClick
      }, closeIcon) : /*#__PURE__*/React.createElement(CloseOutlined$1, {
        className: \\"\\".concat(prefixCls, \\"-close-icon\\"),
        onClick: handleCloseClick
      });
    }

    return null;
  };

  var isNeedWave = 'onClick' in props || children && children.type === 'a';
  var tagProps = omit(props, ['visible']);
  var iconNode = icon || null;
  var kids = iconNode ? /*#__PURE__*/React.createElement(React.Fragment, null, iconNode, /*#__PURE__*/React.createElement(\\"span\\", null, children)) : children;
  var tagNode = /*#__PURE__*/React.createElement(\\"span\\", _extends({}, tagProps, {
    ref: ref,
    className: tagClassName,
    style: tagStyle
  }), kids, renderCloseIcon());
  return isNeedWave ? /*#__PURE__*/React.createElement(Wave, null, tagNode) : tagNode;
};

var Tag = /*#__PURE__*/React.forwardRef(InternalTag);
Tag.displayName = 'Tag';
Tag.CheckableTag = CheckableTag;

function PickerTag(props) {
  return /*#__PURE__*/React.createElement(Tag, _extends({
    color: \\"blue\\"
  }, props));
}

// This icon file is generated automatically.
var CalendarOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z\\" } }] }, \\"name\\": \\"calendar\\", \\"theme\\": \\"outlined\\" };

var CalendarOutlined = function CalendarOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: CalendarOutlined$2
  }));
};

CalendarOutlined.displayName = 'CalendarOutlined';
var CalendarOutlined$1 = /*#__PURE__*/React.forwardRef(CalendarOutlined);

// This icon file is generated automatically.
var ClockCircleOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z\\" } }, { \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M686.7 638.6L544.1 535.5V288c0-4.4-3.6-8-8-8H488c-4.4 0-8 3.6-8 8v275.4c0 2.6 1.2 5 3.3 6.5l165.4 120.6c3.6 2.6 8.6 1.8 11.2-1.7l28.6-39c2.6-3.7 1.8-8.7-1.8-11.2z\\" } }] }, \\"name\\": \\"clock-circle\\", \\"theme\\": \\"outlined\\" };

var ClockCircleOutlined = function ClockCircleOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: ClockCircleOutlined$2
  }));
};

ClockCircleOutlined.displayName = 'ClockCircleOutlined';
var ClockCircleOutlined$1 = /*#__PURE__*/React.forwardRef(ClockCircleOutlined);

function getPlaceholder(picker, locale, customizePlaceholder) {
  if (customizePlaceholder !== undefined) {
    return customizePlaceholder;
  }

  if (picker === 'year' && locale.lang.yearPlaceholder) {
    return locale.lang.yearPlaceholder;
  }

  if (picker === 'quarter' && locale.lang.quarterPlaceholder) {
    return locale.lang.quarterPlaceholder;
  }

  if (picker === 'month' && locale.lang.monthPlaceholder) {
    return locale.lang.monthPlaceholder;
  }

  if (picker === 'week' && locale.lang.weekPlaceholder) {
    return locale.lang.weekPlaceholder;
  }

  if (picker === 'time' && locale.timePickerLocale.placeholder) {
    return locale.timePickerLocale.placeholder;
  }

  return locale.lang.placeholder;
}
function getRangePlaceholder(picker, locale, customizePlaceholder) {
  if (customizePlaceholder !== undefined) {
    return customizePlaceholder;
  }

  if (picker === 'year' && locale.lang.yearPlaceholder) {
    return locale.lang.rangeYearPlaceholder;
  }

  if (picker === 'month' && locale.lang.monthPlaceholder) {
    return locale.lang.rangeMonthPlaceholder;
  }

  if (picker === 'week' && locale.lang.weekPlaceholder) {
    return locale.lang.rangeWeekPlaceholder;
  }

  if (picker === 'time' && locale.timePickerLocale.placeholder) {
    return locale.timePickerLocale.rangePlaceholder;
  }

  return locale.lang.rangePlaceholder;
}

var __rest$B = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
function generatePicker$1(generateConfig) {
  function getPicker(picker, displayName) {
    var Picker = /*#__PURE__*/function (_React$Component) {
      _inherits(Picker, _React$Component);

      var _super = _createSuper(Picker);

      function Picker(props) {
        var _this;

        _classCallCheck(this, Picker);

        _this = _super.call(this, props);
        _this.pickerRef = /*#__PURE__*/React.createRef();

        _this.focus = function () {
          if (_this.pickerRef.current) {
            _this.pickerRef.current.focus();
          }
        };

        _this.blur = function () {
          if (_this.pickerRef.current) {
            _this.pickerRef.current.blur();
          }
        };

        _this.getDefaultLocale = function () {
          var locale$1 = _this.props.locale;

          var result = _extends(_extends({}, locale), locale$1);

          result.lang = _extends(_extends({}, result.lang), (locale$1 || {}).lang);
          return result;
        };

        _this.renderPicker = function (locale) {
          var _this$context = _this.context,
              getPrefixCls = _this$context.getPrefixCls,
              direction = _this$context.direction,
              getPopupContainer = _this$context.getPopupContainer;

          var _a = _this.props,
              customizePrefixCls = _a.prefixCls,
              customizeGetPopupContainer = _a.getPopupContainer,
              className = _a.className,
              customizeSize = _a.size,
              _a$bordered = _a.bordered,
              bordered = _a$bordered === void 0 ? true : _a$bordered,
              placeholder = _a.placeholder,
              restProps = __rest$B(_a, [\\"prefixCls\\", \\"getPopupContainer\\", \\"className\\", \\"size\\", \\"bordered\\", \\"placeholder\\"]);

          var _this$props = _this.props,
              format = _this$props.format,
              showTime = _this$props.showTime;
          var prefixCls = getPrefixCls('picker', customizePrefixCls);
          var additionalProps = {
            showToday: true
          };
          var additionalOverrideProps = {};

          if (picker) {
            additionalOverrideProps.picker = picker;
          }

          var mergedPicker = picker || _this.props.picker;
          additionalOverrideProps = _extends(_extends(_extends({}, additionalOverrideProps), showTime ? getTimeProps(_extends({
            format: format,
            picker: mergedPicker
          }, showTime)) : {}), mergedPicker === 'time' ? getTimeProps(_extends(_extends({
            format: format
          }, _this.props), {
            picker: mergedPicker
          })) : {});
          return /*#__PURE__*/React.createElement(SizeContext$1.Consumer, null, function (size) {
            var _classNames;

            var mergedSize = customizeSize || size;
            return /*#__PURE__*/React.createElement(RCPicker, _extends({
              ref: _this.pickerRef,
              placeholder: getPlaceholder(mergedPicker, locale, placeholder),
              suffixIcon: mergedPicker === 'time' ? /*#__PURE__*/React.createElement(ClockCircleOutlined$1, null) : /*#__PURE__*/React.createElement(CalendarOutlined$1, null),
              clearIcon: /*#__PURE__*/React.createElement(CloseCircleFilled$1, null),
              allowClear: true,
              transitionName: \\"slide-up\\"
            }, additionalProps, restProps, additionalOverrideProps, {
              locale: locale.lang,
              className: classNames((_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-\\").concat(mergedSize), mergedSize), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-borderless\\"), !bordered), _classNames), className),
              prefixCls: prefixCls,
              getPopupContainer: customizeGetPopupContainer || getPopupContainer,
              generateConfig: generateConfig,
              prevIcon: /*#__PURE__*/React.createElement(\\"span\\", {
                className: \\"\\".concat(prefixCls, \\"-prev-icon\\")
              }),
              nextIcon: /*#__PURE__*/React.createElement(\\"span\\", {
                className: \\"\\".concat(prefixCls, \\"-next-icon\\")
              }),
              superPrevIcon: /*#__PURE__*/React.createElement(\\"span\\", {
                className: \\"\\".concat(prefixCls, \\"-super-prev-icon\\")
              }),
              superNextIcon: /*#__PURE__*/React.createElement(\\"span\\", {
                className: \\"\\".concat(prefixCls, \\"-super-next-icon\\")
              }),
              components: Components,
              direction: direction
            }));
          });
        };

        devWarning(picker !== 'quarter', displayName, \\"DatePicker.\\".concat(displayName, \\" is legacy usage. Please use DatePicker[picker='\\").concat(picker, \\"'] directly.\\"));
        return _this;
      }

      _createClass(Picker, [{
        key: \\"render\\",
        value: function render() {
          return /*#__PURE__*/React.createElement(LocaleReceiver, {
            componentName: \\"DatePicker\\",
            defaultLocale: this.getDefaultLocale
          }, this.renderPicker);
        }
      }]);

      return Picker;
    }(React.Component);

    Picker.contextType = ConfigContext;

    if (displayName) {
      Picker.displayName = displayName;
    }

    return Picker;
  }

  var DatePicker = getPicker();
  var WeekPicker = getPicker('week', 'WeekPicker');
  var MonthPicker = getPicker('month', 'MonthPicker');
  var YearPicker = getPicker('year', 'YearPicker');
  var TimePicker = getPicker('time', 'TimePicker');
  var QuarterPicker = getPicker('quarter', 'QuarterPicker');
  return {
    DatePicker: DatePicker,
    WeekPicker: WeekPicker,
    MonthPicker: MonthPicker,
    YearPicker: YearPicker,
    TimePicker: TimePicker,
    QuarterPicker: QuarterPicker
  };
}

// This icon file is generated automatically.
var SwapRightOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"0 0 1024 1024\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M873.1 596.2l-164-208A32 32 0 00684 376h-64.8c-6.7 0-10.4 7.7-6.3 13l144.3 183H152c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h695.9c26.8 0 41.7-30.8 25.2-51.8z\\" } }] }, \\"name\\": \\"swap-right\\", \\"theme\\": \\"outlined\\" };

var SwapRightOutlined = function SwapRightOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: SwapRightOutlined$2
  }));
};

SwapRightOutlined.displayName = 'SwapRightOutlined';
var SwapRightOutlined$1 = /*#__PURE__*/React.forwardRef(SwapRightOutlined);

var __rest$A = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
function generateRangePicker(generateConfig) {
  var RangePicker = /*#__PURE__*/function (_React$Component) {
    _inherits(RangePicker, _React$Component);

    var _super = _createSuper(RangePicker);

    function RangePicker() {
      var _this;

      _classCallCheck(this, RangePicker);

      _this = _super.apply(this, arguments);
      _this.pickerRef = /*#__PURE__*/React.createRef();

      _this.focus = function () {
        if (_this.pickerRef.current) {
          _this.pickerRef.current.focus();
        }
      };

      _this.blur = function () {
        if (_this.pickerRef.current) {
          _this.pickerRef.current.blur();
        }
      };

      _this.getDefaultLocale = function () {
        var locale$1 = _this.props.locale;

        var result = _extends(_extends({}, locale), locale$1);

        result.lang = _extends(_extends({}, result.lang), (locale$1 || {}).lang);
        return result;
      };

      _this.renderPicker = function (locale) {
        var _this$context = _this.context,
            getPrefixCls = _this$context.getPrefixCls,
            direction = _this$context.direction,
            getPopupContainer = _this$context.getPopupContainer;

        var _a = _this.props,
            customizePrefixCls = _a.prefixCls,
            customGetPopupContainer = _a.getPopupContainer,
            className = _a.className,
            customizeSize = _a.size,
            _a$bordered = _a.bordered,
            bordered = _a$bordered === void 0 ? true : _a$bordered,
            placeholder = _a.placeholder,
            restProps = __rest$A(_a, [\\"prefixCls\\", \\"getPopupContainer\\", \\"className\\", \\"size\\", \\"bordered\\", \\"placeholder\\"]);

        var _this$props = _this.props,
            format = _this$props.format,
            showTime = _this$props.showTime,
            picker = _this$props.picker;
        var prefixCls = getPrefixCls('picker', customizePrefixCls);
        var additionalOverrideProps = {};
        additionalOverrideProps = _extends(_extends(_extends({}, additionalOverrideProps), showTime ? getTimeProps(_extends({
          format: format,
          picker: picker
        }, showTime)) : {}), picker === 'time' ? getTimeProps(_extends(_extends({
          format: format
        }, _this.props), {
          picker: picker
        })) : {});
        return /*#__PURE__*/React.createElement(SizeContext$1.Consumer, null, function (size) {
          var _classNames;

          var mergedSize = customizeSize || size;
          return /*#__PURE__*/React.createElement(RangePicker$1, _extends({
            separator: /*#__PURE__*/React.createElement(\\"span\\", {
              \\"aria-label\\": \\"to\\",
              className: \\"\\".concat(prefixCls, \\"-separator\\")
            }, /*#__PURE__*/React.createElement(SwapRightOutlined$1, null)),
            ref: _this.pickerRef,
            placeholder: getRangePlaceholder(picker, locale, placeholder),
            suffixIcon: picker === 'time' ? /*#__PURE__*/React.createElement(ClockCircleOutlined$1, null) : /*#__PURE__*/React.createElement(CalendarOutlined$1, null),
            clearIcon: /*#__PURE__*/React.createElement(CloseCircleFilled$1, null),
            allowClear: true,
            transitionName: \\"slide-up\\"
          }, restProps, additionalOverrideProps, {
            className: classNames((_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-\\").concat(mergedSize), mergedSize), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-borderless\\"), !bordered), _classNames), className),
            locale: locale.lang,
            prefixCls: prefixCls,
            getPopupContainer: customGetPopupContainer || getPopupContainer,
            generateConfig: generateConfig,
            prevIcon: /*#__PURE__*/React.createElement(\\"span\\", {
              className: \\"\\".concat(prefixCls, \\"-prev-icon\\")
            }),
            nextIcon: /*#__PURE__*/React.createElement(\\"span\\", {
              className: \\"\\".concat(prefixCls, \\"-next-icon\\")
            }),
            superPrevIcon: /*#__PURE__*/React.createElement(\\"span\\", {
              className: \\"\\".concat(prefixCls, \\"-super-prev-icon\\")
            }),
            superNextIcon: /*#__PURE__*/React.createElement(\\"span\\", {
              className: \\"\\".concat(prefixCls, \\"-super-next-icon\\")
            }),
            components: Components,
            direction: direction
          }));
        });
      };

      return _this;
    }

    _createClass(RangePicker, [{
      key: \\"render\\",
      value: function render() {
        return /*#__PURE__*/React.createElement(LocaleReceiver, {
          componentName: \\"DatePicker\\",
          defaultLocale: this.getDefaultLocale
        }, this.renderPicker);
      }
    }]);

    return RangePicker;
  }(React.Component);

  RangePicker.contextType = ConfigContext;
  return RangePicker;
}

var Components = {
  button: PickerButton,
  rangeItem: PickerTag
};

function toArray$1(list) {
  if (!list) {
    return [];
  }

  return Array.isArray(list) ? list : [list];
}

function getTimeProps(props) {
  var format = props.format,
      picker = props.picker,
      showHour = props.showHour,
      showMinute = props.showMinute,
      showSecond = props.showSecond,
      use12Hours = props.use12Hours;
  var firstFormat = toArray$1(format)[0];

  var showTimeObj = _extends({}, props);

  if (firstFormat && typeof firstFormat === 'string') {
    if (!firstFormat.includes('s') && showSecond === undefined) {
      showTimeObj.showSecond = false;
    }

    if (!firstFormat.includes('m') && showMinute === undefined) {
      showTimeObj.showMinute = false;
    }

    if (!firstFormat.includes('H') && !firstFormat.includes('h') && showHour === undefined) {
      showTimeObj.showHour = false;
    }

    if ((firstFormat.includes('a') || firstFormat.includes('A')) && use12Hours === undefined) {
      showTimeObj.use12Hours = true;
    }
  }

  if (picker === 'time') {
    return showTimeObj;
  }

  if (typeof firstFormat === 'function') {
    // format of showTime should use default when format is custom format function
    delete showTimeObj.format;
  }

  return {
    showTime: showTimeObj
  };
}

function generatePicker(generateConfig) {
  // =========================== Picker ===========================
  var _generateSinglePicker = generatePicker$1(generateConfig),
      DatePicker = _generateSinglePicker.DatePicker,
      WeekPicker = _generateSinglePicker.WeekPicker,
      MonthPicker = _generateSinglePicker.MonthPicker,
      YearPicker = _generateSinglePicker.YearPicker,
      TimePicker = _generateSinglePicker.TimePicker,
      QuarterPicker = _generateSinglePicker.QuarterPicker; // ======================== Range Picker ========================


  var RangePicker = generateRangePicker(generateConfig);
  var MergedDatePicker = DatePicker;
  MergedDatePicker.WeekPicker = WeekPicker;
  MergedDatePicker.MonthPicker = MonthPicker;
  MergedDatePicker.YearPicker = YearPicker;
  MergedDatePicker.RangePicker = RangePicker;
  MergedDatePicker.TimePicker = TimePicker;
  MergedDatePicker.QuarterPicker = QuarterPicker;
  return MergedDatePicker;
}

var DatePicker = generatePicker(momentGenerateConfig);

function notEmpty(val) {
  return val !== undefined && val !== null;
}

var Cell = function Cell(_ref) {
  var itemPrefixCls = _ref.itemPrefixCls,
      component = _ref.component,
      span = _ref.span,
      className = _ref.className,
      style = _ref.style,
      labelStyle = _ref.labelStyle,
      contentStyle = _ref.contentStyle,
      bordered = _ref.bordered,
      label = _ref.label,
      content = _ref.content,
      colon = _ref.colon;
  var Component = component;

  if (bordered) {
    var _classNames;

    return /*#__PURE__*/React.createElement(Component, {
      className: classNames((_classNames = {}, _defineProperty(_classNames, \\"\\".concat(itemPrefixCls, \\"-item-label\\"), notEmpty(label)), _defineProperty(_classNames, \\"\\".concat(itemPrefixCls, \\"-item-content\\"), notEmpty(content)), _classNames), className),
      style: style,
      colSpan: span
    }, notEmpty(label) ? label : content);
  }

  return /*#__PURE__*/React.createElement(Component, {
    className: classNames(\\"\\".concat(itemPrefixCls, \\"-item\\"), className),
    style: style,
    colSpan: span
  }, /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(itemPrefixCls, \\"-item-container\\")
  }, label && /*#__PURE__*/React.createElement(\\"span\\", {
    className: classNames(\\"\\".concat(itemPrefixCls, \\"-item-label\\"), _defineProperty({}, \\"\\".concat(itemPrefixCls, \\"-item-no-colon\\"), !colon)),
    style: labelStyle
  }, label), content && /*#__PURE__*/React.createElement(\\"span\\", {
    className: classNames(\\"\\".concat(itemPrefixCls, \\"-item-content\\")),
    style: contentStyle
  }, content)));
};

function renderCells(items, _ref, _ref2) {
  var colon = _ref.colon,
      prefixCls = _ref.prefixCls,
      bordered = _ref.bordered;
  var component = _ref2.component,
      type = _ref2.type,
      showLabel = _ref2.showLabel,
      showContent = _ref2.showContent,
      rootLabelStyle = _ref2.labelStyle,
      rootContentStyle = _ref2.contentStyle;
  return items.map(function (_ref3, index) {
    var _ref3$props = _ref3.props,
        label = _ref3$props.label,
        children = _ref3$props.children,
        _ref3$props$prefixCls = _ref3$props.prefixCls,
        itemPrefixCls = _ref3$props$prefixCls === void 0 ? prefixCls : _ref3$props$prefixCls,
        className = _ref3$props.className,
        style = _ref3$props.style,
        labelStyle = _ref3$props.labelStyle,
        contentStyle = _ref3$props.contentStyle,
        _ref3$props$span = _ref3$props.span,
        span = _ref3$props$span === void 0 ? 1 : _ref3$props$span,
        key = _ref3.key;

    if (typeof component === 'string') {
      return /*#__PURE__*/React.createElement(Cell, {
        key: \\"\\".concat(type, \\"-\\").concat(key || index),
        className: className,
        style: style,
        labelStyle: _extends(_extends({}, rootLabelStyle), labelStyle),
        contentStyle: _extends(_extends({}, rootContentStyle), contentStyle),
        span: span,
        colon: colon,
        component: component,
        itemPrefixCls: itemPrefixCls,
        bordered: bordered,
        label: showLabel ? label : null,
        content: showContent ? children : null
      });
    }

    return [/*#__PURE__*/React.createElement(Cell, {
      key: \\"label-\\".concat(key || index),
      className: className,
      style: _extends(_extends(_extends({}, rootLabelStyle), style), labelStyle),
      span: 1,
      colon: colon,
      component: component[0],
      itemPrefixCls: itemPrefixCls,
      bordered: bordered,
      label: label
    }), /*#__PURE__*/React.createElement(Cell, {
      key: \\"content-\\".concat(key || index),
      className: className,
      style: _extends(_extends(_extends({}, rootContentStyle), style), contentStyle),
      span: span * 2 - 1,
      component: component[1],
      itemPrefixCls: itemPrefixCls,
      bordered: bordered,
      content: children
    })];
  });
}

var Row = function Row(props) {
  var descContext = React.useContext(DescriptionsContext);
  var prefixCls = props.prefixCls,
      vertical = props.vertical,
      row = props.row,
      index = props.index,
      bordered = props.bordered;

  if (vertical) {
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\\"tr\\", {
      key: \\"label-\\".concat(index),
      className: \\"\\".concat(prefixCls, \\"-row\\")
    }, renderCells(row, props, _extends({
      component: 'th',
      type: 'label',
      showLabel: true
    }, descContext))), /*#__PURE__*/React.createElement(\\"tr\\", {
      key: \\"content-\\".concat(index),
      className: \\"\\".concat(prefixCls, \\"-row\\")
    }, renderCells(row, props, _extends({
      component: 'td',
      type: 'content',
      showContent: true
    }, descContext))));
  }

  return /*#__PURE__*/React.createElement(\\"tr\\", {
    key: index,
    className: \\"\\".concat(prefixCls, \\"-row\\")
  }, renderCells(row, props, _extends({
    component: bordered ? ['th', 'td'] : 'td',
    type: 'item',
    showLabel: true,
    showContent: true
  }, descContext)));
};

var DescriptionsItem = function DescriptionsItem(_ref) {
  var children = _ref.children;
  return children;
};

var DescriptionsContext = /*#__PURE__*/React.createContext({});
var DEFAULT_COLUMN_MAP = {
  xxl: 3,
  xl: 3,
  lg: 3,
  md: 3,
  sm: 2,
  xs: 1
};

function getColumn(column, screens) {
  if (typeof column === 'number') {
    return column;
  }

  if (_typeof(column) === 'object') {
    for (var i = 0; i < responsiveArray.length; i++) {
      var breakpoint = responsiveArray[i];

      if (screens[breakpoint] && column[breakpoint] !== undefined) {
        return column[breakpoint] || DEFAULT_COLUMN_MAP[breakpoint];
      }
    }
  }

  return 3;
}

function getFilledItem(node, span, rowRestCol) {
  var clone = node;

  if (span === undefined || span > rowRestCol) {
    clone = cloneElement(node, {
      span: rowRestCol
    });
    devWarning(span === undefined, 'Descriptions', 'Sum of column \`span\` in a line not match \`column\` of Descriptions.');
  }

  return clone;
}

function getRows(children, column) {
  var childNodes = toArray$2(children).filter(function (n) {
    return n;
  });
  var rows = [];
  var tmpRow = [];
  var rowRestCol = column;
  childNodes.forEach(function (node, index) {
    var _a;

    var span = (_a = node.props) === null || _a === void 0 ? void 0 : _a.span;
    var mergedSpan = span || 1; // Additional handle last one

    if (index === childNodes.length - 1) {
      tmpRow.push(getFilledItem(node, span, rowRestCol));
      rows.push(tmpRow);
      return;
    }

    if (mergedSpan < rowRestCol) {
      rowRestCol -= mergedSpan;
      tmpRow.push(node);
    } else {
      tmpRow.push(getFilledItem(node, mergedSpan, rowRestCol));
      rows.push(tmpRow);
      rowRestCol = column;
      tmpRow = [];
    }
  });
  return rows;
}

function Descriptions(_ref) {
  var _classNames;

  var customizePrefixCls = _ref.prefixCls,
      title = _ref.title,
      extra = _ref.extra,
      _ref$column = _ref.column,
      column = _ref$column === void 0 ? DEFAULT_COLUMN_MAP : _ref$column,
      _ref$colon = _ref.colon,
      colon = _ref$colon === void 0 ? true : _ref$colon,
      bordered = _ref.bordered,
      layout = _ref.layout,
      children = _ref.children,
      className = _ref.className,
      style = _ref.style,
      size = _ref.size,
      labelStyle = _ref.labelStyle,
      contentStyle = _ref.contentStyle;

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  var prefixCls = getPrefixCls('descriptions', customizePrefixCls);

  var _React$useState = React.useState({}),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      screens = _React$useState2[0],
      setScreens = _React$useState2[1];

  var mergedColumn = getColumn(column, screens); // Responsive

  React.useEffect(function () {
    var token = responsiveObserve.subscribe(function (newScreens) {
      if (_typeof(column) !== 'object') {
        return;
      }

      setScreens(newScreens);
    });
    return function () {
      responsiveObserve.unsubscribe(token);
    };
  }, []); // Children

  var rows = getRows(children, mergedColumn);
  return /*#__PURE__*/React.createElement(DescriptionsContext.Provider, {
    value: {
      labelStyle: labelStyle,
      contentStyle: contentStyle
    }
  }, /*#__PURE__*/React.createElement(\\"div\\", {
    className: classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-\\").concat(size), size && size !== 'default'), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-bordered\\"), !!bordered), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), _classNames), className),
    style: style
  }, (title || extra) && /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-header\\")
  }, title && /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-title\\")
  }, title), extra && /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-extra\\")
  }, extra)), /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-view\\")
  }, /*#__PURE__*/React.createElement(\\"table\\", null, /*#__PURE__*/React.createElement(\\"tbody\\", null, rows.map(function (row, index) {
    return /*#__PURE__*/React.createElement(Row, {
      key: index,
      index: index,
      colon: colon,
      prefixCls: prefixCls,
      vertical: layout === 'vertical',
      bordered: bordered,
      row: row
    });
  }))))));
}

Descriptions.Item = DescriptionsItem;

var __rest$z = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var Divider = function Divider(props) {
  return /*#__PURE__*/React.createElement(ConfigConsumer, null, function (_ref) {
    var _classNames;

    var getPrefixCls = _ref.getPrefixCls,
        direction = _ref.direction;

    var customizePrefixCls = props.prefixCls,
        _props$type = props.type,
        type = _props$type === void 0 ? 'horizontal' : _props$type,
        _props$orientation = props.orientation,
        orientation = _props$orientation === void 0 ? 'center' : _props$orientation,
        className = props.className,
        children = props.children,
        dashed = props.dashed,
        plain = props.plain,
        restProps = __rest$z(props, [\\"prefixCls\\", \\"type\\", \\"orientation\\", \\"className\\", \\"children\\", \\"dashed\\", \\"plain\\"]);

    var prefixCls = getPrefixCls('divider', customizePrefixCls);
    var orientationPrefix = orientation.length > 0 ? \\"-\\".concat(orientation) : orientation;
    var hasChildren = !!children;
    var classString = classNames(prefixCls, \\"\\".concat(prefixCls, \\"-\\").concat(type), (_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-with-text\\"), hasChildren), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-with-text\\").concat(orientationPrefix), hasChildren), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-dashed\\"), !!dashed), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-plain\\"), !!plain), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), _classNames), className);
    return /*#__PURE__*/React.createElement(\\"div\\", _extends({
      className: classString
    }, restProps, {
      role: \\"separator\\"
    }), children && /*#__PURE__*/React.createElement(\\"span\\", {
      className: \\"\\".concat(prefixCls, \\"-inner-text\\")
    }, children));
  });
};

var __rest$y = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var DrawerContext = /*#__PURE__*/React.createContext(null);
var PlacementTypes = tuple('top', 'right', 'bottom', 'left');
var defaultPushState = {
  distance: 180
};

var Drawer = /*#__PURE__*/function (_React$Component) {
  _inherits(Drawer, _React$Component);

  var _super = _createSuper(Drawer);

  function Drawer() {
    var _this;

    _classCallCheck(this, Drawer);

    _this = _super.apply(this, arguments);
    _this.state = {
      push: false
    };

    _this.push = function () {
      if (_this.props.push) {
        _this.setState({
          push: true
        });
      }
    };

    _this.pull = function () {
      if (_this.props.push) {
        _this.setState({
          push: false
        });
      }
    };

    _this.onDestroyTransitionEnd = function () {
      var isDestroyOnClose = _this.getDestroyOnClose();

      if (!isDestroyOnClose) {
        return;
      }

      if (!_this.props.visible) {
        _this.destroyClose = true;

        _this.forceUpdate();
      }
    };

    _this.getDestroyOnClose = function () {
      return _this.props.destroyOnClose && !_this.props.visible;
    };

    _this.getPushDistance = function () {
      var push = _this.props.push;
      var distance;

      if (typeof push === 'boolean') {
        distance = push ? defaultPushState.distance : 0;
      } else {
        distance = push.distance;
      }

      return parseFloat(String(distance || 0));
    }; // get drawer push width or height


    _this.getPushTransform = function (placement) {
      var distance = _this.getPushDistance();

      if (placement === 'left' || placement === 'right') {
        return \\"translateX(\\".concat(placement === 'left' ? distance : -distance, \\"px)\\");
      }

      if (placement === 'top' || placement === 'bottom') {
        return \\"translateY(\\".concat(placement === 'top' ? distance : -distance, \\"px)\\");
      }
    };

    _this.getRcDrawerStyle = function () {
      var _this$props = _this.props,
          zIndex = _this$props.zIndex,
          placement = _this$props.placement,
          mask = _this$props.mask,
          style = _this$props.style;
      var push = _this.state.push; // 当无 mask 时，将 width 应用到外层容器上
      // 解决 https://github.com/ant-design/ant-design/issues/12401 的问题

      var offsetStyle = mask ? {} : _this.getOffsetStyle();
      return _extends(_extends({
        zIndex: zIndex,
        transform: push ? _this.getPushTransform(placement) : undefined
      }, offsetStyle), style);
    }; // render drawer body dom


    _this.renderBody = function () {
      var _this$props2 = _this.props,
          bodyStyle = _this$props2.bodyStyle,
          drawerStyle = _this$props2.drawerStyle,
          prefixCls = _this$props2.prefixCls,
          visible = _this$props2.visible;

      if (_this.destroyClose && !visible) {
        return null;
      }

      _this.destroyClose = false;
      var containerStyle = {};

      var isDestroyOnClose = _this.getDestroyOnClose();

      if (isDestroyOnClose) {
        // Increase the opacity transition, delete children after closing.
        containerStyle.opacity = 0;
        containerStyle.transition = 'opacity .3s';
      }

      return /*#__PURE__*/React.createElement(\\"div\\", {
        className: \\"\\".concat(prefixCls, \\"-wrapper-body\\"),
        style: _extends(_extends({}, containerStyle), drawerStyle),
        onTransitionEnd: _this.onDestroyTransitionEnd
      }, _this.renderHeader(), /*#__PURE__*/React.createElement(\\"div\\", {
        className: \\"\\".concat(prefixCls, \\"-body\\"),
        style: bodyStyle
      }, _this.props.children), _this.renderFooter());
    }; // render Provider for Multi-level drawer


    _this.renderProvider = function (value) {
      _this.parentDrawer = value;

      var _a = _this.props,
          prefixCls = _a.prefixCls,
          placement = _a.placement,
          className = _a.className,
          mask = _a.mask,
          direction = _a.direction,
          visible = _a.visible,
          rest = __rest$y(_a, [\\"prefixCls\\", \\"placement\\", \\"className\\", \\"mask\\", \\"direction\\", \\"visible\\"]);

      var drawerClassName = classNames(_defineProperty({
        'no-mask': !mask
      }, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), className);
      var offsetStyle = mask ? _this.getOffsetStyle() : {};
      return /*#__PURE__*/React.createElement(DrawerContext.Provider, {
        value: _assertThisInitialized(_this)
      }, /*#__PURE__*/React.createElement(RcDrawer, _extends({
        handler: false
      }, omit(rest, ['zIndex', 'closable', 'closeIcon', 'destroyOnClose', 'drawerStyle', 'headerStyle', 'bodyStyle', 'footerStyle', 'footer', 'title', 'push', 'width', 'height']), offsetStyle, {
        prefixCls: prefixCls,
        open: visible,
        showMask: mask,
        placement: placement,
        style: _this.getRcDrawerStyle(),
        className: drawerClassName
      }), _this.renderBody()));
    };

    return _this;
  }

  _createClass(Drawer, [{
    key: \\"componentDidMount\\",
    value: function componentDidMount() {
      // fix: delete drawer in child and re-render, no push started.
      // <Drawer>{show && <Drawer />}</Drawer>
      var visible = this.props.visible;

      if (visible && this.parentDrawer) {
        this.parentDrawer.push();
      }
    }
  }, {
    key: \\"componentDidUpdate\\",
    value: function componentDidUpdate(preProps) {
      var visible = this.props.visible;

      if (preProps.visible !== visible && this.parentDrawer) {
        if (visible) {
          this.parentDrawer.push();
        } else {
          this.parentDrawer.pull();
        }
      }
    }
  }, {
    key: \\"componentWillUnmount\\",
    value: function componentWillUnmount() {
      // unmount drawer in child, clear push.
      if (this.parentDrawer) {
        this.parentDrawer.pull();
        this.parentDrawer = null;
      }
    }
  }, {
    key: \\"getOffsetStyle\\",
    value: function getOffsetStyle() {
      var _this$props3 = this.props,
          placement = _this$props3.placement,
          width = _this$props3.width,
          height = _this$props3.height,
          visible = _this$props3.visible,
          mask = _this$props3.mask; // https://github.com/ant-design/ant-design/issues/24287

      if (!visible && !mask) {
        return {};
      }

      var offsetStyle = {};

      if (placement === 'left' || placement === 'right') {
        offsetStyle.width = width;
      } else {
        offsetStyle.height = height;
      }

      return offsetStyle;
    }
  }, {
    key: \\"renderHeader\\",
    value: function renderHeader() {
      var _this$props4 = this.props,
          title = _this$props4.title,
          prefixCls = _this$props4.prefixCls,
          closable = _this$props4.closable,
          headerStyle = _this$props4.headerStyle;

      if (!title && !closable) {
        return null;
      }

      var headerClassName = title ? \\"\\".concat(prefixCls, \\"-header\\") : \\"\\".concat(prefixCls, \\"-header-no-title\\");
      return /*#__PURE__*/React.createElement(\\"div\\", {
        className: headerClassName,
        style: headerStyle
      }, title && /*#__PURE__*/React.createElement(\\"div\\", {
        className: \\"\\".concat(prefixCls, \\"-title\\")
      }, title), closable && this.renderCloseIcon());
    }
  }, {
    key: \\"renderFooter\\",
    value: function renderFooter() {
      var _this$props5 = this.props,
          footer = _this$props5.footer,
          footerStyle = _this$props5.footerStyle,
          prefixCls = _this$props5.prefixCls;

      if (!footer) {
        return null;
      }

      var footerClassName = \\"\\".concat(prefixCls, \\"-footer\\");
      return /*#__PURE__*/React.createElement(\\"div\\", {
        className: footerClassName,
        style: footerStyle
      }, footer);
    }
  }, {
    key: \\"renderCloseIcon\\",
    value: function renderCloseIcon() {
      var _this$props6 = this.props,
          closable = _this$props6.closable,
          _this$props6$closeIco = _this$props6.closeIcon,
          closeIcon = _this$props6$closeIco === void 0 ? /*#__PURE__*/React.createElement(CloseOutlined$1, null) : _this$props6$closeIco,
          prefixCls = _this$props6.prefixCls,
          onClose = _this$props6.onClose;
      return closable && /*#__PURE__*/React.createElement(\\"button\\", {
        type: \\"button\\",
        onClick: onClose,
        \\"aria-label\\": \\"Close\\",
        className: \\"\\".concat(prefixCls, \\"-close\\"),
        style: {
          '--scroll-bar': \\"\\".concat(getScrollBarSize(), \\"px\\")
        }
      }, closeIcon);
    }
  }, {
    key: \\"render\\",
    value: function render() {
      return /*#__PURE__*/React.createElement(DrawerContext.Consumer, null, this.renderProvider);
    }
  }]);

  return Drawer;
}(React.Component);

Drawer.defaultProps = {
  width: 256,
  height: 256,
  closable: true,
  placement: 'right',
  maskClosable: true,
  mask: true,
  level: null,
  keyboard: true,
  push: defaultPushState
};

var DrawerWrapper = function DrawerWrapper(props) {
  var customizePrefixCls = props.prefixCls,
      customizeGetContainer = props.getContainer;

  var _React$useContext = React.useContext(ConfigContext),
      getPopupContainer = _React$useContext.getPopupContainer,
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  var prefixCls = getPrefixCls('drawer', customizePrefixCls);
  var getContainer = // 有可能为 false，所以不能直接判断
  customizeGetContainer === undefined && getPopupContainer ? function () {
    return getPopupContainer(document.body);
  } : customizeGetContainer;
  return /*#__PURE__*/React.createElement(Drawer, _extends({}, props, {
    prefixCls: prefixCls,
    getContainer: getContainer,
    direction: direction
  }));
};

DrawerWrapper.displayName = 'DrawerWrapper';

var FormContext = /*#__PURE__*/React.createContext({
  labelAlign: 'right',
  vertical: false,
  itemRef: function itemRef() {}
});
var FormItemContext = /*#__PURE__*/React.createContext({
  updateItemErrors: function updateItemErrors() {}
});
var FormProvider = function FormProvider(props) {
  var providerProps = omit(props, ['prefixCls']);
  return /*#__PURE__*/React.createElement(FormProvider$1, providerProps);
};
var FormItemPrefixContext = /*#__PURE__*/React.createContext({
  prefixCls: ''
});

function toArray(candidate) {
  if (candidate === undefined || candidate === false) return [];
  return Array.isArray(candidate) ? candidate : [candidate];
}
function getFieldId(namePath, formName) {
  if (!namePath.length) return undefined;
  var mergedId = namePath.join('_');
  return formName ? \\"\\".concat(formName, \\"_\\").concat(mergedId) : mergedId;
}

function toNamePathStr(name) {
  var namePath = toArray(name);
  return namePath.join('_');
}

function useForm(form) {
  var _useRcForm = useForm$1(),
      _useRcForm2 = _slicedToArray(_useRcForm, 1),
      rcForm = _useRcForm2[0];

  var itemsRef = React.useRef({});
  var wrapForm = React.useMemo(function () {
    return form || _extends(_extends({}, rcForm), {
      __INTERNAL__: {
        itemRef: function itemRef(name) {
          return function (node) {
            var namePathStr = toNamePathStr(name);

            if (node) {
              itemsRef.current[namePathStr] = node;
            } else {
              delete itemsRef.current[namePathStr];
            }
          };
        }
      },
      scrollToField: function scrollToField(name) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var namePath = toArray(name);
        var fieldId = getFieldId(namePath, wrapForm.__INTERNAL__.name);
        var node = fieldId ? document.getElementById(fieldId) : null;

        if (node) {
          scrollIntoView(node, _extends({
            scrollMode: 'if-needed',
            block: 'nearest'
          }, options));
        }
      },
      getFieldInstance: function getFieldInstance(name) {
        var namePathStr = toNamePathStr(name);
        return itemsRef.current[namePathStr];
      }
    });
  }, [form, rcForm]);
  return [wrapForm];
}

var __rest$x = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var InternalForm = function InternalForm(props, ref) {
  var _classNames;

  var contextSize = React.useContext(SizeContext$1);

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction,
      contextForm = _React$useContext.form;

  var customizePrefixCls = props.prefixCls,
      _props$className = props.className,
      className = _props$className === void 0 ? '' : _props$className,
      _props$size = props.size,
      size = _props$size === void 0 ? contextSize : _props$size,
      form = props.form,
      colon = props.colon,
      labelAlign = props.labelAlign,
      labelCol = props.labelCol,
      wrapperCol = props.wrapperCol,
      hideRequiredMark = props.hideRequiredMark,
      _props$layout = props.layout,
      layout = _props$layout === void 0 ? 'horizontal' : _props$layout,
      scrollToFirstError = props.scrollToFirstError,
      requiredMark = props.requiredMark,
      onFinishFailed = props.onFinishFailed,
      name = props.name,
      restFormProps = __rest$x(props, [\\"prefixCls\\", \\"className\\", \\"size\\", \\"form\\", \\"colon\\", \\"labelAlign\\", \\"labelCol\\", \\"wrapperCol\\", \\"hideRequiredMark\\", \\"layout\\", \\"scrollToFirstError\\", \\"requiredMark\\", \\"onFinishFailed\\", \\"name\\"]);

  var mergedRequiredMark = useMemo$1(function () {
    if (requiredMark !== undefined) {
      return requiredMark;
    }

    if (contextForm && contextForm.requiredMark !== undefined) {
      return contextForm.requiredMark;
    }

    if (hideRequiredMark) {
      return false;
    }

    return true;
  }, [hideRequiredMark, requiredMark, contextForm]);
  var prefixCls = getPrefixCls('form', customizePrefixCls);
  var formClassName = classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-\\").concat(layout), true), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-hide-required-mark\\"), mergedRequiredMark === false), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-\\").concat(size), size), _classNames), className);

  var _useForm = useForm(form),
      _useForm2 = _slicedToArray(_useForm, 1),
      wrapForm = _useForm2[0];

  var __INTERNAL__ = wrapForm.__INTERNAL__;
  __INTERNAL__.name = name;
  var formContextValue = useMemo$1(function () {
    return {
      name: name,
      labelAlign: labelAlign,
      labelCol: labelCol,
      wrapperCol: wrapperCol,
      vertical: layout === 'vertical',
      colon: colon,
      requiredMark: mergedRequiredMark,
      itemRef: __INTERNAL__.itemRef
    };
  }, [name, labelAlign, labelCol, wrapperCol, layout, colon, mergedRequiredMark]);
  React.useImperativeHandle(ref, function () {
    return wrapForm;
  });

  var onInternalFinishFailed = function onInternalFinishFailed(errorInfo) {
    if (onFinishFailed) {
      onFinishFailed(errorInfo);
    }

    var defaultScrollToFirstError = {
      block: 'nearest'
    };

    if (scrollToFirstError && errorInfo.errorFields.length) {
      if (_typeof(scrollToFirstError) === 'object') {
        defaultScrollToFirstError = scrollToFirstError;
      }

      wrapForm.scrollToField(errorInfo.errorFields[0].name, defaultScrollToFirstError);
    }
  };

  return /*#__PURE__*/React.createElement(SizeContextProvider$1, {
    size: size
  }, /*#__PURE__*/React.createElement(FormContext.Provider, {
    value: formContextValue
  }, /*#__PURE__*/React.createElement(FieldForm, _extends({
    id: name
  }, restFormProps, {
    name: name,
    onFinishFailed: onInternalFinishFailed,
    form: wrapForm,
    className: formClassName
  }))));
};

var Form$1 = /*#__PURE__*/React.forwardRef(InternalForm);

// This icon file is generated automatically.
var QuestionCircleOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z\\" } }, { \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M623.6 316.7C593.6 290.4 554 276 512 276s-81.6 14.5-111.6 40.7C369.2 344 352 380.7 352 420v7.6c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V420c0-44.1 43.1-80 96-80s96 35.9 96 80c0 31.1-22 59.6-56.1 72.7-21.2 8.1-39.2 22.3-52.1 40.9-13.1 19-19.9 41.8-19.9 64.9V620c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8v-22.7a48.3 48.3 0 0130.9-44.8c59-22.7 97.1-74.7 97.1-132.5.1-39.3-17.1-76-48.3-103.3zM472 732a40 40 0 1080 0 40 40 0 10-80 0z\\" } }] }, \\"name\\": \\"question-circle\\", \\"theme\\": \\"outlined\\" };

var QuestionCircleOutlined = function QuestionCircleOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: QuestionCircleOutlined$2
  }));
};

QuestionCircleOutlined.displayName = 'QuestionCircleOutlined';
var QuestionCircleOutlined$1 = /*#__PURE__*/React.forwardRef(QuestionCircleOutlined);

var __rest$w = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

function toTooltipProps(tooltip) {
  if (!tooltip) {
    return null;
  }

  if (_typeof(tooltip) === 'object' && ! /*#__PURE__*/React.isValidElement(tooltip)) {
    return tooltip;
  }

  return {
    title: tooltip
  };
}

var FormItemLabel = function FormItemLabel(_ref) {
  var prefixCls = _ref.prefixCls,
      label = _ref.label,
      htmlFor = _ref.htmlFor,
      labelCol = _ref.labelCol,
      labelAlign = _ref.labelAlign,
      colon = _ref.colon,
      required = _ref.required,
      requiredMark = _ref.requiredMark,
      tooltip = _ref.tooltip;

  var _useLocaleReceiver = useLocaleReceiver('Form'),
      _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 1),
      formLocale = _useLocaleReceiver2[0];

  if (!label) return null;
  return /*#__PURE__*/React.createElement(FormContext.Consumer, {
    key: \\"label\\"
  }, function (_ref2) {
    var _classNames;

    var vertical = _ref2.vertical,
        contextLabelAlign = _ref2.labelAlign,
        contextLabelCol = _ref2.labelCol,
        contextColon = _ref2.colon;

    var _a;

    var mergedLabelCol = labelCol || contextLabelCol || {};
    var mergedLabelAlign = labelAlign || contextLabelAlign;
    var labelClsBasic = \\"\\".concat(prefixCls, \\"-item-label\\");
    var labelColClassName = classNames(labelClsBasic, mergedLabelAlign === 'left' && \\"\\".concat(labelClsBasic, \\"-left\\"), mergedLabelCol.className);
    var labelChildren = label; // Keep label is original where there should have no colon

    var computedColon = colon === true || contextColon !== false && colon !== false;
    var haveColon = computedColon && !vertical; // Remove duplicated user input colon

    if (haveColon && typeof label === 'string' && label.trim() !== '') {
      labelChildren = label.replace(/[:|：]\\\\s*$/, '');
    } // Tooltip


    var tooltipProps = toTooltipProps(tooltip);

    if (tooltipProps) {
      var _tooltipProps$icon = tooltipProps.icon,
          icon = _tooltipProps$icon === void 0 ? /*#__PURE__*/React.createElement(QuestionCircleOutlined$1, null) : _tooltipProps$icon,
          restTooltipProps = __rest$w(tooltipProps, [\\"icon\\"]);

      var tooltipNode = /*#__PURE__*/React.createElement(Tooltip, restTooltipProps, /*#__PURE__*/React.cloneElement(icon, {
        className: \\"\\".concat(prefixCls, \\"-item-tooltip\\")
      }));
      labelChildren = /*#__PURE__*/React.createElement(React.Fragment, null, labelChildren, tooltipNode);
    } // Add required mark if optional


    if (requiredMark === 'optional' && !required) {
      labelChildren = /*#__PURE__*/React.createElement(React.Fragment, null, labelChildren, /*#__PURE__*/React.createElement(\\"span\\", {
        className: \\"\\".concat(prefixCls, \\"-item-optional\\")
      }, (formLocale === null || formLocale === void 0 ? void 0 : formLocale.optional) || ((_a = localeValues.Form) === null || _a === void 0 ? void 0 : _a.optional)));
    }

    var labelClassName = classNames((_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-item-required\\"), required), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-item-required-mark-optional\\"), requiredMark === 'optional'), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-item-no-colon\\"), !computedColon), _classNames));
    return /*#__PURE__*/React.createElement(Col, _extends({}, mergedLabelCol, {
      className: labelColClassName
    }), /*#__PURE__*/React.createElement(\\"label\\", {
      htmlFor: htmlFor,
      className: labelClassName,
      title: typeof label === 'string' ? label : ''
    }, labelChildren));
  });
};

function useForceUpdate() {
  var _React$useReducer = React.useReducer(function (x) {
    return x + 1;
  }, 0),
      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),
      forceUpdate = _React$useReducer2[1];

  return forceUpdate;
}

/** Always debounce error to avoid [error -> null -> error] blink */

function useCacheErrors(errors, changeTrigger, directly) {
  var cacheRef = React.useRef({
    errors: errors,
    visible: !!errors.length
  });
  var forceUpdate = useForceUpdate();

  var update = function update() {
    var prevVisible = cacheRef.current.visible;
    var newVisible = !!errors.length;
    var prevErrors = cacheRef.current.errors;
    cacheRef.current.errors = errors;
    cacheRef.current.visible = newVisible;

    if (prevVisible !== newVisible) {
      changeTrigger(newVisible);
    } else if (prevErrors.length !== errors.length || prevErrors.some(function (prevErr, index) {
      return prevErr !== errors[index];
    })) {
      forceUpdate();
    }
  };

  React.useEffect(function () {
    if (!directly) {
      var timeout = setTimeout(update, 10);
      return function () {
        return clearTimeout(timeout);
      };
    }
  }, [errors]);

  if (directly) {
    update();
  }

  return [cacheRef.current.visible, cacheRef.current.errors];
}

var EMPTY_LIST$1 = [];
function ErrorList(_ref) {
  var _ref$errors = _ref.errors,
      errors = _ref$errors === void 0 ? EMPTY_LIST$1 : _ref$errors,
      help = _ref.help,
      onDomErrorVisibleChange = _ref.onDomErrorVisibleChange;
  var forceUpdate = useForceUpdate();

  var _React$useContext = React.useContext(FormItemPrefixContext),
      prefixCls = _React$useContext.prefixCls,
      status = _React$useContext.status;

  var _useCacheErrors = useCacheErrors(errors, function (changedVisible) {
    if (changedVisible) {
      /**
       * We trigger in sync to avoid dom shaking but this get warning in react 16.13.
       *
       * So use Promise to keep in micro async to handle this.
       * https://github.com/ant-design/ant-design/issues/21698#issuecomment-593743485
       */
      Promise.resolve().then(function () {
        onDomErrorVisibleChange === null || onDomErrorVisibleChange === void 0 ? void 0 : onDomErrorVisibleChange(true);
      });
    }

    forceUpdate();
  }, !!help),
      _useCacheErrors2 = _slicedToArray(_useCacheErrors, 2),
      visible = _useCacheErrors2[0],
      cacheErrors = _useCacheErrors2[1];

  var memoErrors = useMemo(function () {
    return cacheErrors;
  }, visible, function (_, nextVisible) {
    return nextVisible;
  }); // Memo status in same visible

  var _React$useState = React.useState(status),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      innerStatus = _React$useState2[0],
      setInnerStatus = _React$useState2[1];

  React.useEffect(function () {
    if (visible && status) {
      setInnerStatus(status);
    }
  }, [visible, status]);
  var baseClassName = \\"\\".concat(prefixCls, \\"-item-explain\\");
  return /*#__PURE__*/React.createElement(CSSMotion, {
    motionDeadline: 500,
    visible: visible,
    motionName: \\"show-help\\",
    onLeaveEnd: function onLeaveEnd() {
      onDomErrorVisibleChange === null || onDomErrorVisibleChange === void 0 ? void 0 : onDomErrorVisibleChange(false);
    },
    motionAppear: true,
    removeOnLeave: true
  }, function (_ref2) {
    var motionClassName = _ref2.className;
    return /*#__PURE__*/React.createElement(\\"div\\", {
      className: classNames(baseClassName, _defineProperty({}, \\"\\".concat(baseClassName, \\"-\\").concat(innerStatus), innerStatus), motionClassName),
      key: \\"help\\"
    }, memoErrors.map(function (error, index) {
      return (
        /*#__PURE__*/
        // eslint-disable-next-line react/no-array-index-key
        React.createElement(\\"div\\", {
          key: index,
          role: \\"alert\\"
        }, error)
      );
    }));
  });
}

var iconMap = {
  success: CheckCircleFilled$1,
  warning: ExclamationCircleFilled$1,
  error: CloseCircleFilled$1,
  validating: LoadingOutlined$1
};

var FormItemInput = function FormItemInput(props) {
  var prefixCls = props.prefixCls,
      status = props.status,
      wrapperCol = props.wrapperCol,
      children = props.children,
      help = props.help,
      errors = props.errors,
      onDomErrorVisibleChange = props.onDomErrorVisibleChange,
      hasFeedback = props.hasFeedback,
      formItemRender = props._internalItemRender,
      validateStatus = props.validateStatus,
      extra = props.extra;
  var baseClassName = \\"\\".concat(prefixCls, \\"-item\\");
  var formContext = React.useContext(FormContext);
  var mergedWrapperCol = wrapperCol || formContext.wrapperCol || {};
  var className = classNames(\\"\\".concat(baseClassName, \\"-control\\"), mergedWrapperCol.className);
  React.useEffect(function () {
    return function () {
      onDomErrorVisibleChange(false);
    };
  }, []); // Should provides additional icon if \`hasFeedback\`

  var IconNode = validateStatus && iconMap[validateStatus];
  var icon = hasFeedback && IconNode ? /*#__PURE__*/React.createElement(\\"span\\", {
    className: \\"\\".concat(baseClassName, \\"-children-icon\\")
  }, /*#__PURE__*/React.createElement(IconNode, null)) : null; // Pass to sub FormItem should not with col info

  var subFormContext = _extends({}, formContext);

  delete subFormContext.labelCol;
  delete subFormContext.wrapperCol;
  var inputDom = /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(baseClassName, \\"-control-input\\")
  }, /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(baseClassName, \\"-control-input-content\\")
  }, children), icon);
  var errorListDom = /*#__PURE__*/React.createElement(FormItemPrefixContext.Provider, {
    value: {
      prefixCls: prefixCls,
      status: status
    }
  }, /*#__PURE__*/React.createElement(ErrorList, {
    errors: errors,
    help: help,
    onDomErrorVisibleChange: onDomErrorVisibleChange
  })); // If extra = 0, && will goes wrong
  // 0&&error -> 0

  var extraDom = extra ? /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(baseClassName, \\"-extra\\")
  }, extra) : null;
  var dom = formItemRender && formItemRender.mark === 'pro_table_render' && formItemRender.render ? formItemRender.render(props, {
    input: inputDom,
    errorList: errorListDom,
    extra: extraDom
  }) : /*#__PURE__*/React.createElement(React.Fragment, null, inputDom, errorListDom, extraDom);
  return /*#__PURE__*/React.createElement(FormContext.Provider, {
    value: subFormContext
  }, /*#__PURE__*/React.createElement(Col, _extends({}, mergedWrapperCol, {
    className: className
  }), dom));
};

function useFrameState(defaultValue) {
  var _React$useState = React.useState(defaultValue),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      value = _React$useState2[0],
      setValue = _React$useState2[1];

  var frameRef = useRef(null);
  var batchRef = useRef([]);
  var destroyRef = useRef(false);
  React.useEffect(function () {
    return function () {
      destroyRef.current = true;
      raf.cancel(frameRef.current);
    };
  }, []);

  function setFrameValue(updater) {
    if (destroyRef.current) {
      return;
    }

    if (frameRef.current === null) {
      batchRef.current = [];
      frameRef.current = raf(function () {
        frameRef.current = null;
        setValue(function (prevValue) {
          var current = prevValue;
          batchRef.current.forEach(function (func) {
            current = func(current);
          });
          return current;
        });
      });
    }

    batchRef.current.push(updater);
  }

  return [value, setFrameValue];
}

function useItemRef() {
  var _React$useContext = React.useContext(FormContext),
      itemRef = _React$useContext.itemRef;

  var cacheRef = React.useRef({});

  function getRef(name, children) {
    var childrenRef = children && _typeof(children) === 'object' && children.ref;
    var nameStr = name.join('_');

    if (cacheRef.current.name !== nameStr || cacheRef.current.originRef !== childrenRef) {
      cacheRef.current.name = nameStr;
      cacheRef.current.originRef = childrenRef;
      cacheRef.current.ref = composeRef(itemRef(name), childrenRef);
    }

    return cacheRef.current.ref;
  }

  return getRef;
}

var __rest$v = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var NAME_SPLIT = '__SPLIT__';
var ValidateStatuses = tuple('success', 'warning', 'error', 'validating', '');
var MemoInput = /*#__PURE__*/React.memo(function (_ref) {
  var children = _ref.children;
  return children;
}, function (prev, next) {
  return prev.value === next.value && prev.update === next.update;
});

function hasValidName(name) {
  if (name === null) {
    devWarning(false, 'Form.Item', '\`null\` is passed as \`name\` property');
  }

  return !(name === undefined || name === null);
}

function FormItem(props) {
  var name = props.name,
      fieldKey = props.fieldKey,
      noStyle = props.noStyle,
      dependencies = props.dependencies,
      customizePrefixCls = props.prefixCls,
      style = props.style,
      className = props.className,
      shouldUpdate = props.shouldUpdate,
      hasFeedback = props.hasFeedback,
      help = props.help,
      rules = props.rules,
      validateStatus = props.validateStatus,
      children = props.children,
      required = props.required,
      label = props.label,
      messageVariables = props.messageVariables,
      _props$trigger = props.trigger,
      trigger = _props$trigger === void 0 ? 'onChange' : _props$trigger,
      validateTrigger = props.validateTrigger,
      hidden = props.hidden,
      restProps = __rest$v(props, [\\"name\\", \\"fieldKey\\", \\"noStyle\\", \\"dependencies\\", \\"prefixCls\\", \\"style\\", \\"className\\", \\"shouldUpdate\\", \\"hasFeedback\\", \\"help\\", \\"rules\\", \\"validateStatus\\", \\"children\\", \\"required\\", \\"label\\", \\"messageVariables\\", \\"trigger\\", \\"validateTrigger\\", \\"hidden\\"]);

  var destroyRef = useRef(false);

  var _useContext = useContext(ConfigContext),
      getPrefixCls = _useContext.getPrefixCls;

  var _useContext2 = useContext(FormContext),
      formName = _useContext2.name,
      requiredMark = _useContext2.requiredMark;

  var _useContext3 = useContext(FormItemContext),
      updateItemErrors = _useContext3.updateItemErrors;

  var _React$useState = React.useState(!!help),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      domErrorVisible = _React$useState2[0],
      innerSetDomErrorVisible = _React$useState2[1];

  var _useFrameState = useFrameState({}),
      _useFrameState2 = _slicedToArray(_useFrameState, 2),
      inlineErrors = _useFrameState2[0],
      setInlineErrors = _useFrameState2[1];

  var _useContext4 = useContext(FieldContext),
      contextValidateTrigger = _useContext4.validateTrigger;

  var mergedValidateTrigger = validateTrigger !== undefined ? validateTrigger : contextValidateTrigger;

  function setDomErrorVisible(visible) {
    if (!destroyRef.current) {
      innerSetDomErrorVisible(visible);
    }
  }

  var hasName = hasValidName(name); // Cache Field NamePath

  var nameRef = useRef([]); // Should clean up if Field removed

  React.useEffect(function () {
    return function () {
      destroyRef.current = true;
      updateItemErrors(nameRef.current.join(NAME_SPLIT), []);
    };
  }, []);
  var prefixCls = getPrefixCls('form', customizePrefixCls); // ======================== Errors ========================
  // Collect noStyle Field error to the top FormItem

  var updateChildItemErrors = noStyle ? updateItemErrors : function (subName, subErrors, originSubName) {
    setInlineErrors(function () {
      var prevInlineErrors = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      // Clean up origin error when name changed
      if (originSubName !== subName) {
        delete prevInlineErrors[originSubName];
      }

      if (!isEqual(prevInlineErrors[subName], subErrors)) {
        return _extends(_extends({}, prevInlineErrors), _defineProperty({}, subName, subErrors));
      }

      return prevInlineErrors;
    });
  }; // ===================== Children Ref =====================

  var getItemRef = useItemRef();

  function renderLayout(baseChildren, fieldId, meta, isRequired) {
    var _itemClassName;

    var _a;

    if (noStyle && !hidden) {
      return baseChildren;
    } // ======================== Errors ========================
    // >>> collect sub errors


    var subErrorList = [];
    Object.keys(inlineErrors).forEach(function (subName) {
      subErrorList = [].concat(_toConsumableArray(subErrorList), _toConsumableArray(inlineErrors[subName] || []));
    }); // >>> merged errors

    var mergedErrors;

    if (help !== undefined && help !== null) {
      mergedErrors = toArray(help);
    } else {
      mergedErrors = meta ? meta.errors : [];
      mergedErrors = [].concat(_toConsumableArray(mergedErrors), _toConsumableArray(subErrorList));
    } // ======================== Status ========================


    var mergedValidateStatus = '';

    if (validateStatus !== undefined) {
      mergedValidateStatus = validateStatus;
    } else if (meta === null || meta === void 0 ? void 0 : meta.validating) {
      mergedValidateStatus = 'validating';
    } else if (((_a = meta === null || meta === void 0 ? void 0 : meta.errors) === null || _a === void 0 ? void 0 : _a.length) || subErrorList.length) {
      mergedValidateStatus = 'error';
    } else if (meta === null || meta === void 0 ? void 0 : meta.touched) {
      mergedValidateStatus = 'success';
    }

    var itemClassName = (_itemClassName = {}, _defineProperty(_itemClassName, \\"\\".concat(prefixCls, \\"-item\\"), true), _defineProperty(_itemClassName, \\"\\".concat(prefixCls, \\"-item-with-help\\"), domErrorVisible || help), _defineProperty(_itemClassName, \\"\\".concat(className), !!className), _defineProperty(_itemClassName, \\"\\".concat(prefixCls, \\"-item-has-feedback\\"), mergedValidateStatus && hasFeedback), _defineProperty(_itemClassName, \\"\\".concat(prefixCls, \\"-item-has-success\\"), mergedValidateStatus === 'success'), _defineProperty(_itemClassName, \\"\\".concat(prefixCls, \\"-item-has-warning\\"), mergedValidateStatus === 'warning'), _defineProperty(_itemClassName, \\"\\".concat(prefixCls, \\"-item-has-error\\"), mergedValidateStatus === 'error'), _defineProperty(_itemClassName, \\"\\".concat(prefixCls, \\"-item-is-validating\\"), mergedValidateStatus === 'validating'), _defineProperty(_itemClassName, \\"\\".concat(prefixCls, \\"-item-hidden\\"), hidden), _itemClassName); // ======================= Children =======================

    return /*#__PURE__*/React.createElement(Row$1, _extends({
      className: classNames(itemClassName),
      style: style,
      key: \\"row\\"
    }, omit(restProps, ['colon', 'extra', 'getValueFromEvent', 'getValueProps', 'htmlFor', 'id', 'initialValue', 'isListField', 'labelAlign', 'labelCol', 'normalize', 'preserve', 'tooltip', 'validateFirst', 'valuePropName', 'wrapperCol', '_internalItemRender'])), /*#__PURE__*/React.createElement(FormItemLabel, _extends({
      htmlFor: fieldId,
      required: isRequired,
      requiredMark: requiredMark
    }, props, {
      prefixCls: prefixCls
    })), /*#__PURE__*/React.createElement(FormItemInput, _extends({}, props, meta, {
      errors: mergedErrors,
      prefixCls: prefixCls,
      status: mergedValidateStatus,
      onDomErrorVisibleChange: setDomErrorVisible,
      validateStatus: mergedValidateStatus
    }), /*#__PURE__*/React.createElement(FormItemContext.Provider, {
      value: {
        updateItemErrors: updateChildItemErrors
      }
    }, baseChildren)));
  }

  var isRenderProps = typeof children === 'function'; // Record for real component render

  var updateRef = useRef(0);
  updateRef.current += 1;

  if (!hasName && !isRenderProps && !dependencies) {
    return renderLayout(children);
  }

  var variables = {};

  if (typeof label === 'string') {
    variables.label = label;
  }

  if (messageVariables) {
    variables = _extends(_extends({}, variables), messageVariables);
  }

  return /*#__PURE__*/React.createElement(Field, _extends({}, props, {
    messageVariables: variables,
    trigger: trigger,
    validateTrigger: mergedValidateTrigger,
    onReset: function onReset() {
      setDomErrorVisible(false);
    }
  }), function (control, meta, context) {
    var errors = meta.errors;
    var mergedName = toArray(name).length && meta ? meta.name : [];
    var fieldId = getFieldId(mergedName, formName);

    if (noStyle) {
      // Clean up origin one
      var originErrorName = nameRef.current.join(NAME_SPLIT);
      nameRef.current = _toConsumableArray(mergedName);

      if (fieldKey) {
        var fieldKeys = Array.isArray(fieldKey) ? fieldKey : [fieldKey];
        nameRef.current = [].concat(_toConsumableArray(mergedName.slice(0, -1)), _toConsumableArray(fieldKeys));
      }

      updateItemErrors(nameRef.current.join(NAME_SPLIT), errors, originErrorName);
    }

    var isRequired = required !== undefined ? required : !!(rules && rules.some(function (rule) {
      if (rule && _typeof(rule) === 'object' && rule.required) {
        return true;
      }

      if (typeof rule === 'function') {
        var ruleEntity = rule(context);
        return ruleEntity && ruleEntity.required;
      }

      return false;
    })); // ======================= Children =======================

    var mergedControl = _extends({}, control);

    var childNode = null;
    devWarning(!(shouldUpdate && dependencies), 'Form.Item', \\"\`shouldUpdate\` and \`dependencies\` shouldn't be used together. See https://ant.design/components/form/#dependencies.\\");

    if (Array.isArray(children) && hasName) {
      devWarning(false, 'Form.Item', '\`children\` is array of render props cannot have \`name\`.');
      childNode = children;
    } else if (isRenderProps && (!(shouldUpdate || dependencies) || hasName)) {
      devWarning(!!(shouldUpdate || dependencies), 'Form.Item', '\`children\` of render props only work with \`shouldUpdate\` or \`dependencies\`.');
      devWarning(!hasName, 'Form.Item', \\"Do not use \`name\` with \`children\` of render props since it's not a field.\\");
    } else if (dependencies && !isRenderProps && !hasName) {
      devWarning(false, 'Form.Item', 'Must set \`name\` or use render props when \`dependencies\` is set.');
    } else if (isValidElement(children)) {
      devWarning(children.props.defaultValue === undefined, 'Form.Item', '\`defaultValue\` will not work on controlled Field. You should use \`initialValues\` of Form instead.');

      var childProps = _extends(_extends({}, children.props), mergedControl);

      if (!childProps.id) {
        childProps.id = fieldId;
      }

      if (supportRef(children)) {
        childProps.ref = getItemRef(mergedName, children);
      } // We should keep user origin event handler


      var triggers = new Set([].concat(_toConsumableArray(toArray(trigger)), _toConsumableArray(toArray(mergedValidateTrigger))));
      triggers.forEach(function (eventName) {
        childProps[eventName] = function () {
          var _a2, _c2;

          var _a, _b, _c;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          (_a = mergedControl[eventName]) === null || _a === void 0 ? void 0 : (_a2 = _a).call.apply(_a2, [mergedControl].concat(args));
          (_c = (_b = children.props)[eventName]) === null || _c === void 0 ? void 0 : (_c2 = _c).call.apply(_c2, [_b].concat(args));
        };
      });
      childNode = /*#__PURE__*/React.createElement(MemoInput, {
        value: mergedControl[props.valuePropName || 'value'],
        update: updateRef.current
      }, cloneElement(children, childProps));
    } else if (isRenderProps && (shouldUpdate || dependencies) && !hasName) {
      childNode = children(context);
    } else {
      devWarning(!mergedName.length, 'Form.Item', '\`name\` is only used for validate React element. If you are using Form.Item as layout display, please remove \`name\` instead.');
      childNode = children;
    }

    return renderLayout(childNode, fieldId, meta, isRequired);
  });
}

var __rest$u = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var FormList = function FormList(_a) {
  var customizePrefixCls = _a.prefixCls,
      children = _a.children,
      props = __rest$u(_a, [\\"prefixCls\\", \\"children\\"]);

  devWarning(!!props.name, 'Form.List', 'Miss \`name\` prop.');

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls;

  var prefixCls = getPrefixCls('form', customizePrefixCls);
  return /*#__PURE__*/React.createElement(List$1, props, function (fields, operation, meta) {
    return /*#__PURE__*/React.createElement(FormItemPrefixContext.Provider, {
      value: {
        prefixCls: prefixCls,
        status: 'error'
      }
    }, children(fields.map(function (field) {
      return _extends(_extends({}, field), {
        fieldKey: field.key
      });
    }), operation, {
      errors: meta.errors
    }));
  });
};

var Form = Form$1;
Form.Item = FormItem;
Form.List = FormList;
Form.ErrorList = ErrorList;
Form.useForm = useForm;
Form.Provider = FormProvider;

Form.create = function () {
  devWarning(false, 'Form', 'antd v4 removed \`Form.create\`. Please remove or use \`@ant-design/compatible\` instead.');
};

// This icon file is generated automatically.
var RotateLeftOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"defs\\", \\"attrs\\": {}, \\"children\\": [{ \\"tag\\": \\"style\\", \\"attrs\\": {} }] }, { \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M672 418H144c-17.7 0-32 14.3-32 32v414c0 17.7 14.3 32 32 32h528c17.7 0 32-14.3 32-32V450c0-17.7-14.3-32-32-32zm-44 402H188V494h440v326z\\" } }, { \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M819.3 328.5c-78.8-100.7-196-153.6-314.6-154.2l-.2-64c0-6.5-7.6-10.1-12.6-6.1l-128 101c-4 3.1-3.9 9.1 0 12.3L492 318.6c5.1 4 12.7.4 12.6-6.1v-63.9c12.9.1 25.9.9 38.8 2.5 42.1 5.2 82.1 18.2 119 38.7 38.1 21.2 71.2 49.7 98.4 84.3 27.1 34.7 46.7 73.7 58.1 115.8a325.95 325.95 0 016.5 140.9h74.9c14.8-103.6-11.3-213-81-302.3z\\" } }] }, \\"name\\": \\"rotate-left\\", \\"theme\\": \\"outlined\\" };

var RotateLeftOutlined = function RotateLeftOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: RotateLeftOutlined$2
  }));
};

RotateLeftOutlined.displayName = 'RotateLeftOutlined';
var RotateLeftOutlined$1 = /*#__PURE__*/React.forwardRef(RotateLeftOutlined);

// This icon file is generated automatically.
var RotateRightOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"defs\\", \\"attrs\\": {}, \\"children\\": [{ \\"tag\\": \\"style\\", \\"attrs\\": {} }] }, { \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M480.5 251.2c13-1.6 25.9-2.4 38.8-2.5v63.9c0 6.5 7.5 10.1 12.6 6.1L660 217.6c4-3.2 4-9.2 0-12.3l-128-101c-5.1-4-12.6-.4-12.6 6.1l-.2 64c-118.6.5-235.8 53.4-314.6 154.2A399.75 399.75 0 00123.5 631h74.9c-.9-5.3-1.7-10.7-2.4-16.1-5.1-42.1-2.1-84.1 8.9-124.8 11.4-42.2 31-81.1 58.1-115.8 27.2-34.7 60.3-63.2 98.4-84.3 37-20.6 76.9-33.6 119.1-38.8z\\" } }, { \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M880 418H352c-17.7 0-32 14.3-32 32v414c0 17.7 14.3 32 32 32h528c17.7 0 32-14.3 32-32V450c0-17.7-14.3-32-32-32zm-44 402H396V494h440v326z\\" } }] }, \\"name\\": \\"rotate-right\\", \\"theme\\": \\"outlined\\" };

var RotateRightOutlined = function RotateRightOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: RotateRightOutlined$2
  }));
};

RotateRightOutlined.displayName = 'RotateRightOutlined';
var RotateRightOutlined$1 = /*#__PURE__*/React.forwardRef(RotateRightOutlined);

// This icon file is generated automatically.
var ZoomInOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M637 443H519V309c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v134H325c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h118v134c0 4.4 3.6 8 8 8h60c4.4 0 8-3.6 8-8V519h118c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8zm284 424L775 721c122.1-148.9 113.6-369.5-26-509-148-148.1-388.4-148.1-537 0-148.1 148.6-148.1 389 0 537 139.5 139.6 360.1 148.1 509 26l146 146c3.2 2.8 8.3 2.8 11 0l43-43c2.8-2.7 2.8-7.8 0-11zM696 696c-118.8 118.7-311.2 118.7-430 0-118.7-118.8-118.7-311.2 0-430 118.8-118.7 311.2-118.7 430 0 118.7 118.8 118.7 311.2 0 430z\\" } }] }, \\"name\\": \\"zoom-in\\", \\"theme\\": \\"outlined\\" };

var ZoomInOutlined = function ZoomInOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: ZoomInOutlined$2
  }));
};

ZoomInOutlined.displayName = 'ZoomInOutlined';
var ZoomInOutlined$1 = /*#__PURE__*/React.forwardRef(ZoomInOutlined);

// This icon file is generated automatically.
var ZoomOutOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M637 443H325c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h312c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8zm284 424L775 721c122.1-148.9 113.6-369.5-26-509-148-148.1-388.4-148.1-537 0-148.1 148.6-148.1 389 0 537 139.5 139.6 360.1 148.1 509 26l146 146c3.2 2.8 8.3 2.8 11 0l43-43c2.8-2.7 2.8-7.8 0-11zM696 696c-118.8 118.7-311.2 118.7-430 0-118.7-118.8-118.7-311.2 0-430 118.8-118.7 311.2-118.7 430 0 118.7 118.8 118.7 311.2 0 430z\\" } }] }, \\"name\\": \\"zoom-out\\", \\"theme\\": \\"outlined\\" };

var ZoomOutOutlined = function ZoomOutOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: ZoomOutOutlined$2
  }));
};

ZoomOutOutlined.displayName = 'ZoomOutOutlined';
var ZoomOutOutlined$1 = /*#__PURE__*/React.forwardRef(ZoomOutOutlined);

var __rest$t = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var icons = {
  rotateLeft: /*#__PURE__*/React.createElement(RotateLeftOutlined$1, null),
  rotateRight: /*#__PURE__*/React.createElement(RotateRightOutlined$1, null),
  zoomIn: /*#__PURE__*/React.createElement(ZoomInOutlined$1, null),
  zoomOut: /*#__PURE__*/React.createElement(ZoomOutOutlined$1, null),
  close: /*#__PURE__*/React.createElement(CloseOutlined$1, null),
  left: /*#__PURE__*/React.createElement(LeftOutlined$1, null),
  right: /*#__PURE__*/React.createElement(RightOutlined$1, null)
};

var InternalPreviewGroup = function InternalPreviewGroup(_a) {
  var customizePrefixCls = _a.previewPrefixCls,
      props = __rest$t(_a, [\\"previewPrefixCls\\"]);

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls;

  var prefixCls = getPrefixCls('image-preview', customizePrefixCls);
  return /*#__PURE__*/React.createElement(RcImage.PreviewGroup, _extends({
    previewPrefixCls: prefixCls,
    icons: icons
  }, props));
};

var __rest$s = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var Image$1 = function Image(_a) {
  var customizePrefixCls = _a.prefixCls,
      preview = _a.preview,
      otherProps = __rest$s(_a, [\\"prefixCls\\", \\"preview\\"]);

  var _useContext = useContext(ConfigContext),
      getPrefixCls = _useContext.getPrefixCls;

  var prefixCls = getPrefixCls('image', customizePrefixCls);

  var _useContext2 = useContext(ConfigContext),
      _useContext2$locale = _useContext2.locale,
      contextLocale = _useContext2$locale === void 0 ? localeValues : _useContext2$locale;

  var imageLocale = contextLocale.Image || localeValues.Image;
  var mergedPreview = React.useMemo(function () {
    if (preview === false) {
      return preview;
    }

    return _extends({
      mask: /*#__PURE__*/React.createElement(\\"div\\", {
        className: \\"\\".concat(prefixCls, \\"-mask-info\\")
      }, /*#__PURE__*/React.createElement(EyeOutlined$1, null), imageLocale === null || imageLocale === void 0 ? void 0 : imageLocale.preview),
      icons: icons
    }, _typeof(preview) === 'object' ? preview : null);
  }, [preview, imageLocale]);
  return /*#__PURE__*/React.createElement(RcImage, _extends({
    prefixCls: prefixCls,
    preview: mergedPreview
  }, otherProps));
};

Image$1.PreviewGroup = InternalPreviewGroup;

// This icon file is generated automatically.
var UpOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M890.5 755.3L537.9 269.2c-12.8-17.6-39-17.6-51.7 0L133.5 755.3A8 8 0 00140 768h75c5.1 0 9.9-2.5 12.9-6.6L512 369.8l284.1 391.6c3 4.1 7.8 6.6 12.9 6.6h75c6.5 0 10.3-7.4 6.5-12.7z\\" } }] }, \\"name\\": \\"up\\", \\"theme\\": \\"outlined\\" };

var UpOutlined = function UpOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: UpOutlined$2
  }));
};

UpOutlined.displayName = 'UpOutlined';
var UpOutlined$1 = /*#__PURE__*/React.forwardRef(UpOutlined);

var __rest$r = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var InputNumber = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _classNames;

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  var size = React.useContext(SizeContext$1);

  var className = props.className,
      customizeSize = props.size,
      customizePrefixCls = props.prefixCls,
      _props$bordered = props.bordered,
      bordered = _props$bordered === void 0 ? true : _props$bordered,
      readOnly = props.readOnly,
      others = __rest$r(props, [\\"className\\", \\"size\\", \\"prefixCls\\", \\"bordered\\", \\"readOnly\\"]);

  var prefixCls = getPrefixCls('input-number', customizePrefixCls);
  var upIcon = /*#__PURE__*/React.createElement(UpOutlined$1, {
    className: \\"\\".concat(prefixCls, \\"-handler-up-inner\\")
  });
  var downIcon = /*#__PURE__*/React.createElement(DownOutlined$1, {
    className: \\"\\".concat(prefixCls, \\"-handler-down-inner\\")
  });
  var mergeSize = customizeSize || size;
  var inputNumberClass = classNames((_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-lg\\"), mergeSize === 'large'), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-sm\\"), mergeSize === 'small'), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-readonly\\"), readOnly), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-borderless\\"), !bordered), _classNames), className);
  return /*#__PURE__*/React.createElement(RcInputNumber, _extends({
    ref: ref,
    className: inputNumberClass,
    upHandler: upIcon,
    downHandler: downIcon,
    prefixCls: prefixCls,
    readOnly: readOnly
  }, others));
});
InputNumber.defaultProps = {
  step: 1
};

var Layout = Layout$1;
Layout.Header = Header;
Layout.Footer = Footer;
Layout.Content = Content;
Layout.Sider = Sider;

var __rest$q = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var SpinSizes = tuple('small', 'default', 'large'); // Render indicator

var defaultIndicator = null;

function renderIndicator(prefixCls, props) {
  var indicator = props.indicator;
  var dotClassName = \\"\\".concat(prefixCls, \\"-dot\\"); // should not be render default indicator when indicator value is null

  if (indicator === null) {
    return null;
  }

  if (isValidElement(indicator)) {
    return cloneElement(indicator, {
      className: classNames(indicator.props.className, dotClassName)
    });
  }

  if (isValidElement(defaultIndicator)) {
    return cloneElement(defaultIndicator, {
      className: classNames(defaultIndicator.props.className, dotClassName)
    });
  }

  return /*#__PURE__*/React.createElement(\\"span\\", {
    className: classNames(dotClassName, \\"\\".concat(prefixCls, \\"-dot-spin\\"))
  }, /*#__PURE__*/React.createElement(\\"i\\", {
    className: \\"\\".concat(prefixCls, \\"-dot-item\\")
  }), /*#__PURE__*/React.createElement(\\"i\\", {
    className: \\"\\".concat(prefixCls, \\"-dot-item\\")
  }), /*#__PURE__*/React.createElement(\\"i\\", {
    className: \\"\\".concat(prefixCls, \\"-dot-item\\")
  }), /*#__PURE__*/React.createElement(\\"i\\", {
    className: \\"\\".concat(prefixCls, \\"-dot-item\\")
  }));
}

function shouldDelay(spinning, delay) {
  return !!spinning && !!delay && !isNaN(Number(delay));
}

var Spin = /*#__PURE__*/function (_React$Component) {
  _inherits(Spin, _React$Component);

  var _super = _createSuper(Spin);

  function Spin(props) {
    var _this;

    _classCallCheck(this, Spin);

    _this = _super.call(this, props);

    _this.debouncifyUpdateSpinning = function (props) {
      var _ref = props || _this.props,
          delay = _ref.delay;

      if (delay) {
        _this.cancelExistingSpin();

        _this.updateSpinning = debounce(_this.originalUpdateSpinning, delay);
      }
    };

    _this.updateSpinning = function () {
      var spinning = _this.props.spinning;
      var currentSpinning = _this.state.spinning;

      if (currentSpinning !== spinning) {
        _this.setState({
          spinning: spinning
        });
      }
    };

    _this.renderSpin = function (_ref2) {
      var _classNames;

      var getPrefixCls = _ref2.getPrefixCls,
          direction = _ref2.direction;

      var _a = _this.props,
          customizePrefixCls = _a.prefixCls,
          className = _a.className,
          size = _a.size,
          tip = _a.tip,
          wrapperClassName = _a.wrapperClassName,
          style = _a.style,
          restProps = __rest$q(_a, [\\"prefixCls\\", \\"className\\", \\"size\\", \\"tip\\", \\"wrapperClassName\\", \\"style\\"]);

      var spinning = _this.state.spinning;
      var prefixCls = getPrefixCls('spin', customizePrefixCls);
      var spinClassName = classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-sm\\"), size === 'small'), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-lg\\"), size === 'large'), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-spinning\\"), spinning), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-show-text\\"), !!tip), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), _classNames), className); // fix https://fb.me/react-unknown-prop

      var divProps = omit(restProps, ['spinning', 'delay', 'indicator']);
      var spinElement = /*#__PURE__*/React.createElement(\\"div\\", _extends({}, divProps, {
        style: style,
        className: spinClassName
      }), renderIndicator(prefixCls, _this.props), tip ? /*#__PURE__*/React.createElement(\\"div\\", {
        className: \\"\\".concat(prefixCls, \\"-text\\")
      }, tip) : null);

      if (_this.isNestedPattern()) {
        var containerClassName = classNames(\\"\\".concat(prefixCls, \\"-container\\"), _defineProperty({}, \\"\\".concat(prefixCls, \\"-blur\\"), spinning));
        return /*#__PURE__*/React.createElement(\\"div\\", _extends({}, divProps, {
          className: classNames(\\"\\".concat(prefixCls, \\"-nested-loading\\"), wrapperClassName)
        }), spinning && /*#__PURE__*/React.createElement(\\"div\\", {
          key: \\"loading\\"
        }, spinElement), /*#__PURE__*/React.createElement(\\"div\\", {
          className: containerClassName,
          key: \\"container\\"
        }, _this.props.children));
      }

      return spinElement;
    };

    var spinning = props.spinning,
        delay = props.delay;
    var shouldBeDelayed = shouldDelay(spinning, delay);
    _this.state = {
      spinning: spinning && !shouldBeDelayed
    };
    _this.originalUpdateSpinning = _this.updateSpinning;

    _this.debouncifyUpdateSpinning(props);

    return _this;
  }

  _createClass(Spin, [{
    key: \\"componentDidMount\\",
    value: function componentDidMount() {
      this.updateSpinning();
    }
  }, {
    key: \\"componentDidUpdate\\",
    value: function componentDidUpdate() {
      this.debouncifyUpdateSpinning();
      this.updateSpinning();
    }
  }, {
    key: \\"componentWillUnmount\\",
    value: function componentWillUnmount() {
      this.cancelExistingSpin();
    }
  }, {
    key: \\"cancelExistingSpin\\",
    value: function cancelExistingSpin() {
      var updateSpinning = this.updateSpinning;

      if (updateSpinning && updateSpinning.cancel) {
        updateSpinning.cancel();
      }
    }
  }, {
    key: \\"isNestedPattern\\",
    value: function isNestedPattern() {
      return !!(this.props && typeof this.props.children !== 'undefined');
    }
  }, {
    key: \\"render\\",
    value: function render() {
      return /*#__PURE__*/React.createElement(ConfigConsumer, null, this.renderSpin);
    }
  }], [{
    key: \\"setDefaultIndicator\\",
    value: function setDefaultIndicator(indicator) {
      defaultIndicator = indicator;
    }
  }]);

  return Spin;
}(React.Component);

Spin.defaultProps = {
  spinning: true,
  size: 'default',
  wrapperClassName: ''
};

// This icon file is generated automatically.
var DoubleLeftOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M272.9 512l265.4-339.1c4.1-5.2.4-12.9-6.3-12.9h-77.3c-4.9 0-9.6 2.3-12.6 6.1L186.8 492.3a31.99 31.99 0 000 39.5l255.3 326.1c3 3.9 7.7 6.1 12.6 6.1H532c6.7 0 10.4-7.7 6.3-12.9L272.9 512zm304 0l265.4-339.1c4.1-5.2.4-12.9-6.3-12.9h-77.3c-4.9 0-9.6 2.3-12.6 6.1L490.8 492.3a31.99 31.99 0 000 39.5l255.3 326.1c3 3.9 7.7 6.1 12.6 6.1H836c6.7 0 10.4-7.7 6.3-12.9L576.9 512z\\" } }] }, \\"name\\": \\"double-left\\", \\"theme\\": \\"outlined\\" };

var DoubleLeftOutlined = function DoubleLeftOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: DoubleLeftOutlined$2
  }));
};

DoubleLeftOutlined.displayName = 'DoubleLeftOutlined';
var DoubleLeftOutlined$1 = /*#__PURE__*/React.forwardRef(DoubleLeftOutlined);

// This icon file is generated automatically.
var DoubleRightOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M533.2 492.3L277.9 166.1c-3-3.9-7.7-6.1-12.6-6.1H188c-6.7 0-10.4 7.7-6.3 12.9L447.1 512 181.7 851.1A7.98 7.98 0 00188 864h77.3c4.9 0 9.6-2.3 12.6-6.1l255.3-326.1c9.1-11.7 9.1-27.9 0-39.5zm304 0L581.9 166.1c-3-3.9-7.7-6.1-12.6-6.1H492c-6.7 0-10.4 7.7-6.3 12.9L751.1 512 485.7 851.1A7.98 7.98 0 00492 864h77.3c4.9 0 9.6-2.3 12.6-6.1l255.3-326.1c9.1-11.7 9.1-27.9 0-39.5z\\" } }] }, \\"name\\": \\"double-right\\", \\"theme\\": \\"outlined\\" };

var DoubleRightOutlined = function DoubleRightOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: DoubleRightOutlined$2
  }));
};

DoubleRightOutlined.displayName = 'DoubleRightOutlined';
var DoubleRightOutlined$1 = /*#__PURE__*/React.forwardRef(DoubleRightOutlined);

var MiniSelect = function MiniSelect(props) {
  return /*#__PURE__*/React.createElement(Select, _extends({
    size: \\"small\\"
  }, props));
};

MiniSelect.Option = Select.Option;

var __rest$p = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var Pagination = function Pagination(_a) {
  var customizePrefixCls = _a.prefixCls,
      customizeSelectPrefixCls = _a.selectPrefixCls,
      className = _a.className,
      size = _a.size,
      customLocale = _a.locale,
      restProps = __rest$p(_a, [\\"prefixCls\\", \\"selectPrefixCls\\", \\"className\\", \\"size\\", \\"locale\\"]);

  var _useBreakpoint = useBreakpoint(),
      xs = _useBreakpoint.xs;

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  var prefixCls = getPrefixCls('pagination', customizePrefixCls);

  var getIconsProps = function getIconsProps() {
    var ellipsis = /*#__PURE__*/React.createElement(\\"span\\", {
      className: \\"\\".concat(prefixCls, \\"-item-ellipsis\\")
    }, \\"\\\\u2022\\\\u2022\\\\u2022\\");
    var prevIcon = /*#__PURE__*/React.createElement(\\"button\\", {
      className: \\"\\".concat(prefixCls, \\"-item-link\\"),
      type: \\"button\\",
      tabIndex: -1
    }, /*#__PURE__*/React.createElement(LeftOutlined$1, null));
    var nextIcon = /*#__PURE__*/React.createElement(\\"button\\", {
      className: \\"\\".concat(prefixCls, \\"-item-link\\"),
      type: \\"button\\",
      tabIndex: -1
    }, /*#__PURE__*/React.createElement(RightOutlined$1, null));
    var jumpPrevIcon = /*#__PURE__*/React.createElement(\\"a\\", {
      className: \\"\\".concat(prefixCls, \\"-item-link\\")
    }, /*#__PURE__*/React.createElement(\\"div\\", {
      className: \\"\\".concat(prefixCls, \\"-item-container\\")
    }, /*#__PURE__*/React.createElement(DoubleLeftOutlined$1, {
      className: \\"\\".concat(prefixCls, \\"-item-link-icon\\")
    }), ellipsis));
    var jumpNextIcon = /*#__PURE__*/React.createElement(\\"a\\", {
      className: \\"\\".concat(prefixCls, \\"-item-link\\")
    }, /*#__PURE__*/React.createElement(\\"div\\", {
      className: \\"\\".concat(prefixCls, \\"-item-container\\")
    }, /*#__PURE__*/React.createElement(DoubleRightOutlined$1, {
      className: \\"\\".concat(prefixCls, \\"-item-link-icon\\")
    }), ellipsis)); // change arrows direction in right-to-left direction

    if (direction === 'rtl') {
      var _ref = [nextIcon, prevIcon];
      prevIcon = _ref[0];
      nextIcon = _ref[1];
      var _ref2 = [jumpNextIcon, jumpPrevIcon];
      jumpPrevIcon = _ref2[0];
      jumpNextIcon = _ref2[1];
    }

    return {
      prevIcon: prevIcon,
      nextIcon: nextIcon,
      jumpPrevIcon: jumpPrevIcon,
      jumpNextIcon: jumpNextIcon
    };
  };

  var renderPagination = function renderPagination(contextLocale) {
    var locale = _extends(_extends({}, contextLocale), customLocale);

    var isSmall = size === 'small' || !!(xs && !size && restProps.responsive);
    var selectPrefixCls = getPrefixCls('select', customizeSelectPrefixCls);
    var extendedClassName = classNames(_defineProperty({
      mini: isSmall
    }, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), className);
    return /*#__PURE__*/React.createElement(RcPagination, _extends({}, restProps, {
      prefixCls: prefixCls,
      selectPrefixCls: selectPrefixCls
    }, getIconsProps(), {
      className: extendedClassName,
      selectComponentClass: isSmall ? MiniSelect : Select,
      locale: locale
    }));
  };

  return /*#__PURE__*/React.createElement(LocaleReceiver, {
    componentName: \\"Pagination\\",
    defaultLocale: Pagination$1
  }, renderPagination);
};

var __rest$o = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var Meta = function Meta(_a) {
  var customizePrefixCls = _a.prefixCls,
      className = _a.className,
      avatar = _a.avatar,
      title = _a.title,
      description = _a.description,
      others = __rest$o(_a, [\\"prefixCls\\", \\"className\\", \\"avatar\\", \\"title\\", \\"description\\"]);

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls;

  var prefixCls = getPrefixCls('list', customizePrefixCls);
  var classString = classNames(\\"\\".concat(prefixCls, \\"-item-meta\\"), className);
  var content = /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-item-meta-content\\")
  }, title && /*#__PURE__*/React.createElement(\\"h4\\", {
    className: \\"\\".concat(prefixCls, \\"-item-meta-title\\")
  }, title), description && /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-item-meta-description\\")
  }, description));
  return /*#__PURE__*/React.createElement(\\"div\\", _extends({}, others, {
    className: classString
  }), avatar && /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-item-meta-avatar\\")
  }, avatar), (title || description) && content);
};

var Item$1 = function Item(_a) {
  var customizePrefixCls = _a.prefixCls,
      children = _a.children,
      actions = _a.actions,
      extra = _a.extra,
      className = _a.className,
      colStyle = _a.colStyle,
      others = __rest$o(_a, [\\"prefixCls\\", \\"children\\", \\"actions\\", \\"extra\\", \\"className\\", \\"colStyle\\"]);

  var _React$useContext2 = React.useContext(ListContext),
      grid = _React$useContext2.grid,
      itemLayout = _React$useContext2.itemLayout;

  var _React$useContext3 = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext3.getPrefixCls;

  var isItemContainsTextNodeAndNotSingular = function isItemContainsTextNodeAndNotSingular() {
    var result;
    React.Children.forEach(children, function (element) {
      if (typeof element === 'string') {
        result = true;
      }
    });
    return result && React.Children.count(children) > 1;
  };

  var isFlexMode = function isFlexMode() {
    if (itemLayout === 'vertical') {
      return !!extra;
    }

    return !isItemContainsTextNodeAndNotSingular();
  };

  var prefixCls = getPrefixCls('list', customizePrefixCls);
  var actionsContent = actions && actions.length > 0 && /*#__PURE__*/React.createElement(\\"ul\\", {
    className: \\"\\".concat(prefixCls, \\"-item-action\\"),
    key: \\"actions\\"
  }, actions.map(function (action, i) {
    return (
      /*#__PURE__*/
      // eslint-disable-next-line react/no-array-index-key
      React.createElement(\\"li\\", {
        key: \\"\\".concat(prefixCls, \\"-item-action-\\").concat(i)
      }, action, i !== actions.length - 1 && /*#__PURE__*/React.createElement(\\"em\\", {
        className: \\"\\".concat(prefixCls, \\"-item-action-split\\")
      }))
    );
  }));
  var Element = grid ? 'div' : 'li';
  var itemChildren = /*#__PURE__*/React.createElement(Element, _extends({}, others, {
    // \`li\` element \`onCopy\` prop args is not same as \`div\`
    className: classNames(\\"\\".concat(prefixCls, \\"-item\\"), _defineProperty({}, \\"\\".concat(prefixCls, \\"-item-no-flex\\"), !isFlexMode()), className)
  }), itemLayout === 'vertical' && extra ? [/*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-item-main\\"),
    key: \\"content\\"
  }, children, actionsContent), /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-item-extra\\"),
    key: \\"extra\\"
  }, extra)] : [children, actionsContent, cloneElement(extra, {
    key: 'extra'
  })]);
  return grid ? /*#__PURE__*/React.createElement(Col, {
    flex: 1,
    style: colStyle
  }, itemChildren) : itemChildren;
};

Item$1.Meta = Meta;

var __rest$n = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var ListContext = /*#__PURE__*/React.createContext({});
var ListConsumer = ListContext.Consumer;

function List(_a) {
  var _classNames;

  var _a$pagination = _a.pagination,
      pagination = _a$pagination === void 0 ? false : _a$pagination,
      customizePrefixCls = _a.prefixCls,
      _a$bordered = _a.bordered,
      bordered = _a$bordered === void 0 ? false : _a$bordered,
      _a$split = _a.split,
      split = _a$split === void 0 ? true : _a$split,
      className = _a.className,
      children = _a.children,
      itemLayout = _a.itemLayout,
      loadMore = _a.loadMore,
      grid = _a.grid,
      _a$dataSource = _a.dataSource,
      dataSource = _a$dataSource === void 0 ? [] : _a$dataSource,
      size = _a.size,
      header = _a.header,
      footer = _a.footer,
      _a$loading = _a.loading,
      loading = _a$loading === void 0 ? false : _a$loading,
      rowKey = _a.rowKey,
      renderItem = _a.renderItem,
      locale = _a.locale,
      rest = __rest$n(_a, [\\"pagination\\", \\"prefixCls\\", \\"bordered\\", \\"split\\", \\"className\\", \\"children\\", \\"itemLayout\\", \\"loadMore\\", \\"grid\\", \\"dataSource\\", \\"size\\", \\"header\\", \\"footer\\", \\"loading\\", \\"rowKey\\", \\"renderItem\\", \\"locale\\"]);

  var paginationObj = pagination && _typeof(pagination) === 'object' ? pagination : {};

  var _React$useState = React.useState(paginationObj.defaultCurrent || 1),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      paginationCurrent = _React$useState2[0],
      setPaginationCurrent = _React$useState2[1];

  var _React$useState3 = React.useState(paginationObj.defaultPageSize || 10),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      paginationSize = _React$useState4[0],
      setPaginationSize = _React$useState4[1];

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      renderEmpty = _React$useContext.renderEmpty,
      direction = _React$useContext.direction;

  var defaultPaginationProps = {
    current: 1,
    total: 0
  };
  var keys = {};

  var triggerPaginationEvent = function triggerPaginationEvent(eventName) {
    return function (page, pageSize) {
      setPaginationCurrent(page);
      setPaginationSize(pageSize);

      if (pagination && pagination[eventName]) {
        pagination[eventName](page, pageSize);
      }
    };
  };

  var onPaginationChange = triggerPaginationEvent('onChange');
  var onPaginationShowSizeChange = triggerPaginationEvent('onShowSizeChange');

  var renderInnerItem = function renderInnerItem(item, index) {
    if (!renderItem) return null;
    var key;

    if (typeof rowKey === 'function') {
      key = rowKey(item);
    } else if (typeof rowKey === 'string') {
      key = item[rowKey];
    } else {
      key = item.key;
    }

    if (!key) {
      key = \\"list-item-\\".concat(index);
    }

    keys[index] = key;
    return renderItem(item, index);
  };

  var isSomethingAfterLastItem = function isSomethingAfterLastItem() {
    return !!(loadMore || pagination || footer);
  };

  var renderEmptyFunc = function renderEmptyFunc(prefixCls, renderEmptyHandler) {
    return /*#__PURE__*/React.createElement(\\"div\\", {
      className: \\"\\".concat(prefixCls, \\"-empty-text\\")
    }, locale && locale.emptyText || renderEmptyHandler('List'));
  };

  var prefixCls = getPrefixCls('list', customizePrefixCls);
  var loadingProp = loading;

  if (typeof loadingProp === 'boolean') {
    loadingProp = {
      spinning: loadingProp
    };
  }

  var isLoading = loadingProp && loadingProp.spinning; // large => lg
  // small => sm

  var sizeCls = '';

  switch (size) {
    case 'large':
      sizeCls = 'lg';
      break;

    case 'small':
      sizeCls = 'sm';
      break;

    default:
      break;
  }

  var classString = classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-vertical\\"), itemLayout === 'vertical'), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-\\").concat(sizeCls), sizeCls), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-split\\"), split), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-bordered\\"), bordered), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-loading\\"), isLoading), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-grid\\"), grid), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-something-after-last-item\\"), isSomethingAfterLastItem()), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), _classNames), className);

  var paginationProps = _extends(_extends(_extends({}, defaultPaginationProps), {
    total: dataSource.length,
    current: paginationCurrent,
    pageSize: paginationSize
  }), pagination || {});

  var largestPage = Math.ceil(paginationProps.total / paginationProps.pageSize);

  if (paginationProps.current > largestPage) {
    paginationProps.current = largestPage;
  }

  var paginationContent = pagination ? /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-pagination\\")
  }, /*#__PURE__*/React.createElement(Pagination, _extends({}, paginationProps, {
    onChange: onPaginationChange,
    onShowSizeChange: onPaginationShowSizeChange
  }))) : null;

  var splitDataSource = _toConsumableArray(dataSource);

  if (pagination) {
    if (dataSource.length > (paginationProps.current - 1) * paginationProps.pageSize) {
      splitDataSource = _toConsumableArray(dataSource).splice((paginationProps.current - 1) * paginationProps.pageSize, paginationProps.pageSize);
    }
  }

  var screens = useBreakpoint();
  var currentBreakpoint = React.useMemo(function () {
    for (var i = 0; i < responsiveArray.length; i += 1) {
      var breakpoint = responsiveArray[i];

      if (screens[breakpoint]) {
        return breakpoint;
      }
    }

    return undefined;
  }, [screens]);
  var colStyle = React.useMemo(function () {
    if (!grid) {
      return undefined;
    }

    var columnCount = currentBreakpoint && grid[currentBreakpoint] ? grid[currentBreakpoint] : grid.column;

    if (columnCount) {
      return {
        width: \\"\\".concat(100 / columnCount, \\"%\\"),
        maxWidth: \\"\\".concat(100 / columnCount, \\"%\\")
      };
    }
  }, [grid === null || grid === void 0 ? void 0 : grid.column, currentBreakpoint]);
  var childrenContent = isLoading && /*#__PURE__*/React.createElement(\\"div\\", {
    style: {
      minHeight: 53
    }
  });

  if (splitDataSource.length > 0) {
    var items = splitDataSource.map(function (item, index) {
      return renderInnerItem(item, index);
    });
    var childrenList = React.Children.map(items, function (child, index) {
      return /*#__PURE__*/React.createElement(\\"div\\", {
        key: keys[index],
        style: colStyle
      }, child);
    });
    childrenContent = grid ? /*#__PURE__*/React.createElement(Row$1, {
      gutter: grid.gutter
    }, childrenList) : /*#__PURE__*/React.createElement(\\"ul\\", {
      className: \\"\\".concat(prefixCls, \\"-items\\")
    }, items);
  } else if (!children && !isLoading) {
    childrenContent = renderEmptyFunc(prefixCls, renderEmpty);
  }

  var paginationPosition = paginationProps.position || 'bottom';
  return /*#__PURE__*/React.createElement(ListContext.Provider, {
    value: {
      grid: grid,
      itemLayout: itemLayout
    }
  }, /*#__PURE__*/React.createElement(\\"div\\", _extends({
    className: classString
  }, rest), (paginationPosition === 'top' || paginationPosition === 'both') && paginationContent, header && /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-header\\")
  }, header), /*#__PURE__*/React.createElement(Spin, loadingProp, childrenContent, children), footer && /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-footer\\")
  }, footer), loadMore || (paginationPosition === 'bottom' || paginationPosition === 'both') && paginationContent));
}

List.Item = Item$1;

var __rest$m = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var Option = RcMentions.Option;

function loadingFilterOption() {
  return true;
}

var InternalMentions = function InternalMentions(_a, ref) {
  var _classNames;

  var customizePrefixCls = _a.prefixCls,
      className = _a.className,
      disabled = _a.disabled,
      loading = _a.loading,
      filterOption = _a.filterOption,
      children = _a.children,
      notFoundContent = _a.notFoundContent,
      restProps = __rest$m(_a, [\\"prefixCls\\", \\"className\\", \\"disabled\\", \\"loading\\", \\"filterOption\\", \\"children\\", \\"notFoundContent\\"]);

  var _React$useState = React.useState(false),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      focused = _React$useState2[0],
      setFocused = _React$useState2[1];

  var innerRef = React.useRef();
  var mergedRef = composeRef(ref, innerRef);

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      renderEmpty = _React$useContext.renderEmpty,
      direction = _React$useContext.direction;

  var onFocus = function onFocus() {
    if (restProps.onFocus) {
      restProps.onFocus.apply(restProps, arguments);
    }

    setFocused(true);
  };

  var onBlur = function onBlur() {
    if (restProps.onBlur) {
      restProps.onBlur.apply(restProps, arguments);
    }

    setFocused(false);
  };

  var getNotFoundContent = function getNotFoundContent() {
    if (notFoundContent !== undefined) {
      return notFoundContent;
    }

    return renderEmpty('Select');
  };

  var getOptions = function getOptions() {
    if (loading) {
      return /*#__PURE__*/React.createElement(Option, {
        value: \\"ANTD_SEARCHING\\",
        disabled: true
      }, /*#__PURE__*/React.createElement(Spin, {
        size: \\"small\\"
      }));
    }

    return children;
  };

  var getFilterOption = function getFilterOption() {
    if (loading) {
      return loadingFilterOption;
    }

    return filterOption;
  };

  var prefixCls = getPrefixCls('mentions', customizePrefixCls);
  var mergedClassName = classNames((_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-disabled\\"), disabled), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-focused\\"), focused), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), _classNames), className);
  return /*#__PURE__*/React.createElement(RcMentions, _extends({
    prefixCls: prefixCls,
    notFoundContent: getNotFoundContent(),
    className: mergedClassName,
    disabled: disabled,
    direction: direction
  }, restProps, {
    filterOption: getFilterOption(),
    onFocus: onFocus,
    onBlur: onBlur,
    ref: mergedRef
  }), getOptions());
};

var Mentions = /*#__PURE__*/React.forwardRef(InternalMentions);
Mentions.displayName = 'Mentions';
Mentions.Option = Option;

Mentions.getMentions = function () {
  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var config = arguments.length > 1 ? arguments[1] : undefined;

  var _ref = config || {},
      _ref$prefix = _ref.prefix,
      prefix = _ref$prefix === void 0 ? '@' : _ref$prefix,
      _ref$split = _ref.split,
      split = _ref$split === void 0 ? ' ' : _ref$split;

  var prefixList = Array.isArray(prefix) ? prefix : [prefix];
  return value.split(split).map(function () {
    var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var hitPrefix = null;
    prefixList.some(function (prefixStr) {
      var startStr = str.slice(0, prefixStr.length);

      if (startStr === prefixStr) {
        hitPrefix = prefixStr;
        return true;
      }

      return false;
    });

    if (hitPrefix !== null) {
      return {
        prefix: hitPrefix,
        value: str.slice(hitPrefix.length)
      };
    }

    return null;
  }).filter(function (entity) {
    return !!entity && !!entity.value;
  });
};

function usePatchElement() {
  var _React$useState = React.useState([]),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      elements = _React$useState2[0],
      setElements = _React$useState2[1];

  var patchElement = React.useCallback(function (element) {
    // append a new element to elements (and create a new ref)
    setElements(function (originElements) {
      return [].concat(_toConsumableArray(originElements), [element]);
    }); // return a function that removes the new element out of elements (and create a new ref)
    // it works a little like useEffect

    return function () {
      setElements(function (originElements) {
        return originElements.filter(function (ele) {
          return ele !== element;
        });
      });
    };
  }, []);
  return [elements, patchElement];
}

var ActionButton = function ActionButton(props) {
  var clickedRef = React.useRef(false);
  var ref = React.useRef();

  var _React$useState = React.useState(false),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      loading = _React$useState2[0],
      setLoading = _React$useState2[1];

  React.useEffect(function () {
    var timeoutId;

    if (props.autoFocus) {
      var $this = ref.current;
      timeoutId = setTimeout(function () {
        return $this.focus();
      });
    }

    return function () {
      if (timeoutId) {
        clearTimeout(timeoutId);
      }
    };
  }, []);

  var handlePromiseOnOk = function handlePromiseOnOk(returnValueOfOnOk) {
    var closeModal = props.closeModal;

    if (!returnValueOfOnOk || !returnValueOfOnOk.then) {
      return;
    }

    setLoading(true);
    returnValueOfOnOk.then(function () {
      // It's unnecessary to set loading=false, for the Modal will be unmounted after close.
      // setState({ loading: false });
      closeModal.apply(void 0, arguments);
    }, function (e) {
      // Emit error when catch promise reject
      // eslint-disable-next-line no-console
      console.error(e); // See: https://github.com/ant-design/ant-design/issues/6183

      setLoading(false);
      clickedRef.current = false;
    });
  };

  var onClick = function onClick() {
    var actionFn = props.actionFn,
        closeModal = props.closeModal;

    if (clickedRef.current) {
      return;
    }

    clickedRef.current = true;

    if (!actionFn) {
      closeModal();
      return;
    }

    var returnValueOfOnOk;

    if (actionFn.length) {
      returnValueOfOnOk = actionFn(closeModal); // https://github.com/ant-design/ant-design/issues/23358

      clickedRef.current = false;
    } else {
      returnValueOfOnOk = actionFn();

      if (!returnValueOfOnOk) {
        closeModal();
        return;
      }
    }

    handlePromiseOnOk(returnValueOfOnOk);
  };

  var type = props.type,
      children = props.children,
      prefixCls = props.prefixCls,
      buttonProps = props.buttonProps;
  return /*#__PURE__*/React.createElement(Button$1, _extends({}, convertLegacyProps(type), {
    onClick: onClick,
    loading: loading,
    prefixCls: prefixCls
  }, buttonProps, {
    ref: ref
  }), children);
};

var ConfirmDialog = function ConfirmDialog(props) {
  var icon = props.icon,
      onCancel = props.onCancel,
      onOk = props.onOk,
      close = props.close,
      zIndex = props.zIndex,
      afterClose = props.afterClose,
      visible = props.visible,
      keyboard = props.keyboard,
      centered = props.centered,
      getContainer = props.getContainer,
      maskStyle = props.maskStyle,
      okText = props.okText,
      okButtonProps = props.okButtonProps,
      cancelText = props.cancelText,
      cancelButtonProps = props.cancelButtonProps,
      direction = props.direction,
      prefixCls = props.prefixCls,
      rootPrefixCls = props.rootPrefixCls,
      bodyStyle = props.bodyStyle,
      _props$closable = props.closable,
      closable = _props$closable === void 0 ? false : _props$closable,
      closeIcon = props.closeIcon,
      modalRender = props.modalRender,
      focusTriggerAfterClose = props.focusTriggerAfterClose;
  devWarning(!(typeof icon === 'string' && icon.length > 2), 'Modal', \\"\`icon\` is using ReactNode instead of string naming in v4. Please check \`\\".concat(icon, \\"\` at https://ant.design/components/icon\\")); // 支持传入{ icon: null }来隐藏\`Modal.confirm\`默认的Icon

  var okType = props.okType || 'primary';
  var contentPrefixCls = \\"\\".concat(prefixCls, \\"-confirm\\"); // 默认为 true，保持向下兼容

  var okCancel = 'okCancel' in props ? props.okCancel : true;
  var width = props.width || 416;
  var style = props.style || {};
  var mask = props.mask === undefined ? true : props.mask; // 默认为 false，保持旧版默认行为

  var maskClosable = props.maskClosable === undefined ? false : props.maskClosable;
  var autoFocusButton = props.autoFocusButton === null ? false : props.autoFocusButton || 'ok';
  var transitionName = props.transitionName || 'zoom';
  var maskTransitionName = props.maskTransitionName || 'fade';
  var classString = classNames(contentPrefixCls, \\"\\".concat(contentPrefixCls, \\"-\\").concat(props.type), _defineProperty({}, \\"\\".concat(contentPrefixCls, \\"-rtl\\"), direction === 'rtl'), props.className);
  var cancelButton = okCancel && /*#__PURE__*/React.createElement(ActionButton, {
    actionFn: onCancel,
    closeModal: close,
    autoFocus: autoFocusButton === 'cancel',
    buttonProps: cancelButtonProps,
    prefixCls: \\"\\".concat(rootPrefixCls, \\"-btn\\")
  }, cancelText);
  return /*#__PURE__*/React.createElement(Modal$1, {
    prefixCls: prefixCls,
    className: classString,
    wrapClassName: classNames(_defineProperty({}, \\"\\".concat(contentPrefixCls, \\"-centered\\"), !!props.centered)),
    onCancel: function onCancel() {
      return close({
        triggerCancel: true
      });
    },
    visible: visible,
    title: \\"\\",
    transitionName: transitionName,
    footer: \\"\\",
    maskTransitionName: maskTransitionName,
    mask: mask,
    maskClosable: maskClosable,
    maskStyle: maskStyle,
    style: style,
    width: width,
    zIndex: zIndex,
    afterClose: afterClose,
    keyboard: keyboard,
    centered: centered,
    getContainer: getContainer,
    closable: closable,
    closeIcon: closeIcon,
    modalRender: modalRender,
    focusTriggerAfterClose: focusTriggerAfterClose
  }, /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(contentPrefixCls, \\"-body-wrapper\\")
  }, /*#__PURE__*/React.createElement(ConfigProvider, {
    prefixCls: rootPrefixCls
  }, /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(contentPrefixCls, \\"-body\\"),
    style: bodyStyle
  }, icon, props.title === undefined ? null : /*#__PURE__*/React.createElement(\\"span\\", {
    className: \\"\\".concat(contentPrefixCls, \\"-title\\")
  }, props.title), /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(contentPrefixCls, \\"-content\\")
  }, props.content))), /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(contentPrefixCls, \\"-btns\\")
  }, cancelButton, /*#__PURE__*/React.createElement(ActionButton, {
    type: okType,
    actionFn: onOk,
    closeModal: close,
    autoFocus: autoFocusButton === 'ok',
    buttonProps: okButtonProps,
    prefixCls: \\"\\".concat(rootPrefixCls, \\"-btn\\")
  }, okText))));
};

var HookModal = function HookModal(_ref, ref) {
  var afterClose = _ref.afterClose,
      config = _ref.config;

  var _React$useState = React.useState(true),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      visible = _React$useState2[0],
      setVisible = _React$useState2[1];

  var _React$useState3 = React.useState(config),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      innerConfig = _React$useState4[0],
      setInnerConfig = _React$useState4[1];

  var _React$useContext = React.useContext(ConfigContext),
      direction = _React$useContext.direction,
      getPrefixCls = _React$useContext.getPrefixCls;

  var prefixCls = getPrefixCls('modal');
  var rootPrefixCls = getPrefixCls();

  function close() {
    setVisible(false);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var triggerCancel = args.some(function (param) {
      return param && param.triggerCancel;
    });

    if (innerConfig.onCancel && triggerCancel) {
      innerConfig.onCancel();
    }
  }

  React.useImperativeHandle(ref, function () {
    return {
      destroy: close,
      update: function update(newConfig) {
        setInnerConfig(function (originConfig) {
          return _extends(_extends({}, originConfig), newConfig);
        });
      }
    };
  });
  return /*#__PURE__*/React.createElement(LocaleReceiver, {
    componentName: \\"Modal\\",
    defaultLocale: localeValues.Modal
  }, function (modalLocale) {
    return /*#__PURE__*/React.createElement(ConfirmDialog, _extends({
      prefixCls: prefixCls,
      rootPrefixCls: rootPrefixCls
    }, innerConfig, {
      close: close,
      visible: visible,
      afterClose: afterClose,
      okText: innerConfig.okText || (innerConfig.okCancel ? modalLocale.okText : modalLocale.justOkText),
      direction: direction,
      cancelText: innerConfig.cancelText || modalLocale.cancelText
    }));
  });
};

var HookModal$1 = /*#__PURE__*/React.forwardRef(HookModal);

var __rest$l = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var defaultRootPrefixCls = 'ant';

function getRootPrefixCls() {
  return defaultRootPrefixCls;
}

function confirm(config) {
  var div = document.createElement('div');
  document.body.appendChild(div); // eslint-disable-next-line @typescript-eslint/no-use-before-define

  var currentConfig = _extends(_extends({}, config), {
    close: close,
    visible: true
  });

  function destroy() {
    var unmountResult = ReactDOM.unmountComponentAtNode(div);

    if (unmountResult && div.parentNode) {
      div.parentNode.removeChild(div);
    }

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var triggerCancel = args.some(function (param) {
      return param && param.triggerCancel;
    });

    if (config.onCancel && triggerCancel) {
      config.onCancel.apply(config, args);
    }

    for (var i = 0; i < destroyFns.length; i++) {
      var fn = destroyFns[i]; // eslint-disable-next-line @typescript-eslint/no-use-before-define

      if (fn === close) {
        destroyFns.splice(i, 1);
        break;
      }
    }
  }

  function render(_a) {
    var okText = _a.okText,
        cancelText = _a.cancelText,
        prefixCls = _a.prefixCls,
        props = __rest$l(_a, [\\"okText\\", \\"cancelText\\", \\"prefixCls\\"]);
    /**
     * https://github.com/ant-design/ant-design/issues/23623
     *
     * Sync render blocks React event. Let's make this async.
     */


    setTimeout(function () {
      var runtimeLocale = getConfirmLocale();
      ReactDOM.render( /*#__PURE__*/React.createElement(ConfirmDialog, _extends({}, props, {
        prefixCls: prefixCls || \\"\\".concat(getRootPrefixCls(), \\"-modal\\"),
        rootPrefixCls: getRootPrefixCls(),
        okText: okText || (props.okCancel ? runtimeLocale.okText : runtimeLocale.justOkText),
        cancelText: cancelText || runtimeLocale.cancelText
      })), div);
    });
  }

  function close() {
    var _this = this;

    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    currentConfig = _extends(_extends({}, currentConfig), {
      visible: false,
      afterClose: function afterClose() {
        if (typeof config.afterClose === 'function') {
          config.afterClose();
        }

        destroy.apply(_this, args);
      }
    });
    render(currentConfig);
  }

  function update(configUpdate) {
    if (typeof configUpdate === 'function') {
      currentConfig = configUpdate(currentConfig);
    } else {
      currentConfig = _extends(_extends({}, currentConfig), configUpdate);
    }

    render(currentConfig);
  }

  render(currentConfig);
  destroyFns.push(close);
  return {
    destroy: close,
    update: update
  };
}
function withWarn(props) {
  return _extends(_extends({
    icon: /*#__PURE__*/React.createElement(ExclamationCircleOutlined$1, null),
    okCancel: false
  }, props), {
    type: 'warning'
  });
}
function withInfo(props) {
  return _extends(_extends({
    icon: /*#__PURE__*/React.createElement(InfoCircleOutlined$1, null),
    okCancel: false
  }, props), {
    type: 'info'
  });
}
function withSuccess(props) {
  return _extends(_extends({
    icon: /*#__PURE__*/React.createElement(CheckCircleOutlined$1, null),
    okCancel: false
  }, props), {
    type: 'success'
  });
}
function withError(props) {
  return _extends(_extends({
    icon: /*#__PURE__*/React.createElement(CloseCircleOutlined$1, null),
    okCancel: false
  }, props), {
    type: 'error'
  });
}
function withConfirm(props) {
  return _extends(_extends({
    icon: /*#__PURE__*/React.createElement(ExclamationCircleOutlined$1, null),
    okCancel: true
  }, props), {
    type: 'confirm'
  });
}
function globalConfig(_ref) {
  var rootPrefixCls = _ref.rootPrefixCls;

  if (rootPrefixCls) {
    defaultRootPrefixCls = rootPrefixCls;
  }
}

var uuid = 0;
var ElementsHolder = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function (_props, ref) {
  var _usePatchElement = usePatchElement(),
      _usePatchElement2 = _slicedToArray(_usePatchElement, 2),
      elements = _usePatchElement2[0],
      patchElement = _usePatchElement2[1];

  React.useImperativeHandle(ref, function () {
    return {
      patchElement: patchElement
    };
  }, []);
  return /*#__PURE__*/React.createElement(React.Fragment, null, elements);
}));
function useModal() {
  var holderRef = React.useRef(null);
  var getConfirmFunc = React.useCallback(function (withFunc) {
    return function hookConfirm(config) {
      var _a;

      uuid += 1;
      var modalRef = /*#__PURE__*/React.createRef();
      var closeFunc;
      var modal = /*#__PURE__*/React.createElement(HookModal$1, {
        key: \\"modal-\\".concat(uuid),
        config: withFunc(config),
        ref: modalRef,
        afterClose: function afterClose() {
          closeFunc();
        }
      });
      closeFunc = (_a = holderRef.current) === null || _a === void 0 ? void 0 : _a.patchElement(modal);
      return {
        destroy: function destroy() {
          if (modalRef.current) {
            modalRef.current.destroy();
          }
        },
        update: function update(newConfig) {
          if (modalRef.current) {
            modalRef.current.update(newConfig);
          }
        }
      };
    };
  }, []);
  var fns = React.useMemo(function () {
    return {
      info: getConfirmFunc(withInfo),
      success: getConfirmFunc(withSuccess),
      error: getConfirmFunc(withError),
      warning: getConfirmFunc(withWarn),
      confirm: getConfirmFunc(withConfirm)
    };
  }, []); // eslint-disable-next-line react/jsx-key

  return [fns, /*#__PURE__*/React.createElement(ElementsHolder, {
    ref: holderRef
  })];
}

var __rest$k = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var mousePosition;
var destroyFns = []; // ref: https://github.com/ant-design/ant-design/issues/15795

var getClickPosition = function getClickPosition(e) {
  mousePosition = {
    x: e.pageX,
    y: e.pageY
  }; // 100ms 内发生过点击事件，则从点击位置动画展示
  // 否则直接 zoom 展示
  // 这样可以兼容非点击方式展开

  setTimeout(function () {
    mousePosition = null;
  }, 100);
}; // 只有点击事件支持从鼠标位置动画展开


if (canUseDocElement()) {
  document.documentElement.addEventListener('click', getClickPosition, true);
}

var Modal$1 = function Modal(props) {
  var _classNames;

  var _React$useContext = React.useContext(ConfigContext),
      getContextPopupContainer = _React$useContext.getPopupContainer,
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  var handleCancel = function handleCancel(e) {
    var onCancel = props.onCancel;

    if (onCancel) {
      onCancel(e);
    }
  };

  var handleOk = function handleOk(e) {
    var onOk = props.onOk;

    if (onOk) {
      onOk(e);
    }
  };

  var renderFooter = function renderFooter(locale) {
    var okText = props.okText,
        okType = props.okType,
        cancelText = props.cancelText,
        confirmLoading = props.confirmLoading;
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button$1, _extends({
      onClick: handleCancel
    }, props.cancelButtonProps), cancelText || locale.cancelText), /*#__PURE__*/React.createElement(Button$1, _extends({}, convertLegacyProps(okType), {
      loading: confirmLoading,
      onClick: handleOk
    }, props.okButtonProps), okText || locale.okText));
  };

  var customizePrefixCls = props.prefixCls,
      footer = props.footer,
      visible = props.visible,
      wrapClassName = props.wrapClassName,
      centered = props.centered,
      getContainer = props.getContainer,
      closeIcon = props.closeIcon,
      _props$focusTriggerAf = props.focusTriggerAfterClose,
      focusTriggerAfterClose = _props$focusTriggerAf === void 0 ? true : _props$focusTriggerAf,
      restProps = __rest$k(props, [\\"prefixCls\\", \\"footer\\", \\"visible\\", \\"wrapClassName\\", \\"centered\\", \\"getContainer\\", \\"closeIcon\\", \\"focusTriggerAfterClose\\"]);

  var prefixCls = getPrefixCls('modal', customizePrefixCls);
  var defaultFooter = /*#__PURE__*/React.createElement(LocaleReceiver, {
    componentName: \\"Modal\\",
    defaultLocale: getConfirmLocale()
  }, renderFooter);
  var closeIconToRender = /*#__PURE__*/React.createElement(\\"span\\", {
    className: \\"\\".concat(prefixCls, \\"-close-x\\")
  }, closeIcon || /*#__PURE__*/React.createElement(CloseOutlined$1, {
    className: \\"\\".concat(prefixCls, \\"-close-icon\\")
  }));
  var wrapClassNameExtended = classNames(wrapClassName, (_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-centered\\"), !!centered), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-wrap-rtl\\"), direction === 'rtl'), _classNames));
  return /*#__PURE__*/React.createElement(Dialog, _extends({}, restProps, {
    getContainer: getContainer === undefined ? getContextPopupContainer : getContainer,
    prefixCls: prefixCls,
    wrapClassName: wrapClassNameExtended,
    footer: footer === undefined ? defaultFooter : footer,
    visible: visible,
    mousePosition: mousePosition,
    onClose: handleCancel,
    closeIcon: closeIconToRender,
    focusTriggerAfterClose: focusTriggerAfterClose
  }));
};

Modal$1.useModal = useModal;
Modal$1.defaultProps = {
  width: 520,
  transitionName: 'zoom',
  maskTransitionName: 'fade',
  confirmLoading: false,
  visible: false,
  okType: 'primary'
};

function modalWarn(props) {
  return confirm(withWarn(props));
}

var Modal = Modal$1;

Modal.info = function infoFn(props) {
  return confirm(withInfo(props));
};

Modal.success = function successFn(props) {
  return confirm(withSuccess(props));
};

Modal.error = function errorFn(props) {
  return confirm(withError(props));
};

Modal.warning = modalWarn;
Modal.warn = modalWarn;

Modal.confirm = function confirmFn(props) {
  return confirm(withConfirm(props));
};

Modal.destroyAll = function destroyAllFn() {
  while (destroyFns.length) {
    var close = destroyFns.pop();

    if (close) {
      close();
    }
  }
};

Modal.config = globalConfig;

var Title$1 = function Title(_ref) {
  var prefixCls = _ref.prefixCls,
      className = _ref.className,
      width = _ref.width,
      style = _ref.style;
  return /*#__PURE__*/React.createElement(\\"h3\\", {
    className: classNames(prefixCls, className),
    style: _extends({
      width: width
    }, style)
  });
};

var Paragraph$1 = function Paragraph(props) {
  var getWidth = function getWidth(index) {
    var width = props.width,
        _props$rows = props.rows,
        rows = _props$rows === void 0 ? 2 : _props$rows;

    if (Array.isArray(width)) {
      return width[index];
    } // last paragraph


    if (rows - 1 === index) {
      return width;
    }

    return undefined;
  };

  var prefixCls = props.prefixCls,
      className = props.className,
      style = props.style,
      rows = props.rows;

  var rowList = _toConsumableArray(Array(rows)).map(function (_, index) {
    return (
      /*#__PURE__*/
      // eslint-disable-next-line react/no-array-index-key
      React.createElement(\\"li\\", {
        key: index,
        style: {
          width: getWidth(index)
        }
      })
    );
  });

  return /*#__PURE__*/React.createElement(\\"ul\\", {
    className: classNames(prefixCls, className),
    style: style
  }, rowList);
};

var Element$1 = function Element(props) {
  var _classNames, _classNames2;

  var prefixCls = props.prefixCls,
      className = props.className,
      style = props.style,
      size = props.size,
      shape = props.shape;
  var sizeCls = classNames((_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-lg\\"), size === 'large'), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-sm\\"), size === 'small'), _classNames));
  var shapeCls = classNames((_classNames2 = {}, _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-circle\\"), shape === 'circle'), _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-square\\"), shape === 'square'), _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-round\\"), shape === 'round'), _classNames2));
  var sizeStyle = typeof size === 'number' ? {
    width: size,
    height: size,
    lineHeight: \\"\\".concat(size, \\"px\\")
  } : {};
  return /*#__PURE__*/React.createElement(\\"span\\", {
    className: classNames(prefixCls, sizeCls, shapeCls, className),
    style: _extends(_extends({}, sizeStyle), style)
  });
};

var SkeletonAvatar = function SkeletonAvatar(props) {
  var renderSkeletonAvatar = function renderSkeletonAvatar(_ref) {
    var getPrefixCls = _ref.getPrefixCls;
    var customizePrefixCls = props.prefixCls,
        className = props.className,
        active = props.active;
    var prefixCls = getPrefixCls('skeleton', customizePrefixCls);
    var otherProps = omit(props, ['prefixCls']);
    var cls = classNames(prefixCls, \\"\\".concat(prefixCls, \\"-element\\"), _defineProperty({}, \\"\\".concat(prefixCls, \\"-active\\"), active), className);
    return /*#__PURE__*/React.createElement(\\"div\\", {
      className: cls
    }, /*#__PURE__*/React.createElement(Element$1, _extends({
      prefixCls: \\"\\".concat(prefixCls, \\"-avatar\\")
    }, otherProps)));
  };

  return /*#__PURE__*/React.createElement(ConfigConsumer, null, renderSkeletonAvatar);
};

SkeletonAvatar.defaultProps = {
  size: 'default',
  shape: 'circle'
};

var SkeletonButton = function SkeletonButton(props) {
  var renderSkeletonButton = function renderSkeletonButton(_ref) {
    var getPrefixCls = _ref.getPrefixCls;
    var customizePrefixCls = props.prefixCls,
        className = props.className,
        active = props.active;
    var prefixCls = getPrefixCls('skeleton', customizePrefixCls);
    var otherProps = omit(props, ['prefixCls']);
    var cls = classNames(prefixCls, \\"\\".concat(prefixCls, \\"-element\\"), _defineProperty({}, \\"\\".concat(prefixCls, \\"-active\\"), active), className);
    return /*#__PURE__*/React.createElement(\\"div\\", {
      className: cls
    }, /*#__PURE__*/React.createElement(Element$1, _extends({
      prefixCls: \\"\\".concat(prefixCls, \\"-button\\")
    }, otherProps)));
  };

  return /*#__PURE__*/React.createElement(ConfigConsumer, null, renderSkeletonButton);
};

SkeletonButton.defaultProps = {
  size: 'default'
};

var SkeletonInput = function SkeletonInput(props) {
  var renderSkeletonInput = function renderSkeletonInput(_ref) {
    var getPrefixCls = _ref.getPrefixCls;
    var customizePrefixCls = props.prefixCls,
        className = props.className,
        active = props.active;
    var prefixCls = getPrefixCls('skeleton', customizePrefixCls);
    var otherProps = omit(props, ['prefixCls']);
    var cls = classNames(prefixCls, \\"\\".concat(prefixCls, \\"-element\\"), _defineProperty({}, \\"\\".concat(prefixCls, \\"-active\\"), active), className);
    return /*#__PURE__*/React.createElement(\\"div\\", {
      className: cls
    }, /*#__PURE__*/React.createElement(Element$1, _extends({
      prefixCls: \\"\\".concat(prefixCls, \\"-input\\")
    }, otherProps)));
  };

  return /*#__PURE__*/React.createElement(ConfigConsumer, null, renderSkeletonInput);
};

SkeletonInput.defaultProps = {
  size: 'default'
};

var path = 'M365.714286 329.142857q0 45.714286-32.036571 77.677714t-77.677714 32.036571-77.677714-32.036571-32.036571-77.677714 32.036571-77.677714 77.677714-32.036571 77.677714 32.036571 32.036571 77.677714zM950.857143 548.571429l0 256-804.571429 0 0-109.714286 182.857143-182.857143 91.428571 91.428571 292.571429-292.571429zM1005.714286 146.285714l-914.285714 0q-7.460571 0-12.873143 5.412571t-5.412571 12.873143l0 694.857143q0 7.460571 5.412571 12.873143t12.873143 5.412571l914.285714 0q7.460571 0 12.873143-5.412571t5.412571-12.873143l0-694.857143q0-7.460571-5.412571-12.873143t-12.873143-5.412571zM1097.142857 164.571429l0 694.857143q0 37.741714-26.843429 64.585143t-64.585143 26.843429l-914.285714 0q-37.741714 0-64.585143-26.843429t-26.843429-64.585143l0-694.857143q0-37.741714 26.843429-64.585143t64.585143-26.843429l914.285714 0q37.741714 0 64.585143 26.843429t26.843429 64.585143z';

var SkeletonImage = function SkeletonImage(props) {
  var renderSkeletonImage = function renderSkeletonImage(_ref) {
    var getPrefixCls = _ref.getPrefixCls;
    var customizePrefixCls = props.prefixCls,
        className = props.className,
        style = props.style;
    var prefixCls = getPrefixCls('skeleton', customizePrefixCls);
    var cls = classNames(prefixCls, \\"\\".concat(prefixCls, \\"-element\\"), className);
    return /*#__PURE__*/React.createElement(\\"div\\", {
      className: cls
    }, /*#__PURE__*/React.createElement(\\"div\\", {
      className: classNames(\\"\\".concat(prefixCls, \\"-image\\"), className),
      style: style
    }, /*#__PURE__*/React.createElement(\\"svg\\", {
      viewBox: \\"0 0 1098 1024\\",
      xmlns: \\"http://www.w3.org/2000/svg\\",
      className: \\"\\".concat(prefixCls, \\"-image-svg\\")
    }, /*#__PURE__*/React.createElement(\\"path\\", {
      d: path,
      className: \\"\\".concat(prefixCls, \\"-image-path\\")
    }))));
  };

  return /*#__PURE__*/React.createElement(ConfigConsumer, null, renderSkeletonImage);
};

function getComponentProps(prop) {
  if (prop && _typeof(prop) === 'object') {
    return prop;
  }

  return {};
}

function getAvatarBasicProps(hasTitle, hasParagraph) {
  if (hasTitle && !hasParagraph) {
    // Square avatar
    return {
      size: 'large',
      shape: 'square'
    };
  }

  return {
    size: 'large',
    shape: 'circle'
  };
}

function getTitleBasicProps(hasAvatar, hasParagraph) {
  if (!hasAvatar && hasParagraph) {
    return {
      width: '38%'
    };
  }

  if (hasAvatar && hasParagraph) {
    return {
      width: '50%'
    };
  }

  return {};
}

function getParagraphBasicProps(hasAvatar, hasTitle) {
  var basicProps = {}; // Width

  if (!hasAvatar || !hasTitle) {
    basicProps.width = '61%';
  } // Rows


  if (!hasAvatar && hasTitle) {
    basicProps.rows = 3;
  } else {
    basicProps.rows = 2;
  }

  return basicProps;
}

var Skeleton = function Skeleton(props) {
  var renderSkeleton = function renderSkeleton(_ref) {
    var getPrefixCls = _ref.getPrefixCls,
        direction = _ref.direction;
    var customizePrefixCls = props.prefixCls,
        loading = props.loading,
        className = props.className,
        children = props.children,
        avatar = props.avatar,
        title = props.title,
        paragraph = props.paragraph,
        active = props.active,
        round = props.round;
    var prefixCls = getPrefixCls('skeleton', customizePrefixCls);

    if (loading || !('loading' in props)) {
      var _classNames;

      var hasAvatar = !!avatar;
      var hasTitle = !!title;
      var hasParagraph = !!paragraph; // Avatar

      var avatarNode;

      if (hasAvatar) {
        var avatarProps = _extends(_extends({
          prefixCls: \\"\\".concat(prefixCls, \\"-avatar\\")
        }, getAvatarBasicProps(hasTitle, hasParagraph)), getComponentProps(avatar)); // We direct use SkeletonElement as avatar in skeleton internal.


        avatarNode = /*#__PURE__*/React.createElement(\\"div\\", {
          className: \\"\\".concat(prefixCls, \\"-header\\")
        }, /*#__PURE__*/React.createElement(Element$1, avatarProps));
      }

      var contentNode;

      if (hasTitle || hasParagraph) {
        // Title
        var $title;

        if (hasTitle) {
          var titleProps = _extends(_extends({
            prefixCls: \\"\\".concat(prefixCls, \\"-title\\")
          }, getTitleBasicProps(hasAvatar, hasParagraph)), getComponentProps(title));

          $title = /*#__PURE__*/React.createElement(Title$1, titleProps);
        } // Paragraph


        var paragraphNode;

        if (hasParagraph) {
          var paragraphProps = _extends(_extends({
            prefixCls: \\"\\".concat(prefixCls, \\"-paragraph\\")
          }, getParagraphBasicProps(hasAvatar, hasTitle)), getComponentProps(paragraph));

          paragraphNode = /*#__PURE__*/React.createElement(Paragraph$1, paragraphProps);
        }

        contentNode = /*#__PURE__*/React.createElement(\\"div\\", {
          className: \\"\\".concat(prefixCls, \\"-content\\")
        }, $title, paragraphNode);
      }

      var cls = classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-with-avatar\\"), hasAvatar), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-active\\"), active), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-round\\"), round), _classNames), className);
      return /*#__PURE__*/React.createElement(\\"div\\", {
        className: cls
      }, avatarNode, contentNode);
    }

    return children;
  };

  return /*#__PURE__*/React.createElement(ConfigConsumer, null, renderSkeleton);
};

Skeleton.defaultProps = {
  avatar: false,
  title: true,
  paragraph: true
};
Skeleton.Button = SkeletonButton;
Skeleton.Avatar = SkeletonAvatar;
Skeleton.Input = SkeletonInput;
Skeleton.Image = SkeletonImage;

var StatisticNumber = function StatisticNumber(props) {
  var value = props.value,
      formatter = props.formatter,
      precision = props.precision,
      decimalSeparator = props.decimalSeparator,
      _props$groupSeparator = props.groupSeparator,
      groupSeparator = _props$groupSeparator === void 0 ? '' : _props$groupSeparator,
      prefixCls = props.prefixCls;
  var valueNode;

  if (typeof formatter === 'function') {
    // Customize formatter
    valueNode = formatter(value);
  } else {
    // Internal formatter
    var val = String(value);
    var cells = val.match(/^(-?)(\\\\d*)(\\\\.(\\\\d+))?$/); // Process if illegal number

    if (!cells || val === '-') {
      valueNode = val;
    } else {
      var negative = cells[1];
      var int = cells[2] || '0';
      var decimal = cells[4] || '';
      int = int.replace(/\\\\B(?=(\\\\d{3})+(?!\\\\d))/g, groupSeparator);

      if (typeof precision === 'number') {
        decimal = padEnd(decimal, precision, '0').slice(0, precision);
      }

      if (decimal) {
        decimal = \\"\\".concat(decimalSeparator).concat(decimal);
      }

      valueNode = [/*#__PURE__*/React.createElement(\\"span\\", {
        key: \\"int\\",
        className: \\"\\".concat(prefixCls, \\"-content-value-int\\")
      }, negative, int), decimal && /*#__PURE__*/React.createElement(\\"span\\", {
        key: \\"decimal\\",
        className: \\"\\".concat(prefixCls, \\"-content-value-decimal\\")
      }, decimal)];
    }
  }

  return /*#__PURE__*/React.createElement(\\"span\\", {
    className: \\"\\".concat(prefixCls, \\"-content-value\\")
  }, valueNode);
};

var Statistic = function Statistic(props) {
  var prefixCls = props.prefixCls,
      className = props.className,
      style = props.style,
      valueStyle = props.valueStyle,
      _props$value = props.value,
      value = _props$value === void 0 ? 0 : _props$value,
      title = props.title,
      valueRender = props.valueRender,
      prefix = props.prefix,
      suffix = props.suffix,
      loading = props.loading,
      direction = props.direction,
      onMouseEnter = props.onMouseEnter,
      onMouseLeave = props.onMouseLeave;
  var valueNode = /*#__PURE__*/React.createElement(StatisticNumber, _extends({}, props, {
    value: value
  }));
  var cls = classNames(prefixCls, _defineProperty({}, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), className);
  return /*#__PURE__*/React.createElement(\\"div\\", {
    className: cls,
    style: style,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave
  }, title && /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-title\\")
  }, title), /*#__PURE__*/React.createElement(Skeleton, {
    paragraph: false,
    loading: loading
  }, /*#__PURE__*/React.createElement(\\"div\\", {
    style: valueStyle,
    className: \\"\\".concat(prefixCls, \\"-content\\")
  }, prefix && /*#__PURE__*/React.createElement(\\"span\\", {
    className: \\"\\".concat(prefixCls, \\"-content-prefix\\")
  }, prefix), valueRender ? valueRender(valueNode) : valueNode, suffix && /*#__PURE__*/React.createElement(\\"span\\", {
    className: \\"\\".concat(prefixCls, \\"-content-suffix\\")
  }, suffix))));
};

Statistic.defaultProps = {
  decimalSeparator: '.',
  groupSeparator: ',',
  loading: false
};
var WrapperStatistic = withConfigConsumer({
  prefixCls: 'statistic'
})(Statistic);

var timeUnits = [['Y', 1000 * 60 * 60 * 24 * 365], ['M', 1000 * 60 * 60 * 24 * 30], ['D', 1000 * 60 * 60 * 24], ['H', 1000 * 60 * 60], ['m', 1000 * 60], ['s', 1000], ['S', 1]];
function formatTimeStr(duration, format) {
  var leftDuration = duration;
  var escapeRegex = /\\\\[[^\\\\]]*]/g;
  var keepList = (format.match(escapeRegex) || []).map(function (str) {
    return str.slice(1, -1);
  });
  var templateText = format.replace(escapeRegex, '[]');
  var replacedText = timeUnits.reduce(function (current, _ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        name = _ref2[0],
        unit = _ref2[1];

    if (current.indexOf(name) !== -1) {
      var value = Math.floor(leftDuration / unit);
      leftDuration -= value * unit;
      return current.replace(new RegExp(\\"\\".concat(name, \\"+\\"), 'g'), function (match) {
        var len = match.length;
        return padStart(value.toString(), len, '0');
      });
    }

    return current;
  }, templateText);
  var index = 0;
  return replacedText.replace(escapeRegex, function () {
    var match = keepList[index];
    index += 1;
    return match;
  });
}
function formatCountdown(value, config) {
  var _config$format = config.format,
      format = _config$format === void 0 ? '' : _config$format;
  var target = new Date(value).getTime();
  var current = Date.now();
  var diff = Math.max(target - current, 0);
  return formatTimeStr(diff, format);
}

var REFRESH_INTERVAL = 1000 / 30;

function getTime(value) {
  return new Date(value).getTime();
}

var Countdown = /*#__PURE__*/function (_React$Component) {
  _inherits(Countdown, _React$Component);

  var _super = _createSuper(Countdown);

  function Countdown() {
    var _this;

    _classCallCheck(this, Countdown);

    _this = _super.apply(this, arguments);

    _this.syncTimer = function () {
      var value = _this.props.value;
      var timestamp = getTime(value);

      if (timestamp >= Date.now()) {
        _this.startTimer();
      } else {
        _this.stopTimer();
      }
    };

    _this.startTimer = function () {
      if (_this.countdownId) return;
      _this.countdownId = window.setInterval(function () {
        _this.forceUpdate();
      }, REFRESH_INTERVAL);
    };

    _this.stopTimer = function () {
      var _this$props = _this.props,
          onFinish = _this$props.onFinish,
          value = _this$props.value;

      if (_this.countdownId) {
        clearInterval(_this.countdownId);
        _this.countdownId = undefined;
        var timestamp = getTime(value);

        if (onFinish && timestamp < Date.now()) {
          onFinish();
        }
      }
    };

    _this.formatCountdown = function (value, config) {
      var format = _this.props.format;
      return formatCountdown(value, _extends(_extends({}, config), {
        format: format
      }));
    }; // Countdown do not need display the timestamp


    _this.valueRender = function (node) {
      return cloneElement(node, {
        title: undefined
      });
    };

    return _this;
  }

  _createClass(Countdown, [{
    key: \\"componentDidMount\\",
    value: function componentDidMount() {
      this.syncTimer();
    }
  }, {
    key: \\"componentDidUpdate\\",
    value: function componentDidUpdate() {
      this.syncTimer();
    }
  }, {
    key: \\"componentWillUnmount\\",
    value: function componentWillUnmount() {
      this.stopTimer();
    }
  }, {
    key: \\"render\\",
    value: function render() {
      return /*#__PURE__*/React.createElement(WrapperStatistic, _extends({
        valueRender: this.valueRender
      }, this.props, {
        formatter: this.formatCountdown
      }));
    }
  }]);

  return Countdown;
}(React.Component);

Countdown.defaultProps = {
  format: 'HH:mm:ss'
};

WrapperStatistic.Countdown = Countdown;

// This icon file is generated automatically.
var ArrowLeftOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M872 474H286.9l350.2-304c5.6-4.9 2.2-14-5.2-14h-88.5c-3.9 0-7.6 1.4-10.5 3.9L155 487.8a31.96 31.96 0 000 48.3L535.1 866c1.5 1.3 3.3 2 5.2 2h91.5c7.4 0 10.8-9.2 5.2-14L286.9 550H872c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8z\\" } }] }, \\"name\\": \\"arrow-left\\", \\"theme\\": \\"outlined\\" };

var ArrowLeftOutlined = function ArrowLeftOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: ArrowLeftOutlined$2
  }));
};

ArrowLeftOutlined.displayName = 'ArrowLeftOutlined';
var ArrowLeftOutlined$1 = /*#__PURE__*/React.forwardRef(ArrowLeftOutlined);

// This icon file is generated automatically.
var ArrowRightOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M869 487.8L491.2 159.9c-2.9-2.5-6.6-3.9-10.5-3.9h-88.5c-7.4 0-10.8 9.2-5.2 14l350.2 304H152c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h585.1L386.9 854c-5.6 4.9-2.2 14 5.2 14h91.5c1.9 0 3.8-.7 5.2-2L869 536.2a32.07 32.07 0 000-48.4z\\" } }] }, \\"name\\": \\"arrow-right\\", \\"theme\\": \\"outlined\\" };

var ArrowRightOutlined = function ArrowRightOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: ArrowRightOutlined$2
  }));
};

ArrowRightOutlined.displayName = 'ArrowRightOutlined';
var ArrowRightOutlined$1 = /*#__PURE__*/React.forwardRef(ArrowRightOutlined);

var __rest$j = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var inlineStyle = {
  border: 0,
  background: 'transparent',
  padding: 0,
  lineHeight: 'inherit',
  display: 'inline-block'
};
var TransButton = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var onKeyDown = function onKeyDown(event) {
    var keyCode = event.keyCode;

    if (keyCode === KeyCode.ENTER) {
      event.preventDefault();
    }
  };

  var onKeyUp = function onKeyUp(event) {
    var keyCode = event.keyCode;
    var onClick = props.onClick;

    if (keyCode === KeyCode.ENTER && onClick) {
      onClick();
    }
  };

  var style = props.style,
      noStyle = props.noStyle,
      disabled = props.disabled,
      restProps = __rest$j(props, [\\"style\\", \\"noStyle\\", \\"disabled\\"]);

  var mergedStyle = {};

  if (!noStyle) {
    mergedStyle = _extends({}, inlineStyle);
  }

  if (disabled) {
    mergedStyle.pointerEvents = 'none';
  }

  mergedStyle = _extends(_extends({}, mergedStyle), style);
  return /*#__PURE__*/React.createElement(\\"div\\", _extends({
    role: \\"button\\",
    tabIndex: 0,
    ref: ref
  }, restProps, {
    onKeyDown: onKeyDown,
    onKeyUp: onKeyUp,
    style: mergedStyle
  }));
});

var renderBack = function renderBack(prefixCls, backIcon, onBack) {
  if (!backIcon || !onBack) {
    return null;
  }

  return /*#__PURE__*/React.createElement(LocaleReceiver, {
    componentName: \\"PageHeader\\"
  }, function (_ref) {
    var back = _ref.back;
    return /*#__PURE__*/React.createElement(\\"div\\", {
      className: \\"\\".concat(prefixCls, \\"-back\\")
    }, /*#__PURE__*/React.createElement(TransButton, {
      onClick: function onClick(e) {
        if (onBack) {
          onBack(e);
        }
      },
      className: \\"\\".concat(prefixCls, \\"-back-button\\"),
      \\"aria-label\\": back
    }, backIcon));
  });
};

var renderBreadcrumb = function renderBreadcrumb(breadcrumb) {
  return /*#__PURE__*/React.createElement(Breadcrumb, breadcrumb);
};

var getBackIcon = function getBackIcon(props) {
  var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'ltr';

  if (props.backIcon !== undefined) {
    return props.backIcon;
  }

  return direction === 'rtl' ? /*#__PURE__*/React.createElement(ArrowRightOutlined$1, null) : /*#__PURE__*/React.createElement(ArrowLeftOutlined$1, null);
};

var renderTitle = function renderTitle(prefixCls, props) {
  var direction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'ltr';
  var title = props.title,
      avatar = props.avatar,
      subTitle = props.subTitle,
      tags = props.tags,
      extra = props.extra,
      onBack = props.onBack;
  var headingPrefixCls = \\"\\".concat(prefixCls, \\"-heading\\");
  var hasHeading = title || subTitle || tags || extra; // If there is nothing, return a null

  if (!hasHeading) {
    return null;
  }

  var backIcon = getBackIcon(props, direction);
  var backIconDom = renderBack(prefixCls, backIcon, onBack);
  var hasTitle = backIconDom || avatar || hasHeading;
  return /*#__PURE__*/React.createElement(\\"div\\", {
    className: headingPrefixCls
  }, hasTitle && /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(headingPrefixCls, \\"-left\\")
  }, backIconDom, avatar && /*#__PURE__*/React.createElement(Avatar, avatar), title && /*#__PURE__*/React.createElement(\\"span\\", {
    className: \\"\\".concat(headingPrefixCls, \\"-title\\"),
    title: typeof title === 'string' ? title : undefined
  }, title), subTitle && /*#__PURE__*/React.createElement(\\"span\\", {
    className: \\"\\".concat(headingPrefixCls, \\"-sub-title\\"),
    title: typeof subTitle === 'string' ? subTitle : undefined
  }, subTitle), tags && /*#__PURE__*/React.createElement(\\"span\\", {
    className: \\"\\".concat(headingPrefixCls, \\"-tags\\")
  }, tags)), extra && /*#__PURE__*/React.createElement(\\"span\\", {
    className: \\"\\".concat(headingPrefixCls, \\"-extra\\")
  }, extra));
};

var renderFooter = function renderFooter(prefixCls, footer) {
  if (footer) {
    return /*#__PURE__*/React.createElement(\\"div\\", {
      className: \\"\\".concat(prefixCls, \\"-footer\\")
    }, footer);
  }

  return null;
};

var renderChildren = function renderChildren(prefixCls, children) {
  return /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-content\\")
  }, children);
};

var PageHeader = function PageHeader(props) {
  var _React$useState = React.useState(false),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      compact = _React$useState2[0],
      updateCompact = _React$useState2[1];

  var onResize = function onResize(_ref2) {
    var width = _ref2.width;
    updateCompact(width < 768);
  };

  return /*#__PURE__*/React.createElement(ConfigConsumer, null, function (_ref3) {
    var _classNames;

    var getPrefixCls = _ref3.getPrefixCls,
        pageHeader = _ref3.pageHeader,
        direction = _ref3.direction;
    var customizePrefixCls = props.prefixCls,
        style = props.style,
        footer = props.footer,
        children = props.children,
        breadcrumb = props.breadcrumb,
        breadcrumbRender = props.breadcrumbRender,
        customizeClassName = props.className;
    var ghost = true; // Use \`ghost\` from \`props\` or from \`ConfigProvider\` instead.

    if ('ghost' in props) {
      ghost = props.ghost;
    } else if (pageHeader && 'ghost' in pageHeader) {
      ghost = pageHeader.ghost;
    }

    var prefixCls = getPrefixCls('page-header', customizePrefixCls);

    var getDefaultBreadcrumbDom = function getDefaultBreadcrumbDom() {
      var _a;

      if ((_a = breadcrumb) === null || _a === void 0 ? void 0 : _a.routes) {
        return renderBreadcrumb(breadcrumb);
      }

      return null;
    };

    var defaultBreadcrumbDom = getDefaultBreadcrumbDom(); //  support breadcrumbRender function

    var breadcrumbDom = (breadcrumbRender === null || breadcrumbRender === void 0 ? void 0 : breadcrumbRender(props, defaultBreadcrumbDom)) || defaultBreadcrumbDom;
    var className = classNames(prefixCls, customizeClassName, (_classNames = {
      'has-breadcrumb': breadcrumbDom,
      'has-footer': footer
    }, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-ghost\\"), ghost), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-compact\\"), compact), _classNames));
    return /*#__PURE__*/React.createElement(ResizeObserver, {
      onResize: onResize
    }, /*#__PURE__*/React.createElement(\\"div\\", {
      className: className,
      style: style
    }, breadcrumbDom, renderTitle(prefixCls, props, direction), children && renderChildren(prefixCls, children), renderFooter(prefixCls, footer)));
  });
};

var _this = undefined;

var __rest$i = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var Popconfirm = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _React$useState = React.useState(props.visible),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      visible = _React$useState2[0],
      setVisible = _React$useState2[1];

  React.useEffect(function () {
    if ('visible' in props) {
      setVisible(props.visible);
    }
  }, [props.visible]);
  React.useEffect(function () {
    if ('defaultVisible' in props) {
      setVisible(props.defaultVisible);
    }
  }, [props.defaultVisible]);

  var settingVisible = function settingVisible(value, e) {
    if (!('visible' in props)) {
      setVisible(value);
    }

    if (props.onVisibleChange) {
      props.onVisibleChange(value, e);
    }
  };

  var onConfirm = function onConfirm(e) {
    settingVisible(false, e);

    if (props.onConfirm) {
      props.onConfirm.call(_this, e);
    }
  };

  var onCancel = function onCancel(e) {
    settingVisible(false, e);

    if (props.onCancel) {
      props.onCancel.call(_this, e);
    }
  };

  var _onKeyDown = function onKeyDown(e) {
    if (e.keyCode === KeyCode.ESC && visible) {
      settingVisible(false, e);
    }
  };

  var onVisibleChange = function onVisibleChange(value) {
    var disabled = props.disabled;

    if (disabled) {
      return;
    }

    settingVisible(value);
  };

  var renderOverlay = function renderOverlay(prefixCls, popconfirmLocale) {
    var okButtonProps = props.okButtonProps,
        cancelButtonProps = props.cancelButtonProps,
        title = props.title,
        cancelText = props.cancelText,
        okText = props.okText,
        okType = props.okType,
        icon = props.icon;
    return /*#__PURE__*/React.createElement(\\"div\\", {
      className: \\"\\".concat(prefixCls, \\"-inner-content\\")
    }, /*#__PURE__*/React.createElement(\\"div\\", {
      className: \\"\\".concat(prefixCls, \\"-message\\")
    }, icon, /*#__PURE__*/React.createElement(\\"div\\", {
      className: \\"\\".concat(prefixCls, \\"-message-title\\")
    }, getRenderPropValue(title))), /*#__PURE__*/React.createElement(\\"div\\", {
      className: \\"\\".concat(prefixCls, \\"-buttons\\")
    }, /*#__PURE__*/React.createElement(Button$1, _extends({
      onClick: onCancel,
      size: \\"small\\"
    }, cancelButtonProps), cancelText || popconfirmLocale.cancelText), /*#__PURE__*/React.createElement(Button$1, _extends({
      onClick: onConfirm
    }, convertLegacyProps(okType), {
      size: \\"small\\"
    }, okButtonProps), okText || popconfirmLocale.okText)));
  };

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls;

  var customizePrefixCls = props.prefixCls,
      placement = props.placement,
      children = props.children,
      overlayClassName = props.overlayClassName,
      restProps = __rest$i(props, [\\"prefixCls\\", \\"placement\\", \\"children\\", \\"overlayClassName\\"]);

  var prefixCls = getPrefixCls('popover', customizePrefixCls);
  var prefixClsConfirm = getPrefixCls('popconfirm', customizePrefixCls);
  var overlayClassNames = classNames(prefixClsConfirm, overlayClassName);
  var overlay = /*#__PURE__*/React.createElement(LocaleReceiver, {
    componentName: \\"Popconfirm\\",
    defaultLocale: localeValues.Popconfirm
  }, function (popconfirmLocale) {
    return renderOverlay(prefixCls, popconfirmLocale);
  });
  return /*#__PURE__*/React.createElement(Tooltip, _extends({}, restProps, {
    prefixCls: prefixCls,
    placement: placement,
    onVisibleChange: onVisibleChange,
    visible: visible,
    overlay: overlay,
    overlayClassName: overlayClassNames,
    ref: ref
  }), cloneElement(children, {
    onKeyDown: function onKeyDown(e) {
      var _a, _b;

      if ( /*#__PURE__*/React.isValidElement(children)) {
        (_b = children === null || children === void 0 ? void 0 : (_a = children.props).onKeyDown) === null || _b === void 0 ? void 0 : _b.call(_a, e);
      }

      _onKeyDown(e);
    }
  }));
});
Popconfirm.defaultProps = {
  transitionName: 'zoom-big',
  placement: 'top',
  trigger: 'click',
  okType: 'primary',
  icon: /*#__PURE__*/React.createElement(ExclamationCircleFilled$1, null),
  disabled: false
};

function validProgress(progress) {
  if (!progress || progress < 0) {
    return 0;
  }

  if (progress > 100) {
    return 100;
  }

  return progress;
}
function getSuccessPercent(_ref) {
  var success = _ref.success,
      successPercent = _ref.successPercent;
  var percent = successPercent;
  /** @deprecated Use \`percent\` instead */

  if (success && 'progress' in success) {
    devWarning(false, 'Progress', '\`success.progress\` is deprecated. Please use \`success.percent\` instead.');
    percent = success.progress;
  }

  if (success && 'percent' in success) {
    percent = success.percent;
  }

  return percent;
}

var __rest$h = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/**
 * @example
 *   {
 *     \\"0%\\": \\"#afc163\\",
 *     \\"75%\\": \\"#009900\\",
 *     \\"50%\\": \\"green\\", // ====> '#afc163 0%, #66FF00 25%, #00CC00 50%, #009900 75%, #ffffff 100%'
 *     \\"25%\\": \\"#66FF00\\",
 *     \\"100%\\": \\"#ffffff\\"
 *   }
 */

var sortGradient = function sortGradient(gradients) {
  var tempArr = [];
  Object.keys(gradients).forEach(function (key) {
    var formattedKey = parseFloat(key.replace(/%/g, ''));

    if (!isNaN(formattedKey)) {
      tempArr.push({
        key: formattedKey,
        value: gradients[key]
      });
    }
  });
  tempArr = tempArr.sort(function (a, b) {
    return a.key - b.key;
  });
  return tempArr.map(function (_ref) {
    var key = _ref.key,
        value = _ref.value;
    return \\"\\".concat(value, \\" \\").concat(key, \\"%\\");
  }).join(', ');
};
/**
 * Then this man came to realize the truth: Besides six pence, there is the moon. Besides bread and
 * butter, there is the bug. And... Besides women, there is the code.
 *
 * @example
 *   {
 *     \\"0%\\": \\"#afc163\\",
 *     \\"25%\\": \\"#66FF00\\",
 *     \\"50%\\": \\"#00CC00\\", // ====>  linear-gradient(to right, #afc163 0%, #66FF00 25%,
 *     \\"75%\\": \\"#009900\\", //        #00CC00 50%, #009900 75%, #ffffff 100%)
 *     \\"100%\\": \\"#ffffff\\"
 *   }
 */

var handleGradient = function handleGradient(strokeColor, directionConfig) {
  var _strokeColor$from = strokeColor.from,
      from = _strokeColor$from === void 0 ? presetPrimaryColors.blue : _strokeColor$from,
      _strokeColor$to = strokeColor.to,
      to = _strokeColor$to === void 0 ? presetPrimaryColors.blue : _strokeColor$to,
      _strokeColor$directio = strokeColor.direction,
      direction = _strokeColor$directio === void 0 ? directionConfig === 'rtl' ? 'to left' : 'to right' : _strokeColor$directio,
      rest = __rest$h(strokeColor, [\\"from\\", \\"to\\", \\"direction\\"]);

  if (Object.keys(rest).length !== 0) {
    var sortedGradients = sortGradient(rest);
    return {
      backgroundImage: \\"linear-gradient(\\".concat(direction, \\", \\").concat(sortedGradients, \\")\\")
    };
  }

  return {
    backgroundImage: \\"linear-gradient(\\".concat(direction, \\", \\").concat(from, \\", \\").concat(to, \\")\\")
  };
};

var Line = function Line(props) {
  var prefixCls = props.prefixCls,
      directionConfig = props.direction,
      percent = props.percent,
      strokeWidth = props.strokeWidth,
      size = props.size,
      strokeColor = props.strokeColor,
      strokeLinecap = props.strokeLinecap,
      children = props.children,
      trailColor = props.trailColor,
      success = props.success;
  var backgroundProps = strokeColor && typeof strokeColor !== 'string' ? handleGradient(strokeColor, directionConfig) : {
    background: strokeColor
  };
  var trailStyle = trailColor ? {
    backgroundColor: trailColor
  } : undefined;

  var percentStyle = _extends({
    width: \\"\\".concat(validProgress(percent), \\"%\\"),
    height: strokeWidth || (size === 'small' ? 6 : 8),
    borderRadius: strokeLinecap === 'square' ? 0 : ''
  }, backgroundProps);

  var successPercent = getSuccessPercent(props);
  var successPercentStyle = {
    width: \\"\\".concat(validProgress(successPercent), \\"%\\"),
    height: strokeWidth || (size === 'small' ? 6 : 8),
    borderRadius: strokeLinecap === 'square' ? 0 : '',
    backgroundColor: success === null || success === void 0 ? void 0 : success.strokeColor
  };
  var successSegment = successPercent !== undefined ? /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-success-bg\\"),
    style: successPercentStyle
  }) : null;
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-outer\\")
  }, /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-inner\\"),
    style: trailStyle
  }, /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-bg\\"),
    style: percentStyle
  }), successSegment)), children);
};

function getPercentage(_ref) {
  var percent = _ref.percent,
      success = _ref.success,
      successPercent = _ref.successPercent;
  var ptg = validProgress(percent);
  var realSuccessPercent = getSuccessPercent({
    success: success,
    successPercent: successPercent
  });

  if (!realSuccessPercent) {
    return ptg;
  }

  return [validProgress(realSuccessPercent), validProgress(ptg - validProgress(realSuccessPercent))];
}

function getStrokeColor(_ref2) {
  var success = _ref2.success,
      strokeColor = _ref2.strokeColor,
      successPercent = _ref2.successPercent;
  var color = strokeColor || null;
  var realSuccessPercent = getSuccessPercent({
    success: success,
    successPercent: successPercent
  });

  if (!realSuccessPercent) {
    return color;
  }

  return [presetPrimaryColors.green, color];
}

var Circle = function Circle(props) {
  var prefixCls = props.prefixCls,
      width = props.width,
      strokeWidth = props.strokeWidth,
      trailColor = props.trailColor,
      strokeLinecap = props.strokeLinecap,
      gapPosition = props.gapPosition,
      gapDegree = props.gapDegree,
      type = props.type,
      children = props.children;
  var circleSize = width || 120;
  var circleStyle = {
    width: circleSize,
    height: circleSize,
    fontSize: circleSize * 0.15 + 6
  };
  var circleWidth = strokeWidth || 6;
  var gapPos = gapPosition || type === 'dashboard' && 'bottom' || 'top';

  var getGapDegree = function getGapDegree() {
    // Support gapDeg = 0 when type = 'dashboard'
    if (gapDegree || gapDegree === 0) {
      return gapDegree;
    }

    if (type === 'dashboard') {
      return 75;
    }

    return undefined;
  }; // using className to style stroke color


  var strokeColor = getStrokeColor(props);
  var isGradient = Object.prototype.toString.call(strokeColor) === '[object Object]';
  var wrapperClassName = classNames(\\"\\".concat(prefixCls, \\"-inner\\"), _defineProperty({}, \\"\\".concat(prefixCls, \\"-circle-gradient\\"), isGradient));
  return /*#__PURE__*/React.createElement(\\"div\\", {
    className: wrapperClassName,
    style: circleStyle
  }, /*#__PURE__*/React.createElement(Circle$1, {
    percent: getPercentage(props),
    strokeWidth: circleWidth,
    trailWidth: circleWidth,
    strokeColor: strokeColor,
    strokeLinecap: strokeLinecap,
    trailColor: trailColor,
    prefixCls: prefixCls,
    gapDegree: getGapDegree(),
    gapPosition: gapPos
  }), children);
};

var Steps$1 = function Steps(props) {
  var size = props.size,
      steps = props.steps,
      _props$percent = props.percent,
      percent = _props$percent === void 0 ? 0 : _props$percent,
      _props$strokeWidth = props.strokeWidth,
      strokeWidth = _props$strokeWidth === void 0 ? 8 : _props$strokeWidth,
      strokeColor = props.strokeColor,
      trailColor = props.trailColor,
      prefixCls = props.prefixCls,
      children = props.children;
  var current = Math.round(steps * (percent / 100));
  var stepWidth = size === 'small' ? 2 : 14;
  var styledSteps = [];

  for (var i = 0; i < steps; i += 1) {
    styledSteps.push( /*#__PURE__*/React.createElement(\\"div\\", {
      key: i,
      className: classNames(\\"\\".concat(prefixCls, \\"-steps-item\\"), _defineProperty({}, \\"\\".concat(prefixCls, \\"-steps-item-active\\"), i <= current - 1)),
      style: {
        backgroundColor: i <= current - 1 ? strokeColor : trailColor,
        width: stepWidth,
        height: strokeWidth
      }
    }));
  }

  return /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-steps-outer\\")
  }, styledSteps, children);
};

var __rest$g = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var ProgressTypes = tuple('line', 'circle', 'dashboard');
var ProgressStatuses = tuple('normal', 'exception', 'active', 'success');

var Progress = /*#__PURE__*/function (_React$Component) {
  _inherits(Progress, _React$Component);

  var _super = _createSuper(Progress);

  function Progress() {
    var _this;

    _classCallCheck(this, Progress);

    _this = _super.apply(this, arguments);

    _this.renderProgress = function (_ref) {
      var _classNames;

      var getPrefixCls = _ref.getPrefixCls,
          direction = _ref.direction;

      var _assertThisInitialize = _assertThisInitialized(_this),
          props = _assertThisInitialize.props;

      var customizePrefixCls = props.prefixCls,
          className = props.className,
          size = props.size,
          type = props.type,
          steps = props.steps,
          showInfo = props.showInfo,
          strokeColor = props.strokeColor,
          restProps = __rest$g(props, [\\"prefixCls\\", \\"className\\", \\"size\\", \\"type\\", \\"steps\\", \\"showInfo\\", \\"strokeColor\\"]);

      var prefixCls = getPrefixCls('progress', customizePrefixCls);

      var progressStatus = _this.getProgressStatus();

      var progressInfo = _this.renderProcessInfo(prefixCls, progressStatus);

      devWarning(!('successPercent' in props), 'Progress', '\`successPercent\` is deprecated. Please use \`success.percent\` instead.');
      var progress; // Render progress shape

      if (type === 'line') {
        progress = steps ? /*#__PURE__*/React.createElement(Steps$1, _extends({}, _this.props, {
          strokeColor: typeof strokeColor === 'string' ? strokeColor : undefined,
          prefixCls: prefixCls,
          steps: steps
        }), progressInfo) : /*#__PURE__*/React.createElement(Line, _extends({}, _this.props, {
          prefixCls: prefixCls,
          direction: direction
        }), progressInfo);
      } else if (type === 'circle' || type === 'dashboard') {
        progress = /*#__PURE__*/React.createElement(Circle, _extends({}, _this.props, {
          prefixCls: prefixCls,
          progressStatus: progressStatus
        }), progressInfo);
      }

      var classString = classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-\\").concat(type === 'dashboard' && 'circle' || steps && 'steps' || type), true), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-status-\\").concat(progressStatus), true), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-show-info\\"), showInfo), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-\\").concat(size), size), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), _classNames), className);
      return /*#__PURE__*/React.createElement(\\"div\\", _extends({}, omit(restProps, ['status', 'format', 'trailColor', 'strokeWidth', 'width', 'gapDegree', 'gapPosition', 'strokeLinecap', 'percent', 'success', 'successPercent']), {
        className: classString
      }), progress);
    };

    return _this;
  }

  _createClass(Progress, [{
    key: \\"getPercentNumber\\",
    value: function getPercentNumber() {
      var _this$props$percent = this.props.percent,
          percent = _this$props$percent === void 0 ? 0 : _this$props$percent;
      var successPercent = getSuccessPercent(this.props);
      return parseInt(successPercent !== undefined ? successPercent.toString() : percent.toString(), 10);
    }
  }, {
    key: \\"getProgressStatus\\",
    value: function getProgressStatus() {
      var status = this.props.status;

      if (ProgressStatuses.indexOf(status) < 0 && this.getPercentNumber() >= 100) {
        return 'success';
      }

      return status || 'normal';
    }
  }, {
    key: \\"renderProcessInfo\\",
    value: function renderProcessInfo(prefixCls, progressStatus) {
      var _this$props = this.props,
          showInfo = _this$props.showInfo,
          format = _this$props.format,
          type = _this$props.type,
          percent = _this$props.percent;
      var successPercent = getSuccessPercent(this.props);
      if (!showInfo) return null;
      var text;

      var textFormatter = format || function (percentNumber) {
        return \\"\\".concat(percentNumber, \\"%\\");
      };

      var isLineType = type === 'line';

      if (format || progressStatus !== 'exception' && progressStatus !== 'success') {
        text = textFormatter(validProgress(percent), validProgress(successPercent));
      } else if (progressStatus === 'exception') {
        text = isLineType ? /*#__PURE__*/React.createElement(CloseCircleFilled$1, null) : /*#__PURE__*/React.createElement(CloseOutlined$1, null);
      } else if (progressStatus === 'success') {
        text = isLineType ? /*#__PURE__*/React.createElement(CheckCircleFilled$1, null) : /*#__PURE__*/React.createElement(CheckOutlined$1, null);
      }

      return /*#__PURE__*/React.createElement(\\"span\\", {
        className: \\"\\".concat(prefixCls, \\"-text\\"),
        title: typeof text === 'string' ? text : undefined
      }, text);
    }
  }, {
    key: \\"render\\",
    value: function render() {
      return /*#__PURE__*/React.createElement(ConfigConsumer, null, this.renderProgress);
    }
  }]);

  return Progress;
}(React.Component);
Progress.defaultProps = {
  type: 'line',
  percent: 0,
  showInfo: true,
  // null for different theme definition
  trailColor: null,
  size: 'default',
  gapDegree: undefined,
  strokeLinecap: 'round'
};

// This icon file is generated automatically.
var StarFilled$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M908.1 353.1l-253.9-36.9L540.7 86.1c-3.1-6.3-8.2-11.4-14.5-14.5-15.8-7.8-35-1.3-42.9 14.5L369.8 316.2l-253.9 36.9c-7 1-13.4 4.3-18.3 9.3a32.05 32.05 0 00.6 45.3l183.7 179.1-43.4 252.9a31.95 31.95 0 0046.4 33.7L512 754l227.1 119.4c6.2 3.3 13.4 4.4 20.3 3.2 17.4-3 29.1-19.5 26.1-36.9l-43.4-252.9 183.7-179.1c5-4.9 8.3-11.3 9.3-18.3 2.7-17.5-9.5-33.7-27-36.3z\\" } }] }, \\"name\\": \\"star\\", \\"theme\\": \\"filled\\" };

var StarFilled = function StarFilled(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: StarFilled$2
  }));
};

StarFilled.displayName = 'StarFilled';
var StarFilled$1 = /*#__PURE__*/React.forwardRef(StarFilled);

var __rest$f = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var Rate = /*#__PURE__*/React.forwardRef(function (_a, ref) {
  var prefixCls = _a.prefixCls,
      tooltips = _a.tooltips,
      props = __rest$f(_a, [\\"prefixCls\\", \\"tooltips\\"]);

  var characterRender = function characterRender(node, _ref) {
    var index = _ref.index;
    if (!tooltips) return node;
    return /*#__PURE__*/React.createElement(Tooltip, {
      title: tooltips[index]
    }, node);
  };

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  var ratePrefixCls = getPrefixCls('rate', prefixCls);
  return /*#__PURE__*/React.createElement(RcRate, _extends({
    ref: ref,
    characterRender: characterRender
  }, props, {
    prefixCls: ratePrefixCls,
    direction: direction
  }));
});
Rate.displayName = 'Rate';
Rate.defaultProps = {
  character: /*#__PURE__*/React.createElement(StarFilled$1, null)
};

// This icon file is generated automatically.
var WarningFilled$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M955.7 856l-416-720c-6.2-10.7-16.9-16-27.7-16s-21.6 5.3-27.7 16l-416 720C56 877.4 71.4 904 96 904h832c24.6 0 40-26.6 27.7-48zM480 416c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v184c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V416zm32 352a48.01 48.01 0 010-96 48.01 48.01 0 010 96z\\" } }] }, \\"name\\": \\"warning\\", \\"theme\\": \\"filled\\" };

var WarningFilled = function WarningFilled(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: WarningFilled$2
  }));
};

WarningFilled.displayName = 'WarningFilled';
var WarningFilled$1 = /*#__PURE__*/React.forwardRef(WarningFilled);

var NoFound = function NoFound() {
  return /*#__PURE__*/React.createElement(\\"svg\\", {
    width: \\"252\\",
    height: \\"294\\"
  }, /*#__PURE__*/React.createElement(\\"defs\\", null, /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M0 .387h251.772v251.772H0z\\"
  })), /*#__PURE__*/React.createElement(\\"g\\", {
    fill: \\"none\\",
    fillRule: \\"evenodd\\"
  }, /*#__PURE__*/React.createElement(\\"g\\", {
    transform: \\"translate(0 .012)\\"
  }, /*#__PURE__*/React.createElement(\\"mask\\", {
    fill: \\"#fff\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M0 127.32v-2.095C0 56.279 55.892.387 124.838.387h2.096c68.946 0 124.838 55.892 124.838 124.838v2.096c0 68.946-55.892 124.838-124.838 124.838h-2.096C55.892 252.16 0 196.267 0 127.321\\",
    fill: \\"#E4EBF7\\",
    mask: \\"url(#b)\\"
  })), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M39.755 130.84a8.276 8.276 0 1 1-16.468-1.66 8.276 8.276 0 0 1 16.468 1.66\\",
    fill: \\"#FFF\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M36.975 134.297l10.482 5.943M48.373 146.508l-12.648 10.788\\",
    stroke: \\"#FFF\\",
    strokeWidth: \\"2\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M39.875 159.352a5.667 5.667 0 1 1-11.277-1.136 5.667 5.667 0 0 1 11.277 1.136M57.588 143.247a5.708 5.708 0 1 1-11.358-1.145 5.708 5.708 0 0 1 11.358 1.145M99.018 26.875l29.82-.014a4.587 4.587 0 1 0-.003-9.175l-29.82.013a4.587 4.587 0 1 0 .003 9.176M110.424 45.211l29.82-.013a4.588 4.588 0 0 0-.004-9.175l-29.82.013a4.587 4.587 0 1 0 .004 9.175\\",
    fill: \\"#FFF\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M112.798 26.861v-.002l15.784-.006a4.588 4.588 0 1 0 .003 9.175l-15.783.007v-.002a4.586 4.586 0 0 0-.004-9.172M184.523 135.668c-.553 5.485-5.447 9.483-10.931 8.93-5.485-.553-9.483-5.448-8.93-10.932.552-5.485 5.447-9.483 10.932-8.93 5.485.553 9.483 5.447 8.93 10.932\\",
    fill: \\"#FFF\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M179.26 141.75l12.64 7.167M193.006 156.477l-15.255 13.011\\",
    stroke: \\"#FFF\\",
    strokeWidth: \\"2\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M184.668 170.057a6.835 6.835 0 1 1-13.6-1.372 6.835 6.835 0 0 1 13.6 1.372M203.34 153.325a6.885 6.885 0 1 1-13.7-1.382 6.885 6.885 0 0 1 13.7 1.382\\",
    fill: \\"#FFF\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M151.931 192.324a2.222 2.222 0 1 1-4.444 0 2.222 2.222 0 0 1 4.444 0zM225.27 116.056a2.222 2.222 0 1 1-4.445 0 2.222 2.222 0 0 1 4.444 0zM216.38 151.08a2.223 2.223 0 1 1-4.446-.001 2.223 2.223 0 0 1 4.446 0zM176.917 107.636a2.223 2.223 0 1 1-4.445 0 2.223 2.223 0 0 1 4.445 0zM195.291 92.165a2.223 2.223 0 1 1-4.445 0 2.223 2.223 0 0 1 4.445 0zM202.058 180.711a2.223 2.223 0 1 1-4.446 0 2.223 2.223 0 0 1 4.446 0z\\",
    stroke: \\"#FFF\\",
    strokeWidth: \\"2\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    stroke: \\"#FFF\\",
    strokeWidth: \\"2\\",
    d: \\"M214.404 153.302l-1.912 20.184-10.928 5.99M173.661 174.792l-6.356 9.814h-11.36l-4.508 6.484M174.941 125.168v-15.804M220.824 117.25l-12.84 7.901-15.31-7.902V94.39\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M166.588 65.936h-3.951a4.756 4.756 0 0 1-4.743-4.742 4.756 4.756 0 0 1 4.743-4.743h3.951a4.756 4.756 0 0 1 4.743 4.743 4.756 4.756 0 0 1-4.743 4.742\\",
    fill: \\"#FFF\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M174.823 30.03c0-16.281 13.198-29.48 29.48-29.48 16.28 0 29.48 13.199 29.48 29.48 0 16.28-13.2 29.48-29.48 29.48-16.282 0-29.48-13.2-29.48-29.48\\",
    fill: \\"#1890FF\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M205.952 38.387c.5.5.785 1.142.785 1.928s-.286 1.465-.785 1.964c-.572.5-1.214.75-2 .75-.785 0-1.429-.285-1.929-.785-.572-.5-.82-1.143-.82-1.929s.248-1.428.82-1.928c.5-.5 1.144-.75 1.93-.75.785 0 1.462.25 1.999.75m4.285-19.463c1.428 1.249 2.143 2.963 2.143 5.142 0 1.712-.427 3.13-1.219 4.25-.067.096-.137.18-.218.265-.416.429-1.41 1.346-2.956 2.699a5.07 5.07 0 0 0-1.428 1.75 5.207 5.207 0 0 0-.536 2.357v.5h-4.107v-.5c0-1.357.215-2.536.714-3.5.464-.964 1.857-2.464 4.178-4.536l.43-.5c.643-.785.964-1.643.964-2.535 0-1.18-.358-2.108-1-2.785-.678-.68-1.643-1.001-2.858-1.001-1.536 0-2.642.464-3.357 1.43-.37.5-.621 1.135-.76 1.904a1.999 1.999 0 0 1-1.971 1.63h-.004c-1.277 0-2.257-1.183-1.98-2.43.337-1.518 1.02-2.78 2.073-3.784 1.536-1.5 3.607-2.25 6.25-2.25 2.32 0 4.214.607 5.642 1.894\\",
    fill: \\"#FFF\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M52.04 76.131s21.81 5.36 27.307 15.945c5.575 10.74-6.352 9.26-15.73 4.935-10.86-5.008-24.7-11.822-11.577-20.88\\",
    fill: \\"#FFB594\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M90.483 67.504l-.449 2.893c-.753.49-4.748-2.663-4.748-2.663l-1.645.748-1.346-5.684s6.815-4.589 8.917-5.018c2.452-.501 9.884.94 10.7 2.278 0 0 1.32.486-2.227.69-3.548.203-5.043.447-6.79 3.132-1.747 2.686-2.412 3.624-2.412 3.624\\",
    fill: \\"#FFC6A0\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M128.055 111.367c-2.627-7.724-6.15-13.18-8.917-15.478-3.5-2.906-9.34-2.225-11.366-4.187-1.27-1.231-3.215-1.197-3.215-1.197s-14.98-3.158-16.828-3.479c-2.37-.41-2.124-.714-6.054-1.405-1.57-1.907-2.917-1.122-2.917-1.122l-7.11-1.383c-.853-1.472-2.423-1.023-2.423-1.023l-2.468-.897c-1.645 9.976-7.74 13.796-7.74 13.796 1.795 1.122 15.703 8.3 15.703 8.3l5.107 37.11s-3.321 5.694 1.346 9.109c0 0 19.883-3.743 34.921-.329 0 0 3.047-2.546.972-8.806.523-3.01 1.394-8.263 1.736-11.622.385.772 2.019 1.918 3.14 3.477 0 0 9.407-7.365 11.052-14.012-.832-.723-1.598-1.585-2.267-2.453-.567-.736-.358-2.056-.765-2.717-.669-1.084-1.804-1.378-1.907-1.682\\",
    fill: \\"#FFF\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M101.09 289.998s4.295 2.041 7.354 1.021c2.821-.94 4.53.668 7.08 1.178 2.55.51 6.874 1.1 11.686-1.26-.103-5.51-6.889-3.98-11.96-6.713-2.563-1.38-3.784-4.722-3.598-8.799h-9.402s-1.392 10.52-1.16 14.573\\",
    fill: \\"#CBD1D1\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M101.067 289.826s2.428 1.271 6.759.653c3.058-.437 3.712.481 7.423 1.031 3.712.55 10.724-.069 11.823-.894.413 1.1-.343 2.063-.343 2.063s-1.512.603-4.812.824c-2.03.136-5.8.291-7.607-.503-1.787-1.375-5.247-1.903-5.728-.241-3.918.95-7.355-.286-7.355-.286l-.16-2.647z\\",
    fill: \\"#2B0849\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M108.341 276.044h3.094s-.103 6.702 4.536 8.558c-4.64.618-8.558-2.303-7.63-8.558\\",
    fill: \\"#A4AABA\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M57.542 272.401s-2.107 7.416-4.485 12.306c-1.798 3.695-4.225 7.492 5.465 7.492 6.648 0 8.953-.48 7.423-6.599-1.53-6.12.266-13.199.266-13.199h-8.669z\\",
    fill: \\"#CBD1D1\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M51.476 289.793s2.097 1.169 6.633 1.169c6.083 0 8.249-1.65 8.249-1.65s.602 1.114-.619 2.165c-.993.855-3.597 1.591-7.39 1.546-4.145-.048-5.832-.566-6.736-1.168-.825-.55-.687-1.58-.137-2.062\\",
    fill: \\"#2B0849\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M58.419 274.304s.033 1.519-.314 2.93c-.349 1.42-1.078 3.104-1.13 4.139-.058 1.151 4.537 1.58 5.155.034.62-1.547 1.294-6.427 1.913-7.252.619-.825-4.903-2.119-5.624.15\\",
    fill: \\"#A4AABA\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M99.66 278.514l13.378.092s1.298-54.52 1.853-64.403c.554-9.882 3.776-43.364 1.002-63.128l-12.547-.644-22.849.78s-.434 3.966-1.195 9.976c-.063.496-.682.843-.749 1.365-.075.585.423 1.354.32 1.966-2.364 14.08-6.377 33.104-8.744 46.677-.116.666-1.234 1.009-1.458 2.691-.04.302.211 1.525.112 1.795-6.873 18.744-10.949 47.842-14.277 61.885l14.607-.014s2.197-8.57 4.03-16.97c2.811-12.886 23.111-85.01 23.111-85.01l3.016-.521 1.043 46.35s-.224 1.234.337 2.02c.56.785-.56 1.123-.392 2.244l.392 1.794s-.449 7.178-.898 11.89c-.448 4.71-.092 39.165-.092 39.165\\",
    fill: \\"#7BB2F9\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M76.085 221.626c1.153.094 4.038-2.019 6.955-4.935M106.36 225.142s2.774-1.11 6.103-3.883\\",
    stroke: \\"#648BD8\\",
    strokeWidth: \\"1.051\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M107.275 222.1s2.773-1.11 6.102-3.884\\",
    stroke: \\"#648BD8\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M74.74 224.767s2.622-.591 6.505-3.365M86.03 151.634c-.27 3.106.3 8.525-4.336 9.123M103.625 149.88s.11 14.012-1.293 15.065c-2.219 1.664-2.99 1.944-2.99 1.944M99.79 150.438s.035 12.88-1.196 24.377M93.673 175.911s7.212-1.664 9.431-1.664M74.31 205.861a212.013 212.013 0 0 1-.979 4.56s-1.458 1.832-1.009 3.776c.449 1.944-.947 2.045-4.985 15.355-1.696 5.59-4.49 18.591-6.348 27.597l-.231 1.12M75.689 197.807a320.934 320.934 0 0 1-.882 4.754M82.591 152.233L81.395 162.7s-1.097.15-.5 2.244c.113 1.346-2.674 15.775-5.18 30.43M56.12 274.418h13.31\\",
    stroke: \\"#648BD8\\",
    strokeWidth: \\"1.051\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M116.241 148.22s-17.047-3.104-35.893.2c.158 2.514-.003 4.15-.003 4.15s14.687-2.818 35.67-.312c.252-2.355.226-4.038.226-4.038\\",
    fill: \\"#192064\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M106.322 151.165l.003-4.911a.81.81 0 0 0-.778-.815c-2.44-.091-5.066-.108-7.836-.014a.818.818 0 0 0-.789.815l-.003 4.906a.81.81 0 0 0 .831.813c2.385-.06 4.973-.064 7.73.017a.815.815 0 0 0 .842-.81\\",
    fill: \\"#FFF\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M105.207 150.233l.002-3.076a.642.642 0 0 0-.619-.646 94.321 94.321 0 0 0-5.866-.01.65.65 0 0 0-.63.647v3.072a.64.64 0 0 0 .654.644 121.12 121.12 0 0 1 5.794.011c.362.01.665-.28.665-.642\\",
    fill: \\"#192064\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M100.263 275.415h12.338M101.436 270.53c.006 3.387.042 5.79.111 6.506M101.451 264.548a915.75 915.75 0 0 0-.015 4.337M100.986 174.965l.898 44.642s.673 1.57-.225 2.692c-.897 1.122 2.468.673.898 2.243-1.57 1.57.897 1.122 0 3.365-.596 1.489-.994 21.1-1.096 35.146\\",
    stroke: \\"#648BD8\\",
    strokeWidth: \\"1.051\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M46.876 83.427s-.516 6.045 7.223 5.552c11.2-.712 9.218-9.345 31.54-21.655-.786-2.708-2.447-4.744-2.447-4.744s-11.068 3.11-22.584 8.046c-6.766 2.9-13.395 6.352-13.732 12.801M104.46 91.057l.941-5.372-8.884-11.43-5.037 5.372-1.74 7.834a.321.321 0 0 0 .108.32c.965.8 6.5 5.013 14.347 3.544a.332.332 0 0 0 .264-.268\\",
    fill: \\"#FFC6A0\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M93.942 79.387s-4.533-2.853-2.432-6.855c1.623-3.09 4.513 1.133 4.513 1.133s.52-3.642 3.121-3.642c.52-1.04 1.561-4.162 1.561-4.162s11.445 2.601 13.526 3.121c0 5.203-2.304 19.424-7.84 19.861-8.892.703-12.449-9.456-12.449-9.456\\",
    fill: \\"#FFC6A0\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M113.874 73.446c2.601-2.081 3.47-9.722 3.47-9.722s-2.479-.49-6.64-2.05c-4.683-2.081-12.798-4.747-17.48.976-9.668 3.223-2.05 19.823-2.05 19.823l2.713-3.021s-3.935-3.287-2.08-6.243c2.17-3.462 3.92 1.073 3.92 1.073s.637-2.387 3.581-3.342c.355-.71 1.036-2.674 1.432-3.85a1.073 1.073 0 0 1 1.263-.704c2.4.558 8.677 2.019 11.356 2.662.522.125.871.615.82 1.15l-.305 3.248z\\",
    fill: \\"#520038\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M104.977 76.064c-.103.61-.582 1.038-1.07.956-.489-.083-.801-.644-.698-1.254.103-.61.582-1.038 1.07-.956.488.082.8.644.698 1.254M112.132 77.694c-.103.61-.582 1.038-1.07.956-.488-.083-.8-.644-.698-1.254.103-.61.582-1.038 1.07-.956.488.082.8.643.698 1.254\\",
    fill: \\"#552950\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    stroke: \\"#DB836E\\",
    strokeWidth: \\"1.118\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\",
    d: \\"M110.13 74.84l-.896 1.61-.298 4.357h-2.228\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M110.846 74.481s1.79-.716 2.506.537\\",
    stroke: \\"#5C2552\\",
    strokeWidth: \\"1.118\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M92.386 74.282s.477-1.114 1.113-.716c.637.398 1.274 1.433.558 1.99-.717.556.159 1.67.159 1.67\\",
    stroke: \\"#DB836E\\",
    strokeWidth: \\"1.118\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M103.287 72.93s1.83 1.113 4.137.954\\",
    stroke: \\"#5C2552\\",
    strokeWidth: \\"1.118\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M103.685 81.762s2.227 1.193 4.376 1.193M104.64 84.308s.954.398 1.511.318M94.693 81.205s2.308 7.4 10.424 7.639\\",
    stroke: \\"#DB836E\\",
    strokeWidth: \\"1.118\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M81.45 89.384s.45 5.647-4.935 12.787M69 82.654s-.726 9.282-8.204 14.206\\",
    stroke: \\"#E4EBF7\\",
    strokeWidth: \\"1.101\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M129.405 122.865s-5.272 7.403-9.422 10.768\\",
    stroke: \\"#E4EBF7\\",
    strokeWidth: \\"1.051\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M119.306 107.329s.452 4.366-2.127 32.062\\",
    stroke: \\"#E4EBF7\\",
    strokeWidth: \\"1.101\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M150.028 151.232h-49.837a1.01 1.01 0 0 1-1.01-1.01v-31.688c0-.557.452-1.01 1.01-1.01h49.837c.558 0 1.01.453 1.01 1.01v31.688a1.01 1.01 0 0 1-1.01 1.01\\",
    fill: \\"#F2D7AD\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M150.29 151.232h-19.863v-33.707h20.784v32.786a.92.92 0 0 1-.92.92\\",
    fill: \\"#F4D19D\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M123.554 127.896H92.917a.518.518 0 0 1-.425-.816l6.38-9.113c.193-.277.51-.442.85-.442h31.092l-7.26 10.371z\\",
    fill: \\"#F2D7AD\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    fill: \\"#CC9B6E\\",
    d: \\"M123.689 128.447H99.25v-.519h24.169l7.183-10.26.424.298z\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M158.298 127.896h-18.669a2.073 2.073 0 0 1-1.659-.83l-7.156-9.541h19.965c.49 0 .95.23 1.244.622l6.69 8.92a.519.519 0 0 1-.415.83\\",
    fill: \\"#F4D19D\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    fill: \\"#CC9B6E\\",
    d: \\"M157.847 128.479h-19.384l-7.857-10.475.415-.31 7.7 10.266h19.126zM130.554 150.685l-.032-8.177.519-.002.032 8.177z\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    fill: \\"#CC9B6E\\",
    d: \\"M130.511 139.783l-.08-21.414.519-.002.08 21.414zM111.876 140.932l-.498-.143 1.479-5.167.498.143zM108.437 141.06l-2.679-2.935 2.665-3.434.41.318-2.397 3.089 2.384 2.612zM116.607 141.06l-.383-.35 2.383-2.612-2.397-3.089.41-.318 2.665 3.434z\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M154.316 131.892l-3.114-1.96.038 3.514-1.043.092c-1.682.115-3.634.23-4.789.23-1.902 0-2.693 2.258 2.23 2.648l-2.645-.596s-2.168 1.317.504 2.3c0 0-1.58 1.217.561 2.58-.584 3.504 5.247 4.058 7.122 3.59 1.876-.47 4.233-2.359 4.487-5.16.28-3.085-.89-5.432-3.35-7.238\\",
    fill: \\"#FFC6A0\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M153.686 133.577s-6.522.47-8.36.372c-1.836-.098-1.904 2.19 2.359 2.264 3.739.15 5.451-.044 5.451-.044\\",
    stroke: \\"#DB836E\\",
    strokeWidth: \\"1.051\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M145.16 135.877c-1.85 1.346.561 2.355.561 2.355s3.478.898 6.73.617\\",
    stroke: \\"#DB836E\\",
    strokeWidth: \\"1.051\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M151.89 141.71s-6.28.111-6.73-2.132c-.223-1.346.45-1.402.45-1.402M146.114 140.868s-1.103 3.16 5.44 3.533M151.202 129.932v3.477M52.838 89.286c3.533-.337 8.423-1.248 13.582-7.754\\",
    stroke: \\"#DB836E\\",
    strokeWidth: \\"1.051\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M168.567 248.318a6.647 6.647 0 0 1-6.647-6.647v-66.466a6.647 6.647 0 1 1 13.294 0v66.466a6.647 6.647 0 0 1-6.647 6.647\\",
    fill: \\"#5BA02E\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M176.543 247.653a6.647 6.647 0 0 1-6.646-6.647v-33.232a6.647 6.647 0 1 1 13.293 0v33.232a6.647 6.647 0 0 1-6.647 6.647\\",
    fill: \\"#92C110\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M186.443 293.613H158.92a3.187 3.187 0 0 1-3.187-3.187v-46.134a3.187 3.187 0 0 1 3.187-3.187h27.524a3.187 3.187 0 0 1 3.187 3.187v46.134a3.187 3.187 0 0 1-3.187 3.187\\",
    fill: \\"#F2D7AD\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M88.979 89.48s7.776 5.384 16.6 2.842\\",
    stroke: \\"#E4EBF7\\",
    strokeWidth: \\"1.101\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  })));
};

var ServerError = function ServerError() {
  return /*#__PURE__*/React.createElement(\\"svg\\", {
    width: \\"254\\",
    height: \\"294\\"
  }, /*#__PURE__*/React.createElement(\\"defs\\", null, /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M0 .335h253.49v253.49H0z\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M0 293.665h253.49V.401H0z\\"
  })), /*#__PURE__*/React.createElement(\\"g\\", {
    fill: \\"none\\",
    fillRule: \\"evenodd\\"
  }, /*#__PURE__*/React.createElement(\\"g\\", {
    transform: \\"translate(0 .067)\\"
  }, /*#__PURE__*/React.createElement(\\"mask\\", {
    fill: \\"#fff\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M0 128.134v-2.11C0 56.608 56.273.334 125.69.334h2.11c69.416 0 125.69 56.274 125.69 125.69v2.11c0 69.417-56.274 125.69-125.69 125.69h-2.11C56.273 253.824 0 197.551 0 128.134\\",
    fill: \\"#E4EBF7\\",
    mask: \\"url(#b)\\"
  })), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M39.989 132.108a8.332 8.332 0 1 1-16.581-1.671 8.332 8.332 0 0 1 16.58 1.671\\",
    fill: \\"#FFF\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M37.19 135.59l10.553 5.983M48.665 147.884l-12.734 10.861\\",
    stroke: \\"#FFF\\",
    strokeWidth: \\"2\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M40.11 160.816a5.706 5.706 0 1 1-11.354-1.145 5.706 5.706 0 0 1 11.354 1.145M57.943 144.6a5.747 5.747 0 1 1-11.436-1.152 5.747 5.747 0 0 1 11.436 1.153M99.656 27.434l30.024-.013a4.619 4.619 0 1 0-.004-9.238l-30.024.013a4.62 4.62 0 0 0 .004 9.238M111.14 45.896l30.023-.013a4.62 4.62 0 1 0-.004-9.238l-30.024.013a4.619 4.619 0 1 0 .004 9.238\\",
    fill: \\"#FFF\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M113.53 27.421v-.002l15.89-.007a4.619 4.619 0 1 0 .005 9.238l-15.892.007v-.002a4.618 4.618 0 0 0-.004-9.234M150.167 70.091h-3.979a4.789 4.789 0 0 1-4.774-4.775 4.788 4.788 0 0 1 4.774-4.774h3.979a4.789 4.789 0 0 1 4.775 4.774 4.789 4.789 0 0 1-4.775 4.775\\",
    fill: \\"#FFF\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M171.687 30.234c0-16.392 13.289-29.68 29.681-29.68 16.392 0 29.68 13.288 29.68 29.68 0 16.393-13.288 29.681-29.68 29.681s-29.68-13.288-29.68-29.68\\",
    fill: \\"#FF603B\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M203.557 19.435l-.676 15.035a1.514 1.514 0 0 1-3.026 0l-.675-15.035a2.19 2.19 0 1 1 4.377 0m-.264 19.378c.513.477.77 1.1.77 1.87s-.257 1.393-.77 1.907c-.55.476-1.21.733-1.943.733a2.545 2.545 0 0 1-1.87-.77c-.55-.514-.806-1.136-.806-1.87 0-.77.256-1.393.806-1.87.513-.513 1.137-.733 1.87-.733.77 0 1.43.22 1.943.733\\",
    fill: \\"#FFF\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M119.3 133.275c4.426-.598 3.612-1.204 4.079-4.778.675-5.18-3.108-16.935-8.262-25.118-1.088-10.72-12.598-11.24-12.598-11.24s4.312 4.895 4.196 16.199c1.398 5.243.804 14.45.804 14.45s5.255 11.369 11.78 10.487\\",
    fill: \\"#FFB594\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M100.944 91.61s1.463-.583 3.211.582c8.08 1.398 10.368 6.706 11.3 11.368 1.864 1.282 1.864 2.33 1.864 3.496.365.777 1.515 3.03 1.515 3.03s-7.225 1.748-10.954 6.758c-1.399-6.41-6.936-25.235-6.936-25.235\\",
    fill: \\"#FFF\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M94.008 90.5l1.019-5.815-9.23-11.874-5.233 5.581-2.593 9.863s8.39 5.128 16.037 2.246\\",
    fill: \\"#FFB594\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M82.931 78.216s-4.557-2.868-2.445-6.892c1.632-3.107 4.537 1.139 4.537 1.139s.524-3.662 3.139-3.662c.523-1.046 1.569-4.184 1.569-4.184s11.507 2.615 13.6 3.138c-.001 5.23-2.317 19.529-7.884 19.969-8.94.706-12.516-9.508-12.516-9.508\\",
    fill: \\"#FFC6A0\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M102.971 72.243c2.616-2.093 3.489-9.775 3.489-9.775s-2.492-.492-6.676-2.062c-4.708-2.092-12.867-4.771-17.575.982-9.54 4.41-2.062 19.93-2.062 19.93l2.729-3.037s-3.956-3.304-2.092-6.277c2.183-3.48 3.943 1.08 3.943 1.08s.64-2.4 3.6-3.36c.356-.714 1.04-2.69 1.44-3.872a1.08 1.08 0 0 1 1.27-.707c2.41.56 8.723 2.03 11.417 2.676.524.126.876.619.825 1.156l-.308 3.266z\\",
    fill: \\"#520038\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M101.22 76.514c-.104.613-.585 1.044-1.076.96-.49-.082-.805-.646-.702-1.26.104-.613.585-1.044 1.076-.961.491.083.805.647.702 1.26M94.26 75.074c-.104.613-.585 1.044-1.076.96-.49-.082-.805-.646-.702-1.26.104-.613.585-1.044 1.076-.96.491.082.805.646.702 1.26\\",
    fill: \\"#552950\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    stroke: \\"#DB836E\\",
    strokeWidth: \\"1.063\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\",
    d: \\"M99.206 73.644l-.9 1.62-.3 4.38h-2.24\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M99.926 73.284s1.8-.72 2.52.54\\",
    stroke: \\"#5C2552\\",
    strokeWidth: \\"1.117\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M81.367 73.084s.48-1.12 1.12-.72c.64.4 1.28 1.44.56 2s.16 1.68.16 1.68\\",
    stroke: \\"#DB836E\\",
    strokeWidth: \\"1.117\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M92.326 71.724s1.84 1.12 4.16.96\\",
    stroke: \\"#5C2552\\",
    strokeWidth: \\"1.117\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M92.726 80.604s2.24 1.2 4.4 1.2M93.686 83.164s.96.4 1.52.32M83.687 80.044s1.786 6.547 9.262 7.954\\",
    stroke: \\"#DB836E\\",
    strokeWidth: \\"1.063\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M95.548 91.663s-1.068 2.821-8.298 2.105c-7.23-.717-10.29-5.044-10.29-5.044\\",
    stroke: \\"#E4EBF7\\",
    strokeWidth: \\"1.136\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M78.126 87.478s6.526 4.972 16.47 2.486c0 0 9.577 1.02 11.536 5.322 5.36 11.77.543 36.835 0 39.962 3.496 4.055-.466 8.483-.466 8.483-15.624-3.548-35.81-.6-35.81-.6-4.849-3.546-1.223-9.044-1.223-9.044L62.38 110.32c-2.485-15.227.833-19.803 3.549-20.743 3.03-1.049 8.04-1.282 8.04-1.282.496-.058 1.08-.076 1.37-.233 2.36-1.282 2.787-.583 2.787-.583\\",
    fill: \\"#FFF\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M65.828 89.81s-6.875.465-7.59 8.156c-.466 8.857 3.03 10.954 3.03 10.954s6.075 22.102 16.796 22.957c8.39-2.176 4.758-6.702 4.661-11.42-.233-11.304-7.108-16.897-7.108-16.897s-4.212-13.75-9.789-13.75\\",
    fill: \\"#FFC6A0\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M71.716 124.225s.855 11.264 9.828 6.486c4.765-2.536 7.581-13.828 9.789-22.568 1.456-5.768 2.58-12.197 2.58-12.197l-4.973-1.709s-2.408 5.516-7.769 12.275c-4.335 5.467-9.144 11.11-9.455 17.713\\",
    fill: \\"#FFC6A0\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M108.463 105.191s1.747 2.724-2.331 30.535c2.376 2.216 1.053 6.012-.233 7.51\\",
    stroke: \\"#E4EBF7\\",
    strokeWidth: \\"1.085\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M123.262 131.527s-.427 2.732-11.77 1.981c-15.187-1.006-25.326-3.25-25.326-3.25l.933-5.8s.723.215 9.71-.068c11.887-.373 18.714-6.07 24.964-1.022 4.039 3.263 1.489 8.16 1.489 8.16\\",
    fill: \\"#FFC6A0\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M70.24 90.974s-5.593-4.739-11.054 2.68c-3.318 7.223.517 15.284 2.664 19.578-.31 3.729 2.33 4.311 2.33 4.311s.108.895 1.516 2.68c4.078-7.03 6.72-9.166 13.711-12.546-.328-.656-1.877-3.265-1.825-3.767.175-1.69-1.282-2.623-1.282-2.623s-.286-.156-1.165-2.738c-.788-2.313-2.036-5.177-4.895-7.575\\",
    fill: \\"#FFF\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M90.232 288.027s4.855 2.308 8.313 1.155c3.188-1.063 5.12.755 8.002 1.331 2.881.577 7.769 1.243 13.207-1.424-.117-6.228-7.786-4.499-13.518-7.588-2.895-1.56-4.276-5.336-4.066-9.944H91.544s-1.573 11.89-1.312 16.47\\",
    fill: \\"#CBD1D1\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M90.207 287.833s2.745 1.437 7.639.738c3.456-.494 3.223.66 7.418 1.282 4.195.621 13.092-.194 14.334-1.126.466 1.242-.388 2.33-.388 2.33s-1.709.682-5.438.932c-2.295.154-8.098.276-10.14-.621-2.02-1.554-4.894-1.515-6.06-.234-4.427 1.075-7.184-.31-7.184-.31l-.181-2.991z\\",
    fill: \\"#2B0849\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M98.429 272.257h3.496s-.117 7.574 5.127 9.671c-5.244.7-9.672-2.602-8.623-9.671\\",
    fill: \\"#A4AABA\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M44.425 272.046s-2.208 7.774-4.702 12.899c-1.884 3.874-4.428 7.854 5.729 7.854 6.97 0 9.385-.503 7.782-6.917-1.604-6.415.279-13.836.279-13.836h-9.088z\\",
    fill: \\"#CBD1D1\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M38.066 290.277s2.198 1.225 6.954 1.225c6.376 0 8.646-1.73 8.646-1.73s.63 1.168-.649 2.27c-1.04.897-3.77 1.668-7.745 1.621-4.347-.05-6.115-.593-7.062-1.224-.864-.577-.72-1.657-.144-2.162\\",
    fill: \\"#2B0849\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M45.344 274.041s.035 1.592-.329 3.07c-.365 1.49-1.13 3.255-1.184 4.34-.061 1.206 4.755 1.657 5.403.036.65-1.622 1.357-6.737 2.006-7.602.648-.865-5.14-2.222-5.896.156\\",
    fill: \\"#A4AABA\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M89.476 277.57l13.899.095s1.349-56.643 1.925-66.909c.576-10.267 3.923-45.052 1.042-65.585l-13.037-.669-23.737.81s-.452 4.12-1.243 10.365c-.065.515-.708.874-.777 1.417-.078.608.439 1.407.332 2.044-2.455 14.627-5.797 32.736-8.256 46.837-.121.693-1.282 1.048-1.515 2.796-.042.314.22 1.584.116 1.865-7.14 19.473-12.202 52.601-15.66 67.19l15.176-.015s2.282-10.145 4.185-18.871c2.922-13.389 24.012-88.32 24.012-88.32l3.133-.954-.158 48.568s-.233 1.282.35 2.098c.583.815-.581 1.167-.408 2.331l.408 1.864s-.466 7.458-.932 12.352c-.467 4.895 1.145 40.69 1.145 40.69\\",
    fill: \\"#7BB2F9\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M64.57 218.881c1.197.099 4.195-2.097 7.225-5.127M96.024 222.534s2.881-1.152 6.34-4.034\\",
    stroke: \\"#648BD8\\",
    strokeWidth: \\"1.085\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M96.973 219.373s2.882-1.153 6.34-4.034\\",
    stroke: \\"#648BD8\\",
    strokeWidth: \\"1.032\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M63.172 222.144s2.724-.614 6.759-3.496M74.903 146.166c-.281 3.226.31 8.856-4.506 9.478M93.182 144.344s.115 14.557-1.344 15.65c-2.305 1.73-3.107 2.02-3.107 2.02M89.197 144.923s.269 13.144-1.01 25.088M83.525 170.71s6.81-1.051 9.116-1.051M46.026 270.045l-.892 4.538M46.937 263.289l-.815 4.157M62.725 202.503c-.33 1.618-.102 1.904-.449 3.438 0 0-2.756 1.903-2.29 3.923.466 2.02-.31 3.424-4.505 17.252-1.762 5.807-4.233 18.922-6.165 28.278-.03.144-.521 2.646-1.14 5.8M64.158 194.136c-.295 1.658-.6 3.31-.917 4.938M71.33 146.787l-1.244 10.877s-1.14.155-.519 2.33c.117 1.399-2.778 16.39-5.382 31.615M44.242 273.727H58.07\\",
    stroke: \\"#648BD8\\",
    strokeWidth: \\"1.085\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M106.18 142.117c-3.028-.489-18.825-2.744-36.219.2a.625.625 0 0 0-.518.644c.063 1.307.044 2.343.015 2.995a.617.617 0 0 0 .716.636c3.303-.534 17.037-2.412 35.664-.266.347.04.66-.214.692-.56.124-1.347.16-2.425.17-3.029a.616.616 0 0 0-.52-.62\\",
    fill: \\"#192064\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M96.398 145.264l.003-5.102a.843.843 0 0 0-.809-.847 114.104 114.104 0 0 0-8.141-.014.85.85 0 0 0-.82.847l-.003 5.097c0 .476.388.857.864.845 2.478-.064 5.166-.067 8.03.017a.848.848 0 0 0 .876-.843\\",
    fill: \\"#FFF\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M95.239 144.296l.002-3.195a.667.667 0 0 0-.643-.672c-1.9-.061-3.941-.073-6.094-.01a.675.675 0 0 0-.654.672l-.002 3.192c0 .376.305.677.68.669 1.859-.042 3.874-.043 6.02.012.376.01.69-.291.691-.668\\",
    fill: \\"#192064\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M90.102 273.522h12.819M91.216 269.761c.006 3.519-.072 5.55 0 6.292M90.923 263.474c-.009 1.599-.016 2.558-.016 4.505M90.44 170.404l.932 46.38s.7 1.631-.233 2.796c-.932 1.166 2.564.7.932 2.33-1.63 1.633.933 1.166 0 3.497-.618 1.546-1.031 21.921-1.138 36.513\\",
    stroke: \\"#648BD8\\",
    strokeWidth: \\"1.085\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M73.736 98.665l2.214 4.312s2.098.816 1.865 2.68l.816 2.214M64.297 116.611c.233-.932 2.176-7.147 12.585-10.488M77.598 90.042s7.691 6.137 16.547 2.72\\",
    stroke: \\"#E4EBF7\\",
    strokeWidth: \\"1.085\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M91.974 86.954s5.476-.816 7.574-4.545c1.297-.345.72 2.212-.33 3.671-.7.971-1.01 1.554-1.01 1.554s.194.31.155.816c-.053.697-.175.653-.272 1.048-.081.335.108.657 0 1.049-.046.17-.198.5-.382.878-.12.249-.072.687-.2.948-.231.469-1.562 1.87-2.622 2.855-3.826 3.554-5.018 1.644-6.001-.408-.894-1.865-.661-5.127-.874-6.875-.35-2.914-2.622-3.03-1.923-4.429.343-.685 2.87.69 3.263 1.748.757 2.04 2.952 1.807 2.622 1.69\\",
    fill: \\"#FFC6A0\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M99.8 82.429c-.465.077-.35.272-.97 1.243-.622.971-4.817 2.932-6.39 3.224-2.589.48-2.278-1.56-4.254-2.855-1.69-1.107-3.562-.638-1.398 1.398.99.932.932 1.107 1.398 3.205.335 1.506-.64 3.67.7 5.593\\",
    stroke: \\"#DB836E\\",
    strokeWidth: \\".774\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M79.543 108.673c-2.1 2.926-4.266 6.175-5.557 8.762\\",
    stroke: \\"#E59788\\",
    strokeWidth: \\".774\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M87.72 124.768s-2.098-1.942-5.127-2.719c-3.03-.777-3.574-.155-5.516.078-1.942.233-3.885-.932-3.652.7.233 1.63 5.05 1.01 5.206 2.097.155 1.087-6.37 2.796-8.313 2.175-.777.777.466 1.864 2.02 2.175.233 1.554 2.253 1.554 2.253 1.554s.699 1.01 2.641 1.088c2.486 1.32 8.934-.7 10.954-1.554 2.02-.855-.466-5.594-.466-5.594\\",
    fill: \\"#FFC6A0\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M73.425 122.826s.66 1.127 3.167 1.418c2.315.27 2.563.583 2.563.583s-2.545 2.894-9.07 2.272M72.416 129.274s3.826.097 4.933-.718M74.98 130.75s1.961.136 3.36-.505M77.232 131.916s1.748.019 2.914-.505M73.328 122.321s-.595-1.032 1.262-.427c1.671.544 2.833.055 5.128.155 1.389.061 3.067-.297 3.982.15 1.606.784 3.632 2.181 3.632 2.181s10.526 1.204 19.033-1.127M78.864 108.104s-8.39 2.758-13.168 12.12\\",
    stroke: \\"#E59788\\",
    strokeWidth: \\".774\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M109.278 112.533s3.38-3.613 7.575-4.662\\",
    stroke: \\"#E4EBF7\\",
    strokeWidth: \\"1.085\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M107.375 123.006s9.697-2.745 11.445-.88\\",
    stroke: \\"#E59788\\",
    strokeWidth: \\".774\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M194.605 83.656l3.971-3.886M187.166 90.933l3.736-3.655M191.752 84.207l-4.462-4.56M198.453 91.057l-4.133-4.225M129.256 163.074l3.718-3.718M122.291 170.039l3.498-3.498M126.561 163.626l-4.27-4.27M132.975 170.039l-3.955-3.955\\",
    stroke: \\"#BFCDDD\\",
    strokeWidth: \\"2\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M190.156 211.779h-1.604a4.023 4.023 0 0 1-4.011-4.011V175.68a4.023 4.023 0 0 1 4.01-4.01h1.605a4.023 4.023 0 0 1 4.011 4.01v32.088a4.023 4.023 0 0 1-4.01 4.01\\",
    fill: \\"#A3B4C6\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M237.824 212.977a4.813 4.813 0 0 1-4.813 4.813h-86.636a4.813 4.813 0 0 1 0-9.626h86.636a4.813 4.813 0 0 1 4.813 4.813\\",
    fill: \\"#A3B4C6\\"
  }), /*#__PURE__*/React.createElement(\\"mask\\", {
    fill: \\"#fff\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    fill: \\"#A3B4C6\\",
    mask: \\"url(#d)\\",
    d: \\"M154.098 190.096h70.513v-84.617h-70.513z\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M224.928 190.096H153.78a3.219 3.219 0 0 1-3.208-3.209V167.92a3.219 3.219 0 0 1 3.208-3.21h71.148a3.219 3.219 0 0 1 3.209 3.21v18.967a3.219 3.219 0 0 1-3.21 3.209M224.928 130.832H153.78a3.218 3.218 0 0 1-3.208-3.208v-18.968a3.219 3.219 0 0 1 3.208-3.209h71.148a3.219 3.219 0 0 1 3.209 3.21v18.967a3.218 3.218 0 0 1-3.21 3.208\\",
    fill: \\"#BFCDDD\\",
    mask: \\"url(#d)\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M159.563 120.546a2.407 2.407 0 1 1 0-4.813 2.407 2.407 0 0 1 0 4.813M166.98 120.546a2.407 2.407 0 1 1 0-4.813 2.407 2.407 0 0 1 0 4.813M174.397 120.546a2.407 2.407 0 1 1 0-4.813 2.407 2.407 0 0 1 0 4.813M222.539 120.546h-22.461a.802.802 0 0 1-.802-.802v-3.208c0-.443.359-.803.802-.803h22.46c.444 0 .803.36.803.803v3.208c0 .443-.36.802-.802.802\\",
    fill: \\"#FFF\\",
    mask: \\"url(#d)\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M224.928 160.464H153.78a3.218 3.218 0 0 1-3.208-3.209v-18.967a3.219 3.219 0 0 1 3.208-3.209h71.148a3.219 3.219 0 0 1 3.209 3.209v18.967a3.218 3.218 0 0 1-3.21 3.209\\",
    fill: \\"#BFCDDD\\",
    mask: \\"url(#d)\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M173.455 130.832h49.301M164.984 130.832h6.089M155.952 130.832h6.75M173.837 160.613h49.3M165.365 160.613h6.089M155.57 160.613h6.751\\",
    stroke: \\"#7C90A5\\",
    strokeWidth: \\"1.124\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\",
    mask: \\"url(#d)\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M159.563 151.038a2.407 2.407 0 1 1 0-4.814 2.407 2.407 0 0 1 0 4.814M166.98 151.038a2.407 2.407 0 1 1 0-4.814 2.407 2.407 0 0 1 0 4.814M174.397 151.038a2.407 2.407 0 1 1 .001-4.814 2.407 2.407 0 0 1 0 4.814M222.539 151.038h-22.461a.802.802 0 0 1-.802-.802v-3.209c0-.443.359-.802.802-.802h22.46c.444 0 .803.36.803.802v3.209c0 .443-.36.802-.802.802M159.563 179.987a2.407 2.407 0 1 1 0-4.813 2.407 2.407 0 0 1 0 4.813M166.98 179.987a2.407 2.407 0 1 1 0-4.813 2.407 2.407 0 0 1 0 4.813M174.397 179.987a2.407 2.407 0 1 1 0-4.813 2.407 2.407 0 0 1 0 4.813M222.539 179.987h-22.461a.802.802 0 0 1-.802-.802v-3.209c0-.443.359-.802.802-.802h22.46c.444 0 .803.36.803.802v3.209c0 .443-.36.802-.802.802\\",
    fill: \\"#FFF\\",
    mask: \\"url(#d)\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M203.04 221.108h-27.372a2.413 2.413 0 0 1-2.406-2.407v-11.448a2.414 2.414 0 0 1 2.406-2.407h27.372a2.414 2.414 0 0 1 2.407 2.407V218.7a2.413 2.413 0 0 1-2.407 2.407\\",
    fill: \\"#BFCDDD\\",
    mask: \\"url(#d)\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M177.259 207.217v11.52M201.05 207.217v11.52\\",
    stroke: \\"#A3B4C6\\",
    strokeWidth: \\"1.124\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\",
    mask: \\"url(#d)\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M162.873 267.894a9.422 9.422 0 0 1-9.422-9.422v-14.82a9.423 9.423 0 0 1 18.845 0v14.82a9.423 9.423 0 0 1-9.423 9.422\\",
    fill: \\"#5BA02E\\",
    mask: \\"url(#d)\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M171.22 267.83a9.422 9.422 0 0 1-9.422-9.423v-3.438a9.423 9.423 0 0 1 18.845 0v3.438a9.423 9.423 0 0 1-9.422 9.423\\",
    fill: \\"#92C110\\",
    mask: \\"url(#d)\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M181.31 293.666h-27.712a3.209 3.209 0 0 1-3.209-3.21V269.79a3.209 3.209 0 0 1 3.209-3.21h27.711a3.209 3.209 0 0 1 3.209 3.21v20.668a3.209 3.209 0 0 1-3.209 3.209\\",
    fill: \\"#F2D7AD\\",
    mask: \\"url(#d)\\"
  })));
};

var Unauthorized = function Unauthorized() {
  return /*#__PURE__*/React.createElement(\\"svg\\", {
    width: \\"251\\",
    height: \\"294\\"
  }, /*#__PURE__*/React.createElement(\\"g\\", {
    fill: \\"none\\",
    fillRule: \\"evenodd\\"
  }, /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M0 129.023v-2.084C0 58.364 55.591 2.774 124.165 2.774h2.085c68.574 0 124.165 55.59 124.165 124.165v2.084c0 68.575-55.59 124.166-124.165 124.166h-2.085C55.591 253.189 0 197.598 0 129.023\\",
    fill: \\"#E4EBF7\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M41.417 132.92a8.231 8.231 0 1 1-16.38-1.65 8.231 8.231 0 0 1 16.38 1.65\\",
    fill: \\"#FFF\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M38.652 136.36l10.425 5.91M49.989 148.505l-12.58 10.73\\",
    stroke: \\"#FFF\\",
    strokeWidth: \\"2\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M41.536 161.28a5.636 5.636 0 1 1-11.216-1.13 5.636 5.636 0 0 1 11.216 1.13M59.154 145.261a5.677 5.677 0 1 1-11.297-1.138 5.677 5.677 0 0 1 11.297 1.138M100.36 29.516l29.66-.013a4.562 4.562 0 1 0-.004-9.126l-29.66.013a4.563 4.563 0 0 0 .005 9.126M111.705 47.754l29.659-.013a4.563 4.563 0 1 0-.004-9.126l-29.66.013a4.563 4.563 0 1 0 .005 9.126\\",
    fill: \\"#FFF\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M114.066 29.503V29.5l15.698-.007a4.563 4.563 0 1 0 .004 9.126l-15.698.007v-.002a4.562 4.562 0 0 0-.004-9.122M185.405 137.723c-.55 5.455-5.418 9.432-10.873 8.882-5.456-.55-9.432-5.418-8.882-10.873.55-5.455 5.418-9.432 10.873-8.882 5.455.55 9.432 5.418 8.882 10.873\\",
    fill: \\"#FFF\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M180.17 143.772l12.572 7.129M193.841 158.42L178.67 171.36\\",
    stroke: \\"#FFF\\",
    strokeWidth: \\"2\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M185.55 171.926a6.798 6.798 0 1 1-13.528-1.363 6.798 6.798 0 0 1 13.527 1.363M204.12 155.285a6.848 6.848 0 1 1-13.627-1.375 6.848 6.848 0 0 1 13.626 1.375\\",
    fill: \\"#FFF\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M152.988 194.074a2.21 2.21 0 1 1-4.42 0 2.21 2.21 0 0 1 4.42 0zM225.931 118.217a2.21 2.21 0 1 1-4.421 0 2.21 2.21 0 0 1 4.421 0zM217.09 153.051a2.21 2.21 0 1 1-4.421 0 2.21 2.21 0 0 1 4.42 0zM177.84 109.842a2.21 2.21 0 1 1-4.422 0 2.21 2.21 0 0 1 4.421 0zM196.114 94.454a2.21 2.21 0 1 1-4.421 0 2.21 2.21 0 0 1 4.421 0zM202.844 182.523a2.21 2.21 0 1 1-4.42 0 2.21 2.21 0 0 1 4.42 0z\\",
    stroke: \\"#FFF\\",
    strokeWidth: \\"2\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    stroke: \\"#FFF\\",
    strokeWidth: \\"2\\",
    d: \\"M215.125 155.262l-1.902 20.075-10.87 5.958M174.601 176.636l-6.322 9.761H156.98l-4.484 6.449M175.874 127.28V111.56M221.51 119.404l-12.77 7.859-15.228-7.86V96.668\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M180.68 29.32C180.68 13.128 193.806 0 210 0c16.193 0 29.32 13.127 29.32 29.32 0 16.194-13.127 29.322-29.32 29.322-16.193 0-29.32-13.128-29.32-29.321\\",
    fill: \\"#A26EF4\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M221.45 41.706l-21.563-.125a1.744 1.744 0 0 1-1.734-1.754l.071-12.23a1.744 1.744 0 0 1 1.754-1.734l21.562.125c.964.006 1.74.791 1.735 1.755l-.071 12.229a1.744 1.744 0 0 1-1.754 1.734\\",
    fill: \\"#FFF\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M215.106 29.192c-.015 2.577-2.049 4.654-4.543 4.64-2.494-.014-4.504-2.115-4.489-4.693l.04-6.925c.016-2.577 2.05-4.654 4.543-4.64 2.494.015 4.504 2.116 4.49 4.693l-.04 6.925zm-4.53-14.074a6.877 6.877 0 0 0-6.916 6.837l-.043 7.368a6.877 6.877 0 0 0 13.754.08l.042-7.368a6.878 6.878 0 0 0-6.837-6.917zM167.566 68.367h-3.93a4.73 4.73 0 0 1-4.717-4.717 4.73 4.73 0 0 1 4.717-4.717h3.93a4.73 4.73 0 0 1 4.717 4.717 4.73 4.73 0 0 1-4.717 4.717\\",
    fill: \\"#FFF\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M168.214 248.838a6.611 6.611 0 0 1-6.61-6.611v-66.108a6.611 6.611 0 0 1 13.221 0v66.108a6.611 6.611 0 0 1-6.61 6.61\\",
    fill: \\"#5BA02E\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M176.147 248.176a6.611 6.611 0 0 1-6.61-6.61v-33.054a6.611 6.611 0 1 1 13.221 0v33.053a6.611 6.611 0 0 1-6.61 6.611\\",
    fill: \\"#92C110\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M185.994 293.89h-27.376a3.17 3.17 0 0 1-3.17-3.17v-45.887a3.17 3.17 0 0 1 3.17-3.17h27.376a3.17 3.17 0 0 1 3.17 3.17v45.886a3.17 3.17 0 0 1-3.17 3.17\\",
    fill: \\"#F2D7AD\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M81.972 147.673s6.377-.927 17.566-1.28c11.729-.371 17.57 1.086 17.57 1.086s3.697-3.855.968-8.424c1.278-12.077 5.982-32.827.335-48.273-1.116-1.339-3.743-1.512-7.536-.62-1.337.315-7.147-.149-7.983-.1l-15.311-.347s-3.487-.17-8.035-.508c-1.512-.113-4.227-1.683-5.458-.338-.406.443-2.425 5.669-1.97 16.077l8.635 35.642s-3.141 3.61 1.219 7.085\\",
    fill: \\"#FFF\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M75.768 73.325l-.9-6.397 11.982-6.52s7.302-.118 8.038 1.205c.737 1.324-5.616.993-5.616.993s-1.836 1.388-2.615 2.5c-1.654 2.363-.986 6.471-8.318 5.986-1.708.284-2.57 2.233-2.57 2.233\\",
    fill: \\"#FFC6A0\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M52.44 77.672s14.217 9.406 24.973 14.444c1.061.497-2.094 16.183-11.892 11.811-7.436-3.318-20.162-8.44-21.482-14.496-.71-3.258 2.543-7.643 8.401-11.76M141.862 80.113s-6.693 2.999-13.844 6.876c-3.894 2.11-10.137 4.704-12.33 7.988-6.224 9.314 3.536 11.22 12.947 7.503 6.71-2.651 28.999-12.127 13.227-22.367\\",
    fill: \\"#FFB594\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M76.166 66.36l3.06 3.881s-2.783 2.67-6.31 5.747c-7.103 6.195-12.803 14.296-15.995 16.44-3.966 2.662-9.754 3.314-12.177-.118-3.553-5.032.464-14.628 31.422-25.95\\",
    fill: \\"#FFC6A0\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M64.674 85.116s-2.34 8.413-8.912 14.447c.652.548 18.586 10.51 22.144 10.056 5.238-.669 6.417-18.968 1.145-20.531-.702-.208-5.901-1.286-8.853-2.167-.87-.26-1.611-1.71-3.545-.936l-1.98-.869zM128.362 85.826s5.318 1.956 7.325 13.734c-.546.274-17.55 12.35-21.829 7.805-6.534-6.94-.766-17.393 4.275-18.61 4.646-1.121 5.03-1.37 10.23-2.929\\",
    fill: \\"#FFF\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M78.18 94.656s.911 7.41-4.914 13.078\\",
    stroke: \\"#E4EBF7\\",
    strokeWidth: \\"1.051\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M87.397 94.68s3.124 2.572 10.263 2.572c7.14 0 9.074-3.437 9.074-3.437\\",
    stroke: \\"#E4EBF7\\",
    strokeWidth: \\".932\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M117.184 68.639l-6.781-6.177s-5.355-4.314-9.223-.893c-3.867 3.422 4.463 2.083 5.653 4.165 1.19 2.082.848 1.143-2.083.446-5.603-1.331-2.082.893 2.975 5.355 2.091 1.845 6.992.955 6.992.955l2.467-3.851z\\",
    fill: \\"#FFC6A0\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M105.282 91.315l-.297-10.937-15.918-.027-.53 10.45c-.026.403.17.788.515.999 2.049 1.251 9.387 5.093 15.799.424.287-.21.443-.554.431-.91\\",
    fill: \\"#FFB594\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M107.573 74.24c.817-1.147.982-9.118 1.015-11.928a1.046 1.046 0 0 0-.965-1.055l-4.62-.365c-7.71-1.044-17.071.624-18.253 6.346-5.482 5.813-.421 13.244-.421 13.244s1.963 3.566 4.305 6.791c.756 1.041.398-3.731 3.04-5.929 5.524-4.594 15.899-7.103 15.899-7.103\\",
    fill: \\"#5C2552\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M88.426 83.206s2.685 6.202 11.602 6.522c7.82.28 8.973-7.008 7.434-17.505l-.909-5.483c-6.118-2.897-15.478.54-15.478.54s-.576 2.044-.19 5.504c-2.276 2.066-1.824 5.618-1.824 5.618s-.905-1.922-1.98-2.321c-.86-.32-1.897.089-2.322 1.98-1.04 4.632 3.667 5.145 3.667 5.145\\",
    fill: \\"#FFC6A0\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    stroke: \\"#DB836E\\",
    strokeWidth: \\"1.145\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\",
    d: \\"M100.843 77.099l1.701-.928-1.015-4.324.674-1.406\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M105.546 74.092c-.022.713-.452 1.279-.96 1.263-.51-.016-.904-.607-.882-1.32.021-.713.452-1.278.96-1.263.51.016.904.607.882 1.32M97.592 74.349c-.022.713-.452 1.278-.961 1.263-.509-.016-.904-.607-.882-1.32.022-.713.452-1.279.961-1.263.51.016.904.606.882 1.32\\",
    fill: \\"#552950\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M91.132 86.786s5.269 4.957 12.679 2.327\\",
    stroke: \\"#DB836E\\",
    strokeWidth: \\"1.145\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M99.776 81.903s-3.592.232-1.44-2.79c1.59-1.496 4.897-.46 4.897-.46s1.156 3.906-3.457 3.25\\",
    fill: \\"#DB836E\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M102.88 70.6s2.483.84 3.402.715M93.883 71.975s2.492-1.144 4.778-1.073\\",
    stroke: \\"#5C2552\\",
    strokeWidth: \\"1.526\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M86.32 77.374s.961.879 1.458 2.106c-.377.48-1.033 1.152-.236 1.809M99.337 83.719s1.911.151 2.509-.254\\",
    stroke: \\"#DB836E\\",
    strokeWidth: \\"1.145\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M87.782 115.821l15.73-3.012M100.165 115.821l10.04-2.008\\",
    stroke: \\"#E4EBF7\\",
    strokeWidth: \\"1.051\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M66.508 86.763s-1.598 8.83-6.697 14.078\\",
    stroke: \\"#E4EBF7\\",
    strokeWidth: \\"1.114\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M128.31 87.934s3.013 4.121 4.06 11.785\\",
    stroke: \\"#E4EBF7\\",
    strokeWidth: \\"1.051\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M64.09 84.816s-6.03 9.912-13.607 9.903\\",
    stroke: \\"#DB836E\\",
    strokeWidth: \\".795\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M112.366 65.909l-.142 5.32s5.993 4.472 11.945 9.202c4.482 3.562 8.888 7.455 10.985 8.662 4.804 2.766 8.9 3.355 11.076 1.808 4.071-2.894 4.373-9.878-8.136-15.263-4.271-1.838-16.144-6.36-25.728-9.73\\",
    fill: \\"#FFC6A0\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M130.532 85.488s4.588 5.757 11.619 6.214\\",
    stroke: \\"#DB836E\\",
    strokeWidth: \\".75\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M121.708 105.73s-.393 8.564-1.34 13.612\\",
    stroke: \\"#E4EBF7\\",
    strokeWidth: \\"1.051\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M115.784 161.512s-3.57-1.488-2.678-7.14\\",
    stroke: \\"#648BD8\\",
    strokeWidth: \\"1.051\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M101.52 290.246s4.326 2.057 7.408 1.03c2.842-.948 4.564.673 7.132 1.186 2.57.514 6.925 1.108 11.772-1.269-.104-5.551-6.939-4.01-12.048-6.763-2.582-1.39-3.812-4.757-3.625-8.863h-9.471s-1.402 10.596-1.169 14.68\\",
    fill: \\"#CBD1D1\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M101.496 290.073s2.447 1.281 6.809.658c3.081-.44 3.74.485 7.479 1.039 3.739.554 10.802-.07 11.91-.9.415 1.108-.347 2.077-.347 2.077s-1.523.608-4.847.831c-2.045.137-5.843.293-7.663-.507-1.8-1.385-5.286-1.917-5.77-.243-3.947.958-7.41-.288-7.41-.288l-.16-2.667z\\",
    fill: \\"#2B0849\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M108.824 276.19h3.116s-.103 6.751 4.57 8.62c-4.673.624-8.62-2.32-7.686-8.62\\",
    fill: \\"#A4AABA\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M57.65 272.52s-2.122 7.47-4.518 12.396c-1.811 3.724-4.255 7.548 5.505 7.548 6.698 0 9.02-.483 7.479-6.648-1.541-6.164.268-13.296.268-13.296H57.65z\\",
    fill: \\"#CBD1D1\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M51.54 290.04s2.111 1.178 6.682 1.178c6.128 0 8.31-1.662 8.31-1.662s.605 1.122-.624 2.18c-1 .862-3.624 1.603-7.444 1.559-4.177-.049-5.876-.57-6.786-1.177-.831-.554-.692-1.593-.138-2.078\\",
    fill: \\"#2B0849\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M58.533 274.438s.034 1.529-.315 2.95c-.352 1.431-1.087 3.127-1.139 4.17-.058 1.16 4.57 1.592 5.194.035.623-1.559 1.303-6.475 1.927-7.306.622-.831-4.94-2.135-5.667.15\\",
    fill: \\"#A4AABA\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M100.885 277.015l13.306.092s1.291-54.228 1.843-64.056c.552-9.828 3.756-43.13.997-62.788l-12.48-.64-22.725.776s-.433 3.944-1.19 9.921c-.062.493-.677.838-.744 1.358-.075.582.42 1.347.318 1.956-2.35 14.003-6.343 32.926-8.697 46.425-.116.663-1.227 1.004-1.45 2.677-.04.3.21 1.516.112 1.785-6.836 18.643-10.89 47.584-14.2 61.551l14.528-.014s2.185-8.524 4.008-16.878c2.796-12.817 22.987-84.553 22.987-84.553l3-.517 1.037 46.1s-.223 1.228.334 2.008c.558.782-.556 1.117-.39 2.233l.39 1.784s-.446 7.14-.892 11.826c-.446 4.685-.092 38.954-.092 38.954\\",
    fill: \\"#7BB2F9\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M77.438 220.434c1.146.094 4.016-2.008 6.916-4.91M107.55 223.931s2.758-1.103 6.069-3.862\\",
    stroke: \\"#648BD8\\",
    strokeWidth: \\"1.051\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M108.459 220.905s2.759-1.104 6.07-3.863\\",
    stroke: \\"#648BD8\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M76.099 223.557s2.608-.587 6.47-3.346M87.33 150.82c-.27 3.088.297 8.478-4.315 9.073M104.829 149.075s.11 13.936-1.286 14.983c-2.207 1.655-2.975 1.934-2.975 1.934M101.014 149.63s.035 12.81-1.19 24.245M94.93 174.965s7.174-1.655 9.38-1.655M75.671 204.754c-.316 1.55-.64 3.067-.973 4.535 0 0-1.45 1.822-1.003 3.756.446 1.934-.943 2.034-4.96 15.273-1.686 5.559-4.464 18.49-6.313 27.447-.078.38-4.018 18.06-4.093 18.423M77.043 196.743a313.269 313.269 0 0 1-.877 4.729M83.908 151.414l-1.19 10.413s-1.091.148-.496 2.23c.111 1.34-2.66 15.692-5.153 30.267M57.58 272.94h13.238\\",
    stroke: \\"#648BD8\\",
    strokeWidth: \\"1.051\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M117.377 147.423s-16.955-3.087-35.7.199c.157 2.501-.002 4.128-.002 4.128s14.607-2.802 35.476-.31c.251-2.342.226-4.017.226-4.017\\",
    fill: \\"#192064\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M107.511 150.353l.004-4.885a.807.807 0 0 0-.774-.81c-2.428-.092-5.04-.108-7.795-.014a.814.814 0 0 0-.784.81l-.003 4.88c0 .456.371.82.827.808a140.76 140.76 0 0 1 7.688.017.81.81 0 0 0 .837-.806\\",
    fill: \\"#FFF\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M106.402 149.426l.002-3.06a.64.64 0 0 0-.616-.643 94.135 94.135 0 0 0-5.834-.009.647.647 0 0 0-.626.643l-.001 3.056c0 .36.291.648.651.64 1.78-.04 3.708-.041 5.762.012.36.009.662-.279.662-.64\\",
    fill: \\"#192064\\"
  }), /*#__PURE__*/React.createElement(\\"path\\", {
    d: \\"M101.485 273.933h12.272M102.652 269.075c.006 3.368.04 5.759.11 6.47M102.667 263.125c-.009 1.53-.015 2.98-.016 4.313M102.204 174.024l.893 44.402s.669 1.561-.224 2.677c-.892 1.116 2.455.67.893 2.231-1.562 1.562.893 1.116 0 3.347-.592 1.48-.988 20.987-1.09 34.956\\",
    stroke: \\"#648BD8\\",
    strokeWidth: \\"1.051\\",
    strokeLinecap: \\"round\\",
    strokeLinejoin: \\"round\\"
  })));
};

var IconMap = {
  success: CheckCircleFilled$1,
  error: CloseCircleFilled$1,
  info: ExclamationCircleFilled$1,
  warning: WarningFilled$1
};
var ExceptionMap = {
  '404': NoFound,
  '500': ServerError,
  '403': Unauthorized
}; // ExceptionImageMap keys

var ExceptionStatus = Object.keys(ExceptionMap);
/**
 * Render icon if ExceptionStatus includes ,render svg image else render iconNode
 *
 * @param prefixCls
 * @param {status, icon}
 */

var renderIcon = function renderIcon(prefixCls, _ref) {
  var status = _ref.status,
      icon = _ref.icon;
  var className = classNames(\\"\\".concat(prefixCls, \\"-icon\\"));
  devWarning(!(typeof icon === 'string' && icon.length > 2), 'Result', \\"\`icon\` is using ReactNode instead of string naming in v4. Please check \`\\".concat(icon, \\"\` at https://ant.design/components/icon\\"));

  if (ExceptionStatus.includes(\\"\\".concat(status))) {
    var SVGComponent = ExceptionMap[status];
    return /*#__PURE__*/React.createElement(\\"div\\", {
      className: \\"\\".concat(className, \\" \\").concat(prefixCls, \\"-image\\")
    }, /*#__PURE__*/React.createElement(SVGComponent, null));
  }

  var iconNode = /*#__PURE__*/React.createElement(IconMap[status]);
  return /*#__PURE__*/React.createElement(\\"div\\", {
    className: className
  }, icon || iconNode);
};

var renderExtra = function renderExtra(prefixCls, _ref2) {
  var extra = _ref2.extra;
  return extra && /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-extra\\")
  }, extra);
};

var Result = function Result(_ref3) {
  var customizePrefixCls = _ref3.prefixCls,
      customizeClassName = _ref3.className,
      subTitle = _ref3.subTitle,
      title = _ref3.title,
      style = _ref3.style,
      children = _ref3.children,
      _ref3$status = _ref3.status,
      status = _ref3$status === void 0 ? 'info' : _ref3$status,
      icon = _ref3.icon,
      extra = _ref3.extra;

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  var prefixCls = getPrefixCls('result', customizePrefixCls);
  var className = classNames(prefixCls, \\"\\".concat(prefixCls, \\"-\\").concat(status), customizeClassName, _defineProperty({}, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'));
  return /*#__PURE__*/React.createElement(\\"div\\", {
    className: className,
    style: style
  }, renderIcon(prefixCls, {
    status: status,
    icon: icon
  }), /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-title\\")
  }, title), subTitle && /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-subtitle\\")
  }, subTitle), renderExtra(prefixCls, {
    extra: extra
  }), children && /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-content\\")
  }, children));
};

Result.PRESENTED_IMAGE_403 = ExceptionMap['403'];
Result.PRESENTED_IMAGE_404 = ExceptionMap['404'];
Result.PRESENTED_IMAGE_500 = ExceptionMap['500'];

var SliderTooltip = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var visible = props.visible;
  var innerRef = useRef(null);
  var rafRef = useRef(null);

  function cancelKeepAlign() {
    raf.cancel(rafRef.current);
    rafRef.current = null;
  }

  function keepAlign() {
    rafRef.current = raf(function () {
      var _a;

      (_a = innerRef.current) === null || _a === void 0 ? void 0 : _a.forcePopupAlign();
      rafRef.current = null;
      keepAlign();
    });
  }

  React.useEffect(function () {
    if (visible) {
      keepAlign();
    } else {
      cancelKeepAlign();
    }

    return cancelKeepAlign;
  }, [visible]);
  return /*#__PURE__*/React.createElement(Tooltip, _extends({
    ref: composeRef(innerRef, ref)
  }, props));
});

var __rest$e = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var Slider = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction,
      getPopupContainer = _React$useContext.getPopupContainer;

  var _React$useState = React.useState({}),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      visibles = _React$useState2[0],
      setVisibles = _React$useState2[1];

  var toggleTooltipVisible = function toggleTooltipVisible(index, visible) {
    setVisibles(function (prev) {
      return _extends(_extends({}, prev), _defineProperty({}, index, visible));
    });
  };

  var getTooltipPlacement = function getTooltipPlacement(tooltipPlacement, vertical) {
    if (tooltipPlacement) {
      return tooltipPlacement;
    }

    if (!vertical) {
      return 'top';
    }

    return direction === 'rtl' ? 'left' : 'right';
  };

  var handleWithTooltip = function handleWithTooltip(_a) {
    var tooltipPrefixCls = _a.tooltipPrefixCls,
        prefixCls = _a.prefixCls,
        _b = _a.info,
        value = _b.value,
        dragging = _b.dragging,
        index = _b.index,
        restProps = __rest$e(_b, [\\"value\\", \\"dragging\\", \\"index\\"]);

    var tipFormatter = props.tipFormatter,
        tooltipVisible = props.tooltipVisible,
        tooltipPlacement = props.tooltipPlacement,
        getTooltipPopupContainer = props.getTooltipPopupContainer,
        vertical = props.vertical;
    var isTipFormatter = tipFormatter ? visibles[index] || dragging : false;
    var visible = tooltipVisible || tooltipVisible === undefined && isTipFormatter;
    return /*#__PURE__*/React.createElement(SliderTooltip, {
      prefixCls: tooltipPrefixCls,
      title: tipFormatter ? tipFormatter(value) : '',
      visible: visible,
      placement: getTooltipPlacement(tooltipPlacement, vertical),
      transitionName: \\"zoom-down\\",
      key: index,
      overlayClassName: \\"\\".concat(prefixCls, \\"-tooltip\\"),
      getPopupContainer: getTooltipPopupContainer || getPopupContainer
    }, /*#__PURE__*/React.createElement(Handle, _extends({}, restProps, {
      value: value,
      onMouseEnter: function onMouseEnter() {
        return toggleTooltipVisible(index, true);
      },
      onMouseLeave: function onMouseLeave() {
        return toggleTooltipVisible(index, false);
      }
    })));
  };

  var customizePrefixCls = props.prefixCls,
      customizeTooltipPrefixCls = props.tooltipPrefixCls,
      range = props.range,
      className = props.className,
      restProps = __rest$e(props, [\\"prefixCls\\", \\"tooltipPrefixCls\\", \\"range\\", \\"className\\"]);

  var prefixCls = getPrefixCls('slider', customizePrefixCls);
  var tooltipPrefixCls = getPrefixCls('tooltip', customizeTooltipPrefixCls);
  var cls = classNames(className, _defineProperty({}, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl')); // make reverse default on rtl direction

  if (direction === 'rtl' && !restProps.vertical) {
    restProps.reverse = !restProps.reverse;
  } // extrack draggableTrack from range={{ ... }}


  var draggableTrack;

  if (_typeof(range) === 'object') {
    draggableTrack = range.draggableTrack;
  }

  if (range) {
    return /*#__PURE__*/React.createElement(Range, _extends({}, restProps, {
      step: restProps.step,
      draggableTrack: draggableTrack,
      className: cls,
      ref: ref,
      handle: function handle(info) {
        return handleWithTooltip({
          tooltipPrefixCls: tooltipPrefixCls,
          prefixCls: prefixCls,
          info: info
        });
      },
      prefixCls: prefixCls
    }));
  }

  return /*#__PURE__*/React.createElement(RcSlider, _extends({}, restProps, {
    step: restProps.step,
    className: cls,
    ref: ref,
    handle: function handle(info) {
      return handleWithTooltip({
        tooltipPrefixCls: tooltipPrefixCls,
        prefixCls: prefixCls,
        info: info
      });
    },
    prefixCls: prefixCls
  }));
});
Slider.displayName = 'Slider';
Slider.defaultProps = {
  tipFormatter: function tipFormatter(value) {
    return typeof value === 'number' ? value.toString() : '';
  }
};

function Item(_ref) {
  var className = _ref.className,
      direction = _ref.direction,
      index = _ref.index,
      marginDirection = _ref.marginDirection,
      children = _ref.children,
      split = _ref.split,
      wrap = _ref.wrap;

  var _React$useContext = React.useContext(SpaceContext),
      horizontalSize = _React$useContext.horizontalSize,
      verticalSize = _React$useContext.verticalSize,
      latestIndex = _React$useContext.latestIndex;

  var style = {};

  if (direction === 'vertical') {
    if (index < latestIndex) {
      style = {
        marginBottom: horizontalSize / (split ? 2 : 1)
      };
    }
  } else {
    style = _extends(_extends({}, index < latestIndex && _defineProperty({}, marginDirection, horizontalSize / (split ? 2 : 1))), wrap && {
      paddingBottom: verticalSize
    });
  }

  if (children === null || children === undefined) {
    return null;
  }

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\\"div\\", {
    className: className,
    style: style
  }, children), index < latestIndex && split && /*#__PURE__*/React.createElement(\\"span\\", {
    className: \\"\\".concat(className, \\"-split\\"),
    style: style
  }, split));
}

var __rest$d = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var SpaceContext = /*#__PURE__*/React.createContext({
  latestIndex: 0,
  horizontalSize: 0,
  verticalSize: 0
});
var spaceSize = {
  small: 8,
  middle: 16,
  large: 24
};

function getNumberSize(size) {
  return typeof size === 'string' ? spaceSize[size] : size || 0;
}

var Space = function Space(props) {
  var _classNames;

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      space = _React$useContext.space,
      directionConfig = _React$useContext.direction;

  var _props$size = props.size,
      size = _props$size === void 0 ? (space === null || space === void 0 ? void 0 : space.size) || 'small' : _props$size,
      align = props.align,
      className = props.className,
      children = props.children,
      _props$direction = props.direction,
      direction = _props$direction === void 0 ? 'horizontal' : _props$direction,
      customizePrefixCls = props.prefixCls,
      split = props.split,
      style = props.style,
      _props$wrap = props.wrap,
      wrap = _props$wrap === void 0 ? false : _props$wrap,
      otherProps = __rest$d(props, [\\"size\\", \\"align\\", \\"className\\", \\"children\\", \\"direction\\", \\"prefixCls\\", \\"split\\", \\"style\\", \\"wrap\\"]);

  var _React$useMemo = React.useMemo(function () {
    return (Array.isArray(size) ? size : [size, size]).map(function (item) {
      return getNumberSize(item);
    });
  }, [size]),
      _React$useMemo2 = _slicedToArray(_React$useMemo, 2),
      horizontalSize = _React$useMemo2[0],
      verticalSize = _React$useMemo2[1];

  var childNodes = toArray$2(children, {
    keepEmpty: true
  });

  if (childNodes.length === 0) {
    return null;
  }

  var mergedAlign = align === undefined && direction === 'horizontal' ? 'center' : align;
  var prefixCls = getPrefixCls('space', customizePrefixCls);
  var cn = classNames(prefixCls, \\"\\".concat(prefixCls, \\"-\\").concat(direction), (_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-rtl\\"), directionConfig === 'rtl'), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-align-\\").concat(mergedAlign), mergedAlign), _classNames), className);
  var itemClassName = \\"\\".concat(prefixCls, \\"-item\\");
  var marginDirection = directionConfig === 'rtl' ? 'marginLeft' : 'marginRight'; // Calculate latest one

  var latestIndex = 0;
  var nodes = childNodes.map(function (child, i) {
    if (child !== null && child !== undefined) {
      latestIndex = i;
    }
    /* eslint-disable react/no-array-index-key */


    return /*#__PURE__*/React.createElement(Item, {
      className: itemClassName,
      key: \\"\\".concat(itemClassName, \\"-\\").concat(i),
      direction: direction,
      index: i,
      marginDirection: marginDirection,
      split: split,
      wrap: wrap
    }, child);
    /* eslint-enable */
  });
  return /*#__PURE__*/React.createElement(\\"div\\", _extends({
    className: cn,
    style: _extends(_extends({}, wrap && {
      flexWrap: 'wrap',
      marginBottom: -verticalSize
    }), style)
  }, otherProps), /*#__PURE__*/React.createElement(SpaceContext.Provider, {
    value: {
      horizontalSize: horizontalSize,
      verticalSize: verticalSize,
      latestIndex: latestIndex
    }
  }, nodes));
};

var Steps = function Steps(props) {
  var _classNames;

  var percent = props.percent,
      size = props.size,
      className = props.className,
      direction = props.direction,
      responsive = props.responsive;

  var _useBreakpoint = useBreakpoint(),
      xs = _useBreakpoint.xs;

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      rtlDirection = _React$useContext.direction;

  var getDirection = React.useCallback(function () {
    return responsive && xs ? 'vertical' : direction;
  }, [xs, direction]);
  var prefixCls = getPrefixCls('steps', props.prefixCls);
  var iconPrefix = getPrefixCls('', props.iconPrefix);
  var stepsClassName = classNames((_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-rtl\\"), rtlDirection === 'rtl'), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-with-progress\\"), percent !== undefined), _classNames), className);
  var icons = {
    finish: /*#__PURE__*/React.createElement(CheckOutlined$1, {
      className: \\"\\".concat(prefixCls, \\"-finish-icon\\")
    }),
    error: /*#__PURE__*/React.createElement(CloseOutlined$1, {
      className: \\"\\".concat(prefixCls, \\"-error-icon\\")
    })
  };

  var stepIconRender = function stepIconRender(_ref) {
    var node = _ref.node,
        status = _ref.status;

    if (status === 'process' && percent !== undefined) {
      // currently it's hard-coded, since we can't easily read the actually width of icon
      var progressWidth = size === 'small' ? 32 : 40;
      var iconWithProgress = /*#__PURE__*/React.createElement(\\"div\\", {
        className: \\"\\".concat(prefixCls, \\"-progress-icon\\")
      }, /*#__PURE__*/React.createElement(Progress, {
        type: \\"circle\\",
        percent: percent,
        width: progressWidth,
        strokeWidth: 4,
        format: function format() {
          return null;
        }
      }), node);
      return iconWithProgress;
    }

    return node;
  };

  return /*#__PURE__*/React.createElement(RcSteps, _extends({
    icons: icons
  }, omit(props, ['percent']), {
    direction: getDirection(),
    stepIcon: stepIconRender,
    prefixCls: prefixCls,
    iconPrefix: iconPrefix,
    className: stepsClassName
  }));
};

Steps.Step = RcSteps.Step;
Steps.defaultProps = {
  current: 0
};

var __rest$c = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var Switch = /*#__PURE__*/React.forwardRef(function (_a, ref) {
  var _classNames;

  var customizePrefixCls = _a.prefixCls,
      customizeSize = _a.size,
      loading = _a.loading,
      _a$className = _a.className,
      className = _a$className === void 0 ? '' : _a$className,
      disabled = _a.disabled,
      props = __rest$c(_a, [\\"prefixCls\\", \\"size\\", \\"loading\\", \\"className\\", \\"disabled\\"]);

  devWarning('checked' in props || !('value' in props), 'Switch', '\`value\` is not a valid prop, do you mean \`checked\`?');

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  var size = React.useContext(SizeContext$1);
  var prefixCls = getPrefixCls('switch', customizePrefixCls);
  var loadingIcon = /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-handle\\")
  }, loading && /*#__PURE__*/React.createElement(LoadingOutlined$1, {
    className: \\"\\".concat(prefixCls, \\"-loading-icon\\")
  }));
  var classes = classNames((_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-small\\"), (customizeSize || size) === 'small'), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-loading\\"), loading), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), _classNames), className);
  return /*#__PURE__*/React.createElement(Wave, {
    insertExtraNode: true
  }, /*#__PURE__*/React.createElement(RcSwitch, _extends({}, props, {
    prefixCls: prefixCls,
    className: classes,
    disabled: disabled || loading,
    ref: ref,
    loadingIcon: loadingIcon
  })));
});
Switch.__ANT_SWITCH = true;
Switch.displayName = 'Switch';

var __rest$b = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var DEFAULT_PAGE_SIZE = 10;
function getPaginationParam(pagination, mergedPagination) {
  var param = {
    current: mergedPagination.current,
    pageSize: mergedPagination.pageSize
  };
  var paginationObj = pagination && _typeof(pagination) === 'object' ? pagination : {};
  Object.keys(paginationObj).forEach(function (pageProp) {
    var value = mergedPagination[pageProp];

    if (typeof value !== 'function') {
      param[pageProp] = value;
    }
  });
  return param;
}

function extendsObject() {
  var result = {};

  for (var _len = arguments.length, list = new Array(_len), _key = 0; _key < _len; _key++) {
    list[_key] = arguments[_key];
  }

  list.forEach(function (obj) {
    if (obj) {
      Object.keys(obj).forEach(function (key) {
        var val = obj[key];

        if (val !== undefined) {
          result[key] = val;
        }
      });
    }
  });
  return result;
}

function usePagination(total, pagination, onChange) {
  var _a = pagination && _typeof(pagination) === 'object' ? pagination : {},
      _a$total = _a.total,
      paginationTotal = _a$total === void 0 ? 0 : _a$total,
      paginationObj = __rest$b(_a, [\\"total\\"]);

  var _useState = useState(function () {
    return {
      current: 'defaultCurrent' in paginationObj ? paginationObj.defaultCurrent : 1,
      pageSize: 'defaultPageSize' in paginationObj ? paginationObj.defaultPageSize : DEFAULT_PAGE_SIZE
    };
  }),
      _useState2 = _slicedToArray(_useState, 2),
      innerPagination = _useState2[0],
      setInnerPagination = _useState2[1]; // ============ Basic Pagination Config ============


  var mergedPagination = extendsObject(innerPagination, paginationObj, {
    total: paginationTotal > 0 ? paginationTotal : total
  }); // Reset \`current\` if data length or pageSize changed

  var maxPage = Math.ceil((paginationTotal || total) / mergedPagination.pageSize);

  if (mergedPagination.current > maxPage) {
    mergedPagination.current = maxPage;
  }

  var refreshPagination = function refreshPagination() {
    var current = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    var pageSize = arguments.length > 1 ? arguments[1] : undefined;
    setInnerPagination({
      current: current,
      pageSize: pageSize || mergedPagination.pageSize
    });
  };

  var onInternalChange = function onInternalChange(current, pageSize) {
    var _a;

    if (pagination) {
      (_a = pagination.onChange) === null || _a === void 0 ? void 0 : _a.call(pagination, current, pageSize);
    }

    refreshPagination(current, pageSize);
    onChange(current, pageSize || (mergedPagination === null || mergedPagination === void 0 ? void 0 : mergedPagination.pageSize));
  };

  if (pagination === false) {
    return [{}, function () {}];
  }

  return [_extends(_extends({}, mergedPagination), {
    onChange: onInternalChange
  }), refreshPagination];
}

function useLazyKVMap(data, childrenColumnName, getRowKey) {
  var mapCacheRef = React.useRef({});

  function getRecordByKey(key) {
    if (!mapCacheRef.current || mapCacheRef.current.data !== data || mapCacheRef.current.childrenColumnName !== childrenColumnName || mapCacheRef.current.getRowKey !== getRowKey) {
      /* eslint-disable no-inner-declarations */
      var dig = function dig(records) {
        records.forEach(function (record, index) {
          var rowKey = getRowKey(record, index);
          kvMap.set(rowKey, record);

          if (record && _typeof(record) === 'object' && childrenColumnName in record) {
            dig(record[childrenColumnName] || []);
          }
        });
      };
      /* eslint-enable */


      var kvMap = new Map();
      dig(data);
      mapCacheRef.current = {
        data: data,
        childrenColumnName: childrenColumnName,
        kvMap: kvMap,
        getRowKey: getRowKey
      };
    }

    return mapCacheRef.current.kvMap.get(key);
  }

  return [getRecordByKey];
}

var SELECTION_ALL = 'SELECT_ALL';
var SELECTION_INVERT = 'SELECT_INVERT';
var SELECTION_NONE = 'SELECT_NONE';

function getFixedType(column) {
  return column && column.fixed;
}

function flattenData(data, childrenColumnName) {
  var list = [];
  (data || []).forEach(function (record) {
    list.push(record);

    if (record && _typeof(record) === 'object' && childrenColumnName in record) {
      list = [].concat(_toConsumableArray(list), _toConsumableArray(flattenData(record[childrenColumnName], childrenColumnName)));
    }
  });
  return list;
}

function useSelection(rowSelection, config) {
  var _ref = rowSelection || {},
      preserveSelectedRowKeys = _ref.preserveSelectedRowKeys,
      selectedRowKeys = _ref.selectedRowKeys,
      getCheckboxProps = _ref.getCheckboxProps,
      onSelectionChange = _ref.onChange,
      onSelect = _ref.onSelect,
      onSelectAll = _ref.onSelectAll,
      onSelectInvert = _ref.onSelectInvert,
      onSelectNone = _ref.onSelectNone,
      onSelectMultiple = _ref.onSelectMultiple,
      selectionColWidth = _ref.columnWidth,
      selectionType = _ref.type,
      selections = _ref.selections,
      fixed = _ref.fixed,
      customizeRenderCell = _ref.renderCell,
      hideSelectAll = _ref.hideSelectAll,
      _ref$checkStrictly = _ref.checkStrictly,
      checkStrictly = _ref$checkStrictly === void 0 ? true : _ref$checkStrictly;

  var prefixCls = config.prefixCls,
      data = config.data,
      pageData = config.pageData,
      getRecordByKey = config.getRecordByKey,
      getRowKey = config.getRowKey,
      expandType = config.expandType,
      childrenColumnName = config.childrenColumnName,
      tableLocale = config.locale,
      expandIconColumnIndex = config.expandIconColumnIndex,
      getPopupContainer = config.getPopupContainer; // ======================== Caches ========================

  var preserveRecordsRef = React.useRef(new Map()); // ========================= Keys =========================

  var _useMergedState = useMergedState(selectedRowKeys || [], {
    value: selectedRowKeys
  }),
      _useMergedState2 = _slicedToArray(_useMergedState, 2),
      mergedSelectedKeys = _useMergedState2[0],
      setMergedSelectedKeys = _useMergedState2[1];

  var _useMemo = useMemo$1(function () {
    return checkStrictly ? {
      keyEntities: null
    } : convertDataToEntities(data, {
      externalGetKey: getRowKey,
      childrenPropName: childrenColumnName
    });
  }, [data, getRowKey, checkStrictly, childrenColumnName]),
      keyEntities = _useMemo.keyEntities; // Get flatten data


  var flattedData = useMemo$1(function () {
    return flattenData(pageData, childrenColumnName);
  }, [pageData, childrenColumnName]); // Get all checkbox props

  var checkboxPropsMap = useMemo$1(function () {
    var map = new Map();
    flattedData.forEach(function (record, index) {
      var key = getRowKey(record, index);
      var checkboxProps = (getCheckboxProps ? getCheckboxProps(record) : null) || {};
      map.set(key, checkboxProps);

      if (\\"production\\" !== 'production' && ('checked' in checkboxProps || 'defaultChecked' in checkboxProps)) {
        devWarning(false, 'Table', 'Do not set \`checked\` or \`defaultChecked\` in \`getCheckboxProps\`. Please use \`selectedRowKeys\` instead.');
      }
    });
    return map;
  }, [flattedData, getRowKey, getCheckboxProps]);
  var isCheckboxDisabled = useCallback(function (r) {
    var _a;

    return !!((_a = checkboxPropsMap.get(getRowKey(r))) === null || _a === void 0 ? void 0 : _a.disabled);
  }, [checkboxPropsMap, getRowKey]);

  var _useMemo2 = useMemo$1(function () {
    if (checkStrictly) {
      return [mergedSelectedKeys || [], []];
    }

    var _conductCheck = conductCheck(mergedSelectedKeys, true, keyEntities, isCheckboxDisabled),
        checkedKeys = _conductCheck.checkedKeys,
        halfCheckedKeys = _conductCheck.halfCheckedKeys;

    return [checkedKeys || [], halfCheckedKeys];
  }, [mergedSelectedKeys, checkStrictly, keyEntities, isCheckboxDisabled]),
      _useMemo3 = _slicedToArray(_useMemo2, 2),
      derivedSelectedKeys = _useMemo3[0],
      derivedHalfSelectedKeys = _useMemo3[1];

  var derivedSelectedKeySet = useMemo$1(function () {
    var keys = selectionType === 'radio' ? derivedSelectedKeys.slice(0, 1) : derivedSelectedKeys;
    return new Set(keys);
  }, [derivedSelectedKeys, selectionType]);
  var derivedHalfSelectedKeySet = useMemo$1(function () {
    return selectionType === 'radio' ? new Set() : new Set(derivedHalfSelectedKeys);
  }, [derivedHalfSelectedKeys, selectionType]); // Save last selected key to enable range selection

  var _useState = useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      lastSelectedKey = _useState2[0],
      setLastSelectedKey = _useState2[1]; // Reset if rowSelection reset


  React.useEffect(function () {
    if (!rowSelection) {
      setMergedSelectedKeys([]);
    }
  }, [!!rowSelection]);
  var setSelectedKeys = useCallback(function (keys) {
    var availableKeys;
    var records;

    if (preserveSelectedRowKeys) {
      // Keep key if mark as preserveSelectedRowKeys
      var newCache = new Map();
      availableKeys = keys;
      records = keys.map(function (key) {
        var record = getRecordByKey(key);

        if (!record && preserveRecordsRef.current.has(key)) {
          record = preserveRecordsRef.current.get(key);
        }

        newCache.set(key, record);
        return record;
      }); // Refresh to new cache

      preserveRecordsRef.current = newCache;
    } else {
      // Filter key which not exist in the \`dataSource\`
      availableKeys = [];
      records = [];
      keys.forEach(function (key) {
        var record = getRecordByKey(key);

        if (record !== undefined) {
          availableKeys.push(key);
          records.push(record);
        }
      });
    }

    setMergedSelectedKeys(availableKeys);

    if (onSelectionChange) {
      onSelectionChange(availableKeys, records);
    }
  }, [setMergedSelectedKeys, getRecordByKey, onSelectionChange, preserveSelectedRowKeys]); // ====================== Selections ======================
  // Trigger single \`onSelect\` event

  var triggerSingleSelection = useCallback(function (key, selected, keys, event) {
    if (onSelect) {
      var rows = keys.map(function (k) {
        return getRecordByKey(k);
      });
      onSelect(getRecordByKey(key), selected, rows, event);
    }

    setSelectedKeys(keys);
  }, [onSelect, getRecordByKey, setSelectedKeys]);
  var mergedSelections = useMemo$1(function () {
    if (!selections || hideSelectAll) {
      return null;
    }

    var selectionList = selections === true ? [SELECTION_ALL, SELECTION_INVERT, SELECTION_NONE] : selections;
    return selectionList.map(function (selection) {
      if (selection === SELECTION_ALL) {
        return {
          key: 'all',
          text: tableLocale.selectionAll,
          onSelect: function onSelect() {
            setSelectedKeys(data.map(function (record, index) {
              return getRowKey(record, index);
            }));
          }
        };
      }

      if (selection === SELECTION_INVERT) {
        return {
          key: 'invert',
          text: tableLocale.selectInvert,
          onSelect: function onSelect() {
            var keySet = new Set(derivedSelectedKeySet);
            pageData.forEach(function (record, index) {
              var key = getRowKey(record, index);

              if (keySet.has(key)) {
                keySet[\\"delete\\"](key);
              } else {
                keySet.add(key);
              }
            });
            var keys = Array.from(keySet);

            if (onSelectInvert) {
              devWarning(false, 'Table', '\`onSelectInvert\` will be removed in future. Please use \`onChange\` instead.');
              onSelectInvert(keys);
            }

            setSelectedKeys(keys);
          }
        };
      }

      if (selection === SELECTION_NONE) {
        return {
          key: 'none',
          text: tableLocale.selectNone,
          onSelect: function onSelect() {
            if (onSelectNone) {
              onSelectNone();
            }

            setSelectedKeys([]);
          }
        };
      }

      return selection;
    });
  }, [selections, derivedSelectedKeySet, pageData, getRowKey, onSelectInvert, setSelectedKeys]); // ======================= Columns ========================

  var transformColumns = useCallback(function (columns) {
    if (!rowSelection) {
      return columns;
    } // Support selection


    var keySet = new Set(derivedSelectedKeySet); // Record key only need check with enabled

    var recordKeys = flattedData.map(getRowKey).filter(function (key) {
      return !checkboxPropsMap.get(key).disabled;
    });
    var checkedCurrentAll = recordKeys.every(function (key) {
      return keySet.has(key);
    });
    var checkedCurrentSome = recordKeys.some(function (key) {
      return keySet.has(key);
    });

    var onSelectAllChange = function onSelectAllChange() {
      var changeKeys = [];

      if (checkedCurrentAll) {
        recordKeys.forEach(function (key) {
          keySet[\\"delete\\"](key);
          changeKeys.push(key);
        });
      } else {
        recordKeys.forEach(function (key) {
          if (!keySet.has(key)) {
            keySet.add(key);
            changeKeys.push(key);
          }
        });
      }

      var keys = Array.from(keySet);

      if (onSelectAll) {
        onSelectAll(!checkedCurrentAll, keys.map(function (k) {
          return getRecordByKey(k);
        }), changeKeys.map(function (k) {
          return getRecordByKey(k);
        }));
      }

      setSelectedKeys(keys);
    }; // ===================== Render =====================
    // Title Cell


    var title;

    if (selectionType !== 'radio') {
      var customizeSelections;

      if (mergedSelections) {
        var menu = /*#__PURE__*/React.createElement(Menu, {
          getPopupContainer: getPopupContainer
        }, mergedSelections.map(function (selection, index) {
          var key = selection.key,
              text = selection.text,
              onSelectionClick = selection.onSelect;
          return /*#__PURE__*/React.createElement(Menu.Item, {
            key: key || index,
            onClick: function onClick() {
              if (onSelectionClick) {
                onSelectionClick(recordKeys);
              }
            }
          }, text);
        }));
        customizeSelections = /*#__PURE__*/React.createElement(\\"div\\", {
          className: \\"\\".concat(prefixCls, \\"-selection-extra\\")
        }, /*#__PURE__*/React.createElement(Dropdown, {
          overlay: menu,
          getPopupContainer: getPopupContainer
        }, /*#__PURE__*/React.createElement(\\"span\\", null, /*#__PURE__*/React.createElement(DownOutlined$1, null))));
      }

      var allDisabled = flattedData.every(function (record, index) {
        var key = getRowKey(record, index);
        var checkboxProps = checkboxPropsMap.get(key) || {};
        return checkboxProps.disabled;
      });
      title = !hideSelectAll && /*#__PURE__*/React.createElement(\\"div\\", {
        className: \\"\\".concat(prefixCls, \\"-selection\\")
      }, /*#__PURE__*/React.createElement(Checkbox, {
        checked: !allDisabled && !!flattedData.length && checkedCurrentAll,
        indeterminate: !checkedCurrentAll && checkedCurrentSome,
        onChange: onSelectAllChange,
        disabled: flattedData.length === 0 || allDisabled,
        skipGroup: true
      }), customizeSelections);
    } // Body Cell


    var renderCell;

    if (selectionType === 'radio') {
      renderCell = function renderCell(_, record, index) {
        var key = getRowKey(record, index);
        var checked = keySet.has(key);
        return {
          node: /*#__PURE__*/React.createElement(Radio, _extends({}, checkboxPropsMap.get(key), {
            checked: checked,
            onClick: function onClick(e) {
              return e.stopPropagation();
            },
            onChange: function onChange(event) {
              if (!keySet.has(key)) {
                triggerSingleSelection(key, true, [key], event.nativeEvent);
              }
            }
          })),
          checked: checked
        };
      };
    } else {
      renderCell = function renderCell(_, record, index) {
        var _a;

        var key = getRowKey(record, index);
        var checked = keySet.has(key);
        var indeterminate = derivedHalfSelectedKeySet.has(key);
        var checkboxProps = checkboxPropsMap.get(key);
        var mergedIndeterminate;

        if (expandType === 'nest') {
          mergedIndeterminate = indeterminate;
          devWarning(!(typeof (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) === 'boolean'), 'Table', 'set \`indeterminate\` using \`rowSelection.getCheckboxProps\` is not allowed with tree structured dataSource.');
        } else {
          mergedIndeterminate = (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== null && _a !== void 0 ? _a : indeterminate;
        } // Record checked


        return {
          node: /*#__PURE__*/React.createElement(Checkbox, _extends({}, checkboxProps, {
            indeterminate: mergedIndeterminate,
            checked: checked,
            skipGroup: true,
            onClick: function onClick(e) {
              return e.stopPropagation();
            },
            onChange: function onChange(_ref2) {
              var nativeEvent = _ref2.nativeEvent;
              var shiftKey = nativeEvent.shiftKey;
              var startIndex = -1;
              var endIndex = -1; // Get range of this

              if (shiftKey && checkStrictly) {
                var pointKeys = new Set([lastSelectedKey, key]);
                recordKeys.some(function (recordKey, recordIndex) {
                  if (pointKeys.has(recordKey)) {
                    if (startIndex === -1) {
                      startIndex = recordIndex;
                    } else {
                      endIndex = recordIndex;
                      return true;
                    }
                  }

                  return false;
                });
              }

              if (endIndex !== -1 && startIndex !== endIndex && checkStrictly) {
                // Batch update selections
                var rangeKeys = recordKeys.slice(startIndex, endIndex + 1);
                var changedKeys = [];

                if (checked) {
                  rangeKeys.forEach(function (recordKey) {
                    if (keySet.has(recordKey)) {
                      changedKeys.push(recordKey);
                      keySet[\\"delete\\"](recordKey);
                    }
                  });
                } else {
                  rangeKeys.forEach(function (recordKey) {
                    if (!keySet.has(recordKey)) {
                      changedKeys.push(recordKey);
                      keySet.add(recordKey);
                    }
                  });
                }

                var keys = Array.from(keySet);

                if (onSelectMultiple) {
                  onSelectMultiple(!checked, keys.map(function (recordKey) {
                    return getRecordByKey(recordKey);
                  }), changedKeys.map(function (recordKey) {
                    return getRecordByKey(recordKey);
                  }));
                }

                setSelectedKeys(keys);
              } else {
                // Single record selected
                var originCheckedKeys = derivedSelectedKeys;

                if (checkStrictly) {
                  var checkedKeys = checked ? arrDel(originCheckedKeys, key) : arrAdd(originCheckedKeys, key);
                  triggerSingleSelection(key, !checked, checkedKeys, nativeEvent);
                } else {
                  // Always fill first
                  var result = conductCheck([].concat(_toConsumableArray(originCheckedKeys), [key]), true, keyEntities, isCheckboxDisabled);
                  var _checkedKeys = result.checkedKeys,
                      halfCheckedKeys = result.halfCheckedKeys;
                  var nextCheckedKeys = _checkedKeys; // If remove, we do it again to correction

                  if (checked) {
                    var tempKeySet = new Set(_checkedKeys);
                    tempKeySet[\\"delete\\"](key);
                    nextCheckedKeys = conductCheck(Array.from(tempKeySet), {
                      checked: false,
                      halfCheckedKeys: halfCheckedKeys
                    }, keyEntities, isCheckboxDisabled).checkedKeys;
                  }

                  triggerSingleSelection(key, !checked, nextCheckedKeys, nativeEvent);
                }
              }

              setLastSelectedKey(key);
            }
          })),
          checked: checked
        };
      };
    }

    var renderSelectionCell = function renderSelectionCell(_, record, index) {
      var _renderCell = renderCell(_, record, index),
          node = _renderCell.node,
          checked = _renderCell.checked;

      if (customizeRenderCell) {
        return customizeRenderCell(checked, record, index, node);
      }

      return node;
    }; // Columns


    var selectionColumn = _defineProperty({
      width: selectionColWidth,
      className: \\"\\".concat(prefixCls, \\"-selection-column\\"),
      title: rowSelection.columnTitle || title,
      render: renderSelectionCell
    }, INTERNAL_COL_DEFINE, {
      className: \\"\\".concat(prefixCls, \\"-selection-col\\")
    });

    if (expandType === 'row' && columns.length && !expandIconColumnIndex) {
      var _columns = _toArray(columns),
          expandColumn = _columns[0],
          restColumns = _columns.slice(1);

      var selectionFixed = fixed || getFixedType(restColumns[0]);

      if (selectionFixed) {
        expandColumn.fixed = selectionFixed;
      }

      return [expandColumn, _extends(_extends({}, selectionColumn), {
        fixed: selectionFixed
      })].concat(_toConsumableArray(restColumns));
    }

    return [_extends(_extends({}, selectionColumn), {
      fixed: fixed || getFixedType(columns[0])
    })].concat(_toConsumableArray(columns));
  }, [getRowKey, flattedData, rowSelection, derivedSelectedKeys, derivedSelectedKeySet, derivedHalfSelectedKeySet, selectionColWidth, mergedSelections, expandType, lastSelectedKey, checkboxPropsMap, onSelectMultiple, triggerSingleSelection, isCheckboxDisabled]);
  return [transformColumns, derivedSelectedKeySet];
}

// This icon file is generated automatically.
var CaretDownOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"0 0 1024 1024\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M840.4 300H183.6c-19.7 0-30.7 20.8-18.5 35l328.4 380.8c9.4 10.9 27.5 10.9 37 0L858.9 335c12.2-14.2 1.2-35-18.5-35z\\" } }] }, \\"name\\": \\"caret-down\\", \\"theme\\": \\"outlined\\" };

var CaretDownOutlined = function CaretDownOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: CaretDownOutlined$2
  }));
};

CaretDownOutlined.displayName = 'CaretDownOutlined';
var CaretDownOutlined$1 = /*#__PURE__*/React.forwardRef(CaretDownOutlined);

// This icon file is generated automatically.
var CaretUpOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"0 0 1024 1024\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M858.9 689L530.5 308.2c-9.4-10.9-27.5-10.9-37 0L165.1 689c-12.2 14.2-1.2 35 18.5 35h656.8c19.7 0 30.7-20.8 18.5-35z\\" } }] }, \\"name\\": \\"caret-up\\", \\"theme\\": \\"outlined\\" };

var CaretUpOutlined = function CaretUpOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: CaretUpOutlined$2
  }));
};

CaretUpOutlined.displayName = 'CaretUpOutlined';
var CaretUpOutlined$1 = /*#__PURE__*/React.forwardRef(CaretUpOutlined);

function getColumnKey(column, defaultKey) {
  if ('key' in column && column.key !== undefined && column.key !== null) {
    return column.key;
  }

  if (column.dataIndex) {
    return Array.isArray(column.dataIndex) ? column.dataIndex.join('.') : column.dataIndex;
  }

  return defaultKey;
}
function getColumnPos(index, pos) {
  return pos ? \\"\\".concat(pos, \\"-\\").concat(index) : \\"\\".concat(index);
}
function renderColumnTitle(title, props) {
  if (typeof title === 'function') {
    return title(props);
  }

  return title;
}

var ASCEND = 'ascend';
var DESCEND = 'descend';

function getMultiplePriority(column) {
  if (_typeof(column.sorter) === 'object' && typeof column.sorter.multiple === 'number') {
    return column.sorter.multiple;
  }

  return false;
}

function getSortFunction(sorter) {
  if (typeof sorter === 'function') {
    return sorter;
  }

  if (sorter && _typeof(sorter) === 'object' && sorter.compare) {
    return sorter.compare;
  }

  return false;
}

function nextSortDirection(sortDirections, current) {
  if (!current) {
    return sortDirections[0];
  }

  return sortDirections[sortDirections.indexOf(current) + 1];
}

function collectSortStates(columns, init, pos) {
  var sortStates = [];

  function pushState(column, columnPos) {
    sortStates.push({
      column: column,
      key: getColumnKey(column, columnPos),
      multiplePriority: getMultiplePriority(column),
      sortOrder: column.sortOrder
    });
  }

  (columns || []).forEach(function (column, index) {
    var columnPos = getColumnPos(index, pos);

    if (column.children) {
      if ('sortOrder' in column) {
        // Controlled
        pushState(column, columnPos);
      }

      sortStates = [].concat(_toConsumableArray(sortStates), _toConsumableArray(collectSortStates(column.children, init, columnPos)));
    } else if (column.sorter) {
      if ('sortOrder' in column) {
        // Controlled
        pushState(column, columnPos);
      } else if (init && column.defaultSortOrder) {
        // Default sorter
        sortStates.push({
          column: column,
          key: getColumnKey(column, columnPos),
          multiplePriority: getMultiplePriority(column),
          sortOrder: column.defaultSortOrder
        });
      }
    }
  });
  return sortStates;
}

function injectSorter(prefixCls, columns, sorterSates, triggerSorter, defaultSortDirections, tableLocale, tableShowSorterTooltip, pos) {
  return (columns || []).map(function (column, index) {
    var columnPos = getColumnPos(index, pos);
    var newColumn = column;

    if (newColumn.sorter) {
      var sortDirections = newColumn.sortDirections || defaultSortDirections;
      var showSorterTooltip = newColumn.showSorterTooltip === undefined ? tableShowSorterTooltip : newColumn.showSorterTooltip;
      var columnKey = getColumnKey(newColumn, columnPos);
      var sorterState = sorterSates.find(function (_ref) {
        var key = _ref.key;
        return key === columnKey;
      });
      var sorterOrder = sorterState ? sorterState.sortOrder : null;
      var nextSortOrder = nextSortDirection(sortDirections, sorterOrder);
      var upNode = sortDirections.includes(ASCEND) && /*#__PURE__*/React.createElement(CaretUpOutlined$1, {
        className: classNames(\\"\\".concat(prefixCls, \\"-column-sorter-up\\"), {
          active: sorterOrder === ASCEND
        })
      });
      var downNode = sortDirections.includes(DESCEND) && /*#__PURE__*/React.createElement(CaretDownOutlined$1, {
        className: classNames(\\"\\".concat(prefixCls, \\"-column-sorter-down\\"), {
          active: sorterOrder === DESCEND
        })
      });

      var _ref2 = tableLocale || {},
          cancelSort = _ref2.cancelSort,
          triggerAsc = _ref2.triggerAsc,
          triggerDesc = _ref2.triggerDesc;

      var sortTip = cancelSort;

      if (nextSortOrder === DESCEND) {
        sortTip = triggerDesc;
      } else if (nextSortOrder === ASCEND) {
        sortTip = triggerAsc;
      }

      var tooltipProps = _typeof(showSorterTooltip) === 'object' ? showSorterTooltip : {
        title: sortTip
      };
      newColumn = _extends(_extends({}, newColumn), {
        className: classNames(newColumn.className, _defineProperty({}, \\"\\".concat(prefixCls, \\"-column-sort\\"), sorterOrder)),
        title: function title(renderProps) {
          var renderSortTitle = /*#__PURE__*/React.createElement(\\"div\\", {
            className: \\"\\".concat(prefixCls, \\"-column-sorters\\")
          }, /*#__PURE__*/React.createElement(\\"span\\", null, renderColumnTitle(column.title, renderProps)), /*#__PURE__*/React.createElement(\\"span\\", {
            className: classNames(\\"\\".concat(prefixCls, \\"-column-sorter\\"), _defineProperty({}, \\"\\".concat(prefixCls, \\"-column-sorter-full\\"), upNode && downNode))
          }, /*#__PURE__*/React.createElement(\\"span\\", {
            className: \\"\\".concat(prefixCls, \\"-column-sorter-inner\\")
          }, upNode, downNode)));
          return showSorterTooltip ? /*#__PURE__*/React.createElement(Tooltip, tooltipProps, /*#__PURE__*/React.createElement(\\"div\\", {
            className: \\"\\".concat(prefixCls, \\"-column-sorters-with-tooltip\\")
          }, renderSortTitle)) : renderSortTitle;
        },
        onHeaderCell: function onHeaderCell(col) {
          var cell = column.onHeaderCell && column.onHeaderCell(col) || {};
          var originOnClick = cell.onClick;

          cell.onClick = function (event) {
            triggerSorter({
              column: column,
              key: columnKey,
              sortOrder: nextSortOrder,
              multiplePriority: getMultiplePriority(column)
            });

            if (originOnClick) {
              originOnClick(event);
            }
          };

          cell.className = classNames(cell.className, \\"\\".concat(prefixCls, \\"-column-has-sorters\\"));
          return cell;
        }
      });
    }

    if ('children' in newColumn) {
      newColumn = _extends(_extends({}, newColumn), {
        children: injectSorter(prefixCls, newColumn.children, sorterSates, triggerSorter, defaultSortDirections, tableLocale, tableShowSorterTooltip, columnPos)
      });
    }

    return newColumn;
  });
}

function stateToInfo(sorterStates) {
  var column = sorterStates.column,
      sortOrder = sorterStates.sortOrder;
  return {
    column: column,
    order: sortOrder,
    field: column.dataIndex,
    columnKey: column.key
  };
}

function generateSorterInfo(sorterStates) {
  var list = sorterStates.filter(function (_ref3) {
    var sortOrder = _ref3.sortOrder;
    return sortOrder;
  }).map(stateToInfo); // =========== Legacy compatible support ===========
  // https://github.com/ant-design/ant-design/pull/19226

  if (list.length === 0 && sorterStates.length) {
    return _extends(_extends({}, stateToInfo(sorterStates[sorterStates.length - 1])), {
      column: undefined
    });
  }

  if (list.length <= 1) {
    return list[0] || {};
  }

  return list;
}

function getSortData(data, sortStates, childrenColumnName) {
  var innerSorterStates = sortStates.slice().sort(function (a, b) {
    return b.multiplePriority - a.multiplePriority;
  });
  var cloneData = data.slice();
  var runningSorters = innerSorterStates.filter(function (_ref4) {
    var sorter = _ref4.column.sorter,
        sortOrder = _ref4.sortOrder;
    return getSortFunction(sorter) && sortOrder;
  }); // Skip if no sorter needed

  if (!runningSorters.length) {
    return cloneData;
  }

  return cloneData.sort(function (record1, record2) {
    for (var i = 0; i < runningSorters.length; i += 1) {
      var sorterState = runningSorters[i];
      var sorter = sorterState.column.sorter,
          sortOrder = sorterState.sortOrder;
      var compareFn = getSortFunction(sorter);

      if (compareFn && sortOrder) {
        var compareResult = compareFn(record1, record2, sortOrder);

        if (compareResult !== 0) {
          return sortOrder === ASCEND ? compareResult : -compareResult;
        }
      }
    }

    return 0;
  }).map(function (record) {
    var subRecords = record[childrenColumnName];

    if (subRecords) {
      return _extends(_extends({}, record), _defineProperty({}, childrenColumnName, getSortData(subRecords, sortStates, childrenColumnName)));
    }

    return record;
  });
}
function useFilterSorter(_ref5) {
  var prefixCls = _ref5.prefixCls,
      mergedColumns = _ref5.mergedColumns,
      onSorterChange = _ref5.onSorterChange,
      sortDirections = _ref5.sortDirections,
      tableLocale = _ref5.tableLocale,
      showSorterTooltip = _ref5.showSorterTooltip;

  var _React$useState = React.useState(collectSortStates(mergedColumns, true)),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      sortStates = _React$useState2[0],
      setSortStates = _React$useState2[1];

  var mergedSorterStates = React.useMemo(function () {
    var validate = true;
    var collectedStates = collectSortStates(mergedColumns, false); // Return if not controlled

    if (!collectedStates.length) {
      return sortStates;
    }

    var validateStates = [];

    function patchStates(state) {
      if (validate) {
        validateStates.push(state);
      } else {
        validateStates.push(_extends(_extends({}, state), {
          sortOrder: null
        }));
      }
    }

    var multipleMode = null;
    collectedStates.forEach(function (state) {
      if (multipleMode === null) {
        patchStates(state);

        if (state.sortOrder) {
          if (state.multiplePriority === false) {
            validate = false;
          } else {
            multipleMode = true;
          }
        }
      } else if (multipleMode && state.multiplePriority !== false) {
        patchStates(state);
      } else {
        validate = false;
        patchStates(state);
      }
    });
    return validateStates;
  }, [mergedColumns, sortStates]); // Get render columns title required props

  var columnTitleSorterProps = React.useMemo(function () {
    var sortColumns = mergedSorterStates.map(function (_ref6) {
      var column = _ref6.column,
          sortOrder = _ref6.sortOrder;
      return {
        column: column,
        order: sortOrder
      };
    });
    return {
      sortColumns: sortColumns,
      // Legacy
      sortColumn: sortColumns[0] && sortColumns[0].column,
      sortOrder: sortColumns[0] && sortColumns[0].order
    };
  }, [mergedSorterStates]);

  function triggerSorter(sortState) {
    var newSorterStates;

    if (sortState.multiplePriority === false || !mergedSorterStates.length || mergedSorterStates[0].multiplePriority === false) {
      newSorterStates = [sortState];
    } else {
      newSorterStates = [].concat(_toConsumableArray(mergedSorterStates.filter(function (_ref7) {
        var key = _ref7.key;
        return key !== sortState.key;
      })), [sortState]);
    }

    setSortStates(newSorterStates);
    onSorterChange(generateSorterInfo(newSorterStates), newSorterStates);
  }

  var transformColumns = function transformColumns(innerColumns) {
    return injectSorter(prefixCls, innerColumns, mergedSorterStates, triggerSorter, sortDirections, tableLocale, showSorterTooltip);
  };

  var getSorters = function getSorters() {
    return generateSorterInfo(mergedSorterStates);
  };

  return [transformColumns, mergedSorterStates, columnTitleSorterProps, getSorters];
}

// This icon file is generated automatically.
var FilterFilled$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M349 838c0 17.7 14.2 32 31.8 32h262.4c17.6 0 31.8-14.3 31.8-32V642H349v196zm531.1-684H143.9c-24.5 0-39.8 26.7-27.5 48l221.3 376h348.8l221.3-376c12.1-21.3-3.2-48-27.7-48z\\" } }] }, \\"name\\": \\"filter\\", \\"theme\\": \\"filled\\" };

var FilterFilled = function FilterFilled(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: FilterFilled$2
  }));
};

FilterFilled.displayName = 'FilterFilled';
var FilterFilled$1 = /*#__PURE__*/React.forwardRef(FilterFilled);

var FilterDropdownMenuWrapper = function FilterDropdownMenuWrapper(props) {
  return /*#__PURE__*/React.createElement(\\"div\\", {
    className: props.className,
    onClick: function onClick(e) {
      return e.stopPropagation();
    }
  }, props.children);
};

function useSyncState(initialValue) {
  var ref = React.useRef(initialValue);
  var forceUpdate = useForceUpdate();
  return [function () {
    return ref.current;
  }, function (newValue) {
    ref.current = newValue; // re-render

    forceUpdate();
  }];
}

var SubMenu = Menu.SubMenu,
    MenuItem = Menu.Item;

function hasSubMenu(filters) {
  return filters.some(function (_ref) {
    var children = _ref.children;
    return children;
  });
}

function renderFilterItems(_ref2) {
  var filters = _ref2.filters,
      prefixCls = _ref2.prefixCls,
      filteredKeys = _ref2.filteredKeys,
      filterMultiple = _ref2.filterMultiple,
      locale = _ref2.locale;

  if (filters.length === 0) {
    // wrapped with <div /> to avoid react warning
    // https://github.com/ant-design/ant-design/issues/25979
    return /*#__PURE__*/React.createElement(\\"div\\", {
      style: {
        margin: '16px 0'
      }
    }, /*#__PURE__*/React.createElement(Empty, {
      image: Empty.PRESENTED_IMAGE_SIMPLE,
      description: locale.filterEmptyText,
      imageStyle: {
        height: 24
      }
    }));
  }

  return filters.map(function (filter, index) {
    var key = String(filter.value);

    if (filter.children) {
      return /*#__PURE__*/React.createElement(SubMenu, {
        key: key || index,
        title: filter.text,
        popupClassName: \\"\\".concat(prefixCls, \\"-dropdown-submenu\\")
      }, renderFilterItems({
        filters: filter.children,
        prefixCls: prefixCls,
        filteredKeys: filteredKeys,
        filterMultiple: filterMultiple,
        locale: locale
      }));
    }

    var Component = filterMultiple ? Checkbox : Radio;
    return /*#__PURE__*/React.createElement(MenuItem, {
      key: filter.value !== undefined ? key : index
    }, /*#__PURE__*/React.createElement(Component, {
      checked: filteredKeys.includes(key)
    }), /*#__PURE__*/React.createElement(\\"span\\", null, filter.text));
  });
}

function FilterDropdown(props) {
  var _a;

  var prefixCls = props.prefixCls,
      column = props.column,
      dropdownPrefixCls = props.dropdownPrefixCls,
      columnKey = props.columnKey,
      filterMultiple = props.filterMultiple,
      filterState = props.filterState,
      triggerFilter = props.triggerFilter,
      locale = props.locale,
      children = props.children,
      getPopupContainer = props.getPopupContainer;
  var filterDropdownVisible = column.filterDropdownVisible,
      onFilterDropdownVisibleChange = column.onFilterDropdownVisibleChange;

  var _React$useState = React.useState(false),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      visible = _React$useState2[0],
      setVisible = _React$useState2[1];

  var filtered = !!(filterState && (((_a = filterState.filteredKeys) === null || _a === void 0 ? void 0 : _a.length) || filterState.forceFiltered));

  var triggerVisible = function triggerVisible(newVisible) {
    setVisible(newVisible);

    if (onFilterDropdownVisibleChange) {
      onFilterDropdownVisibleChange(newVisible);
    }
  };

  var mergedVisible = typeof filterDropdownVisible === 'boolean' ? filterDropdownVisible : visible; // ===================== Select Keys =====================

  var propFilteredKeys = filterState && filterState.filteredKeys;

  var _useSyncState = useSyncState(propFilteredKeys || []),
      _useSyncState2 = _slicedToArray(_useSyncState, 2),
      getFilteredKeysSync = _useSyncState2[0],
      setFilteredKeysSync = _useSyncState2[1];

  var onSelectKeys = function onSelectKeys(_ref3) {
    var selectedKeys = _ref3.selectedKeys;
    setFilteredKeysSync(selectedKeys);
  };

  React.useEffect(function () {
    onSelectKeys({
      selectedKeys: propFilteredKeys || []
    });
  }, [propFilteredKeys]); // ====================== Open Keys ======================

  var _React$useState3 = React.useState([]),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      openKeys = _React$useState4[0],
      setOpenKeys = _React$useState4[1];

  var openRef = React.useRef();

  var onOpenChange = function onOpenChange(keys) {
    openRef.current = window.setTimeout(function () {
      setOpenKeys(keys);
    });
  };

  var onMenuClick = function onMenuClick() {
    window.clearTimeout(openRef.current);
  };

  React.useEffect(function () {
    return function () {
      window.clearTimeout(openRef.current);
    };
  }, []); // ======================= Submit ========================

  var internalTriggerFilter = function internalTriggerFilter(keys) {
    var mergedKeys = keys && keys.length ? keys : null;

    if (mergedKeys === null && (!filterState || !filterState.filteredKeys)) {
      return null;
    }

    if (isEqual(mergedKeys, filterState === null || filterState === void 0 ? void 0 : filterState.filteredKeys)) {
      return null;
    }

    triggerFilter({
      column: column,
      key: columnKey,
      filteredKeys: mergedKeys
    });
  };

  var onConfirm = function onConfirm() {
    triggerVisible(false);
    internalTriggerFilter(getFilteredKeysSync());
  };

  var onReset = function onReset() {
    setFilteredKeysSync([]);
    triggerVisible(false);
    internalTriggerFilter([]);
  };

  var doFilter = function doFilter() {
    var param = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      closeDropdown: true
    };
    triggerVisible(!param.closeDropdown);
    internalTriggerFilter(getFilteredKeysSync());
  };

  var onVisibleChange = function onVisibleChange(newVisible) {
    if (newVisible && propFilteredKeys !== undefined) {
      // Sync filteredKeys on appear in controlled mode (propFilteredKeys !== undefiend)
      setFilteredKeysSync(propFilteredKeys || []);
    }

    triggerVisible(newVisible); // Default will filter when closed

    if (!newVisible && !column.filterDropdown) {
      onConfirm();
    }
  }; // ======================== Style ========================


  var dropdownMenuClass = classNames(_defineProperty({}, \\"\\".concat(dropdownPrefixCls, \\"-menu-without-submenu\\"), !hasSubMenu(column.filters || [])));
  var dropdownContent;

  if (typeof column.filterDropdown === 'function') {
    dropdownContent = column.filterDropdown({
      prefixCls: \\"\\".concat(dropdownPrefixCls, \\"-custom\\"),
      setSelectedKeys: function setSelectedKeys(selectedKeys) {
        return onSelectKeys({
          selectedKeys: selectedKeys
        });
      },
      selectedKeys: getFilteredKeysSync(),
      confirm: doFilter,
      clearFilters: onReset,
      filters: column.filters,
      visible: mergedVisible
    });
  } else if (column.filterDropdown) {
    dropdownContent = column.filterDropdown;
  } else {
    var selectedKeys = getFilteredKeysSync() || [];
    dropdownContent = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Menu, {
      multiple: filterMultiple,
      prefixCls: \\"\\".concat(dropdownPrefixCls, \\"-menu\\"),
      className: dropdownMenuClass,
      onClick: onMenuClick,
      onSelect: onSelectKeys,
      onDeselect: onSelectKeys,
      selectedKeys: selectedKeys,
      getPopupContainer: getPopupContainer,
      openKeys: openKeys,
      onOpenChange: onOpenChange
    }, renderFilterItems({
      filters: column.filters || [],
      prefixCls: prefixCls,
      filteredKeys: getFilteredKeysSync(),
      filterMultiple: filterMultiple,
      locale: locale
    })), /*#__PURE__*/React.createElement(\\"div\\", {
      className: \\"\\".concat(prefixCls, \\"-dropdown-btns\\")
    }, /*#__PURE__*/React.createElement(Button$1, {
      type: \\"link\\",
      size: \\"small\\",
      disabled: selectedKeys.length === 0,
      onClick: onReset
    }, locale.filterReset), /*#__PURE__*/React.createElement(Button$1, {
      type: \\"primary\\",
      size: \\"small\\",
      onClick: onConfirm
    }, locale.filterConfirm)));
  }

  var menu = /*#__PURE__*/React.createElement(FilterDropdownMenuWrapper, {
    className: \\"\\".concat(prefixCls, \\"-dropdown\\")
  }, dropdownContent);
  var filterIcon;

  if (typeof column.filterIcon === 'function') {
    filterIcon = column.filterIcon(filtered);
  } else if (column.filterIcon) {
    filterIcon = column.filterIcon;
  } else {
    filterIcon = /*#__PURE__*/React.createElement(FilterFilled$1, null);
  }

  var _React$useContext = React.useContext(ConfigContext),
      direction = _React$useContext.direction;

  return /*#__PURE__*/React.createElement(\\"div\\", {
    className: classNames(\\"\\".concat(prefixCls, \\"-column\\"))
  }, /*#__PURE__*/React.createElement(\\"span\\", {
    className: \\"\\".concat(prefixCls, \\"-column-title\\")
  }, children), /*#__PURE__*/React.createElement(\\"span\\", {
    className: classNames(\\"\\".concat(prefixCls, \\"-trigger-container\\"), _defineProperty({}, \\"\\".concat(prefixCls, \\"-trigger-container-open\\"), mergedVisible)),
    onClick: function onClick(e) {
      e.stopPropagation();
    }
  }, /*#__PURE__*/React.createElement(Dropdown, {
    overlay: menu,
    trigger: ['click'],
    visible: mergedVisible,
    onVisibleChange: onVisibleChange,
    getPopupContainer: getPopupContainer,
    placement: direction === 'rtl' ? 'bottomLeft' : 'bottomRight'
  }, /*#__PURE__*/React.createElement(\\"span\\", {
    role: \\"button\\",
    tabIndex: -1,
    className: classNames(\\"\\".concat(prefixCls, \\"-trigger\\"), {
      active: filtered
    })
  }, filterIcon))));
}

function collectFilterStates(columns, init, pos) {
  var filterStates = [];
  (columns || []).forEach(function (column, index) {
    var _a;

    var columnPos = getColumnPos(index, pos);

    if ('children' in column) {
      filterStates = [].concat(_toConsumableArray(filterStates), _toConsumableArray(collectFilterStates(column.children, init, columnPos)));
    } else if (column.filters || 'filterDropdown' in column || 'onFilter' in column) {
      if ('filteredValue' in column) {
        // Controlled
        var filteredValues = column.filteredValue;

        if (!('filterDropdown' in column)) {
          filteredValues = (_a = filteredValues === null || filteredValues === void 0 ? void 0 : filteredValues.map(String)) !== null && _a !== void 0 ? _a : filteredValues;
        }

        filterStates.push({
          column: column,
          key: getColumnKey(column, columnPos),
          filteredKeys: filteredValues,
          forceFiltered: column.filtered
        });
      } else {
        // Uncontrolled
        filterStates.push({
          column: column,
          key: getColumnKey(column, columnPos),
          filteredKeys: init && column.defaultFilteredValue ? column.defaultFilteredValue : undefined,
          forceFiltered: column.filtered
        });
      }
    }
  });
  return filterStates;
}

function injectFilter(prefixCls, dropdownPrefixCls, columns, filterStates, triggerFilter, getPopupContainer, locale, pos) {
  return columns.map(function (column, index) {
    var columnPos = getColumnPos(index, pos);
    var _column$filterMultipl = column.filterMultiple,
        filterMultiple = _column$filterMultipl === void 0 ? true : _column$filterMultipl;
    var newColumn = column;

    if (newColumn.filters || newColumn.filterDropdown) {
      var columnKey = getColumnKey(newColumn, columnPos);
      var filterState = filterStates.find(function (_ref) {
        var key = _ref.key;
        return columnKey === key;
      });
      newColumn = _extends(_extends({}, newColumn), {
        title: function title(renderProps) {
          return /*#__PURE__*/React.createElement(FilterDropdown, {
            prefixCls: \\"\\".concat(prefixCls, \\"-filter\\"),
            dropdownPrefixCls: dropdownPrefixCls,
            column: newColumn,
            columnKey: columnKey,
            filterState: filterState,
            filterMultiple: filterMultiple,
            triggerFilter: triggerFilter,
            locale: locale,
            getPopupContainer: getPopupContainer
          }, renderColumnTitle(column.title, renderProps));
        }
      });
    }

    if ('children' in newColumn) {
      newColumn = _extends(_extends({}, newColumn), {
        children: injectFilter(prefixCls, dropdownPrefixCls, newColumn.children, filterStates, triggerFilter, getPopupContainer, locale, columnPos)
      });
    }

    return newColumn;
  });
}

function flattenKeys(filters) {
  var keys = [];
  (filters || []).forEach(function (_ref2) {
    var value = _ref2.value,
        children = _ref2.children;
    keys.push(value);

    if (children) {
      keys = [].concat(_toConsumableArray(keys), _toConsumableArray(flattenKeys(children)));
    }
  });
  return keys;
}

function generateFilterInfo(filterStates) {
  var currentFilters = {};
  filterStates.forEach(function (_ref3) {
    var key = _ref3.key,
        filteredKeys = _ref3.filteredKeys,
        column = _ref3.column;
    var filters = column.filters,
        filterDropdown = column.filterDropdown;

    if (filterDropdown) {
      currentFilters[key] = filteredKeys || null;
    } else if (Array.isArray(filteredKeys)) {
      var keys = flattenKeys(filters);
      currentFilters[key] = keys.filter(function (originKey) {
        return filteredKeys.includes(String(originKey));
      });
    } else {
      currentFilters[key] = null;
    }
  });
  return currentFilters;
}

function getFilterData(data, filterStates) {
  return filterStates.reduce(function (currentData, filterState) {
    var _filterState$column = filterState.column,
        onFilter = _filterState$column.onFilter,
        filters = _filterState$column.filters,
        filteredKeys = filterState.filteredKeys;

    if (onFilter && filteredKeys && filteredKeys.length) {
      return currentData.filter(function (record) {
        return filteredKeys.some(function (key) {
          var keys = flattenKeys(filters);
          var keyIndex = keys.findIndex(function (k) {
            return String(k) === String(key);
          });
          var realKey = keyIndex !== -1 ? keys[keyIndex] : key;
          return onFilter(realKey, record);
        });
      });
    }

    return currentData;
  }, data);
}

function useFilter(_ref4) {
  var prefixCls = _ref4.prefixCls,
      dropdownPrefixCls = _ref4.dropdownPrefixCls,
      mergedColumns = _ref4.mergedColumns,
      onFilterChange = _ref4.onFilterChange,
      getPopupContainer = _ref4.getPopupContainer,
      tableLocale = _ref4.locale;

  var _React$useState = React.useState(collectFilterStates(mergedColumns, true)),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      filterStates = _React$useState2[0],
      setFilterStates = _React$useState2[1];

  var mergedFilterStates = React.useMemo(function () {
    var collectedStates = collectFilterStates(mergedColumns, false); // Return if not controlled

    if (collectedStates.every(function (_ref5) {
      var filteredKeys = _ref5.filteredKeys;
      return filteredKeys === undefined;
    })) {
      return filterStates;
    }

    return collectedStates;
  }, [mergedColumns, filterStates]);
  var getFilters = React.useCallback(function () {
    return generateFilterInfo(mergedFilterStates);
  }, [mergedFilterStates]);

  var triggerFilter = function triggerFilter(filterState) {
    var newFilterStates = mergedFilterStates.filter(function (_ref6) {
      var key = _ref6.key;
      return key !== filterState.key;
    });
    newFilterStates.push(filterState);
    setFilterStates(newFilterStates);
    onFilterChange(generateFilterInfo(newFilterStates), newFilterStates);
  };

  var transformColumns = function transformColumns(innerColumns) {
    return injectFilter(prefixCls, dropdownPrefixCls, innerColumns, mergedFilterStates, triggerFilter, getPopupContainer, tableLocale);
  };

  return [transformColumns, mergedFilterStates, getFilters];
}

function fillTitle(columns, columnTitleProps) {
  return columns.map(function (column) {
    var cloneColumn = _extends({}, column);

    cloneColumn.title = renderColumnTitle(column.title, columnTitleProps);

    if ('children' in cloneColumn) {
      cloneColumn.children = fillTitle(cloneColumn.children, columnTitleProps);
    }

    return cloneColumn;
  });
}

function useTitleColumns(columnTitleProps) {
  var filledColumns = React.useCallback(function (columns) {
    return fillTitle(columns, columnTitleProps);
  }, [columnTitleProps]);
  return [filledColumns];
}

function renderExpandIcon(locale) {
  return function expandIcon(_ref) {
    var _classNames;

    var prefixCls = _ref.prefixCls,
        onExpand = _ref.onExpand,
        record = _ref.record,
        expanded = _ref.expanded,
        expandable = _ref.expandable;
    var iconPrefix = \\"\\".concat(prefixCls, \\"-row-expand-icon\\");
    return /*#__PURE__*/React.createElement(\\"button\\", {
      type: \\"button\\",
      onClick: function onClick(e) {
        onExpand(record, e);
        e.stopPropagation();
      },
      className: classNames(iconPrefix, (_classNames = {}, _defineProperty(_classNames, \\"\\".concat(iconPrefix, \\"-spaced\\"), !expandable), _defineProperty(_classNames, \\"\\".concat(iconPrefix, \\"-expanded\\"), expandable && expanded), _defineProperty(_classNames, \\"\\".concat(iconPrefix, \\"-collapsed\\"), expandable && !expanded), _classNames)),
      \\"aria-label\\": expanded ? locale.collapse : locale.expand
    });
  };
}

/* istanbul ignore next */

/** This is a syntactic sugar for \`columns\` prop. So HOC will not work on this. */
// eslint-disable-next-line no-unused-vars
function Column(_) {
  return null;
}

/* istanbul ignore next */

/** This is a syntactic sugar for \`columns\` prop. So HOC will not work on this. */
// eslint-disable-next-line no-unused-vars
function ColumnGroup(_) {
  return null;
}

var EMPTY_LIST = [];

function Table(props) {
  var _classNames3;

  var customizePrefixCls = props.prefixCls,
      className = props.className,
      style = props.style,
      customizeSize = props.size,
      bordered = props.bordered,
      customizeDropdownPrefixCls = props.dropdownPrefixCls,
      dataSource = props.dataSource,
      pagination = props.pagination,
      rowSelection = props.rowSelection,
      rowKey = props.rowKey,
      rowClassName = props.rowClassName,
      columns = props.columns,
      children = props.children,
      legacyChildrenColumnName = props.childrenColumnName,
      onChange = props.onChange,
      getPopupContainer = props.getPopupContainer,
      loading = props.loading,
      expandIcon = props.expandIcon,
      expandable = props.expandable,
      expandedRowRender = props.expandedRowRender,
      expandIconColumnIndex = props.expandIconColumnIndex,
      indentSize = props.indentSize,
      scroll = props.scroll,
      sortDirections = props.sortDirections,
      locale = props.locale,
      _props$showSorterTool = props.showSorterTooltip,
      showSorterTooltip = _props$showSorterTool === void 0 ? true : _props$showSorterTool;
  devWarning(!(typeof rowKey === 'function' && rowKey.length > 1), 'Table', '\`index\` parameter of \`rowKey\` function is deprecated. There is no guarantee that it will work as expected.');
  var screens = useBreakpoint();
  var mergedColumns = React.useMemo(function () {
    var matched = new Set(Object.keys(screens).filter(function (m) {
      return screens[m];
    }));
    return (columns || convertChildrenToColumns(children)).filter(function (c) {
      return !c.responsive || c.responsive.some(function (r) {
        return matched.has(r);
      });
    });
  }, [children, columns, screens]);
  var tableProps = omit(props, ['className', 'style', 'columns']);
  var size = React.useContext(SizeContext$1);

  var _React$useContext = React.useContext(ConfigContext),
      _React$useContext$loc = _React$useContext.locale,
      contextLocale = _React$useContext$loc === void 0 ? localeValues : _React$useContext$loc,
      renderEmpty = _React$useContext.renderEmpty,
      direction = _React$useContext.direction;

  var mergedSize = customizeSize || size;

  var tableLocale = _extends(_extends({}, contextLocale.Table), locale);

  var rawData = dataSource || EMPTY_LIST;

  var _React$useContext2 = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext2.getPrefixCls;

  var prefixCls = getPrefixCls('table', customizePrefixCls);
  var dropdownPrefixCls = getPrefixCls('dropdown', customizeDropdownPrefixCls);

  var mergedExpandable = _extends({
    childrenColumnName: legacyChildrenColumnName,
    expandIconColumnIndex: expandIconColumnIndex
  }, expandable);

  var _mergedExpandable$chi = mergedExpandable.childrenColumnName,
      childrenColumnName = _mergedExpandable$chi === void 0 ? 'children' : _mergedExpandable$chi;
  var expandType = React.useMemo(function () {
    if (rawData.some(function (item) {
      var _a;

      return (_a = item) === null || _a === void 0 ? void 0 : _a[childrenColumnName];
    })) {
      return 'nest';
    }

    if (expandedRowRender || expandable && expandable.expandedRowRender) {
      return 'row';
    }

    return null;
  }, [rawData]);
  var internalRefs = {
    body: React.useRef()
  }; // ============================ RowKey ============================

  var getRowKey = React.useMemo(function () {
    if (typeof rowKey === 'function') {
      return rowKey;
    }

    return function (record) {
      var _a;

      return (_a = record) === null || _a === void 0 ? void 0 : _a[rowKey];
    };
  }, [rowKey]);

  var _useLazyKVMap = useLazyKVMap(rawData, childrenColumnName, getRowKey),
      _useLazyKVMap2 = _slicedToArray(_useLazyKVMap, 1),
      getRecordByKey = _useLazyKVMap2[0]; // ============================ Events =============================


  var changeEventInfo = {};

  var triggerOnChange = function triggerOnChange(info, action) {
    var reset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    var changeInfo = _extends(_extends({}, changeEventInfo), info);

    if (reset) {
      changeEventInfo.resetPagination(); // Reset event param

      if (changeInfo.pagination.current) {
        changeInfo.pagination.current = 1;
      } // Trigger pagination events


      if (pagination && pagination.onChange) {
        pagination.onChange(1, changeInfo.pagination.pageSize);
      }
    }

    if (scroll && scroll.scrollToFirstRowOnChange !== false && internalRefs.body.current) {
      scrollTo(0, {
        getContainer: function getContainer() {
          return internalRefs.body.current;
        }
      });
    }

    if (onChange) {
      onChange(changeInfo.pagination, changeInfo.filters, changeInfo.sorter, {
        currentDataSource: getFilterData(getSortData(rawData, changeInfo.sorterStates, childrenColumnName), changeInfo.filterStates),
        action: action
      });
    }
  };
  /**
   * Controlled state in \`columns\` is not a good idea that makes too many code (1000+ line?) to read
   * state out and then put it back to title render. Move these code into \`hooks\` but still too
   * complex. We should provides Table props like \`sorter\` & \`filter\` to handle control in next big version.
   */
  // ============================ Sorter =============================


  var onSorterChange = function onSorterChange(sorter, sorterStates) {
    triggerOnChange({
      sorter: sorter,
      sorterStates: sorterStates
    }, 'sort', false);
  };

  var _useSorter = useFilterSorter({
    prefixCls: prefixCls,
    mergedColumns: mergedColumns,
    onSorterChange: onSorterChange,
    sortDirections: sortDirections || ['ascend', 'descend'],
    tableLocale: tableLocale,
    showSorterTooltip: showSorterTooltip
  }),
      _useSorter2 = _slicedToArray(_useSorter, 4),
      transformSorterColumns = _useSorter2[0],
      sortStates = _useSorter2[1],
      sorterTitleProps = _useSorter2[2],
      getSorters = _useSorter2[3];

  var sortedData = React.useMemo(function () {
    return getSortData(rawData, sortStates, childrenColumnName);
  }, [rawData, sortStates]);
  changeEventInfo.sorter = getSorters();
  changeEventInfo.sorterStates = sortStates; // ============================ Filter ============================

  var onFilterChange = function onFilterChange(filters, filterStates) {
    triggerOnChange({
      filters: filters,
      filterStates: filterStates
    }, 'filter', true);
  };

  var _useFilter = useFilter({
    prefixCls: prefixCls,
    locale: tableLocale,
    dropdownPrefixCls: dropdownPrefixCls,
    mergedColumns: mergedColumns,
    onFilterChange: onFilterChange,
    getPopupContainer: getPopupContainer
  }),
      _useFilter2 = _slicedToArray(_useFilter, 3),
      transformFilterColumns = _useFilter2[0],
      filterStates = _useFilter2[1],
      getFilters = _useFilter2[2];

  var mergedData = getFilterData(sortedData, filterStates);
  changeEventInfo.filters = getFilters();
  changeEventInfo.filterStates = filterStates; // ============================ Column ============================

  var columnTitleProps = React.useMemo(function () {
    return _extends({}, sorterTitleProps);
  }, [sorterTitleProps]);

  var _useTitleColumns = useTitleColumns(columnTitleProps),
      _useTitleColumns2 = _slicedToArray(_useTitleColumns, 1),
      transformTitleColumns = _useTitleColumns2[0]; // ========================== Pagination ==========================


  var onPaginationChange = function onPaginationChange(current, pageSize) {
    triggerOnChange({
      pagination: _extends(_extends({}, changeEventInfo.pagination), {
        current: current,
        pageSize: pageSize
      })
    }, 'paginate');
  };

  var _usePagination = usePagination(mergedData.length, pagination, onPaginationChange),
      _usePagination2 = _slicedToArray(_usePagination, 2),
      mergedPagination = _usePagination2[0],
      resetPagination = _usePagination2[1];

  changeEventInfo.pagination = pagination === false ? {} : getPaginationParam(pagination, mergedPagination);
  changeEventInfo.resetPagination = resetPagination; // ============================= Data =============================

  var pageData = React.useMemo(function () {
    if (pagination === false || !mergedPagination.pageSize) {
      return mergedData;
    }

    var _mergedPagination$cur = mergedPagination.current,
        current = _mergedPagination$cur === void 0 ? 1 : _mergedPagination$cur,
        total = mergedPagination.total,
        _mergedPagination$pag = mergedPagination.pageSize,
        pageSize = _mergedPagination$pag === void 0 ? DEFAULT_PAGE_SIZE : _mergedPagination$pag; // Dynamic table data

    if (mergedData.length < total) {
      if (mergedData.length > pageSize) {
        devWarning(false, 'Table', '\`dataSource\` length is less than \`pagination.total\` but large than \`pagination.pageSize\`. Please make sure your config correct data with async mode.');
        return mergedData.slice((current - 1) * pageSize, current * pageSize);
      }

      return mergedData;
    }

    return mergedData.slice((current - 1) * pageSize, current * pageSize);
  }, [!!pagination, mergedData, mergedPagination && mergedPagination.current, mergedPagination && mergedPagination.pageSize, mergedPagination && mergedPagination.total]); // ========================== Selections ==========================

  var _useSelection = useSelection(rowSelection, {
    prefixCls: prefixCls,
    data: mergedData,
    pageData: pageData,
    getRowKey: getRowKey,
    getRecordByKey: getRecordByKey,
    expandType: expandType,
    childrenColumnName: childrenColumnName,
    locale: tableLocale,
    expandIconColumnIndex: mergedExpandable.expandIconColumnIndex,
    getPopupContainer: getPopupContainer
  }),
      _useSelection2 = _slicedToArray(_useSelection, 2),
      transformSelectionColumns = _useSelection2[0],
      selectedKeySet = _useSelection2[1];

  var internalRowClassName = function internalRowClassName(record, index, indent) {
    var mergedRowClassName;

    if (typeof rowClassName === 'function') {
      mergedRowClassName = classNames(rowClassName(record, index, indent));
    } else {
      mergedRowClassName = classNames(rowClassName);
    }

    return classNames(_defineProperty({}, \\"\\".concat(prefixCls, \\"-row-selected\\"), selectedKeySet.has(getRowKey(record, index))), mergedRowClassName);
  }; // ========================== Expandable ==========================
  // Pass origin render status into \`rc-table\`, this can be removed when refactor with \`rc-table\`


  mergedExpandable.__PARENT_RENDER_ICON__ = mergedExpandable.expandIcon; // Customize expandable icon

  mergedExpandable.expandIcon = mergedExpandable.expandIcon || expandIcon || renderExpandIcon(tableLocale); // Adjust expand icon index, no overwrite expandIconColumnIndex if set.

  if (expandType === 'nest' && mergedExpandable.expandIconColumnIndex === undefined) {
    mergedExpandable.expandIconColumnIndex = rowSelection ? 1 : 0;
  } else if (mergedExpandable.expandIconColumnIndex > 0 && rowSelection) {
    mergedExpandable.expandIconColumnIndex -= 1;
  } // Indent size


  if (typeof mergedExpandable.indentSize !== 'number') {
    mergedExpandable.indentSize = typeof indentSize === 'number' ? indentSize : 15;
  } // ============================ Render ============================


  var transformColumns = React.useCallback(function (innerColumns) {
    return transformTitleColumns(transformSelectionColumns(transformFilterColumns(transformSorterColumns(innerColumns))));
  }, [transformSorterColumns, transformFilterColumns, transformSelectionColumns]);
  var topPaginationNode;
  var bottomPaginationNode;

  if (pagination !== false && (mergedPagination === null || mergedPagination === void 0 ? void 0 : mergedPagination.total)) {
    var paginationSize;

    if (mergedPagination.size) {
      paginationSize = mergedPagination.size;
    } else {
      paginationSize = mergedSize === 'small' || mergedSize === 'middle' ? 'small' : undefined;
    }

    var renderPagination = function renderPagination(position) {
      return /*#__PURE__*/React.createElement(Pagination, _extends({
        className: \\"\\".concat(prefixCls, \\"-pagination \\").concat(prefixCls, \\"-pagination-\\").concat(position)
      }, mergedPagination, {
        size: paginationSize
      }));
    };

    var defaultPosition = direction === 'rtl' ? 'left' : 'right';

    if (mergedPagination.position !== null && Array.isArray(mergedPagination.position)) {
      var topPos = mergedPagination.position.find(function (p) {
        return p.indexOf('top') !== -1;
      });
      var bottomPos = mergedPagination.position.find(function (p) {
        return p.indexOf('bottom') !== -1;
      });

      if (!topPos && !bottomPos) {
        bottomPaginationNode = renderPagination(defaultPosition);
      } else {
        if (topPos) {
          topPaginationNode = renderPagination(topPos.toLowerCase().replace('top', ''));
        }

        if (bottomPos) {
          bottomPaginationNode = renderPagination(bottomPos.toLowerCase().replace('bottom', ''));
        }
      }
    } else {
      bottomPaginationNode = renderPagination(defaultPosition);
    }
  } // >>>>>>>>> Spinning


  var spinProps;

  if (typeof loading === 'boolean') {
    spinProps = {
      spinning: loading
    };
  } else if (_typeof(loading) === 'object') {
    spinProps = _extends({
      spinning: true
    }, loading);
  }

  var wrapperClassNames = classNames(\\"\\".concat(prefixCls, \\"-wrapper\\"), _defineProperty({}, \\"\\".concat(prefixCls, \\"-wrapper-rtl\\"), direction === 'rtl'), className);
  return /*#__PURE__*/React.createElement(\\"div\\", {
    className: wrapperClassNames,
    style: style
  }, /*#__PURE__*/React.createElement(Spin, _extends({
    spinning: false
  }, spinProps), topPaginationNode, /*#__PURE__*/React.createElement(RcTable, _extends({}, tableProps, {
    columns: mergedColumns,
    direction: direction,
    expandable: mergedExpandable,
    prefixCls: prefixCls,
    className: classNames((_classNames3 = {}, _defineProperty(_classNames3, \\"\\".concat(prefixCls, \\"-middle\\"), mergedSize === 'middle'), _defineProperty(_classNames3, \\"\\".concat(prefixCls, \\"-small\\"), mergedSize === 'small'), _defineProperty(_classNames3, \\"\\".concat(prefixCls, \\"-bordered\\"), bordered), _defineProperty(_classNames3, \\"\\".concat(prefixCls, \\"-empty\\"), rawData.length === 0), _classNames3)),
    data: pageData,
    rowKey: getRowKey,
    rowClassName: internalRowClassName,
    emptyText: locale && locale.emptyText || renderEmpty('Table') // Internal
    ,
    internalHooks: INTERNAL_HOOKS,
    internalRefs: internalRefs,
    transformColumns: transformColumns
  })), bottomPaginationNode));
}

Table.defaultProps = {
  rowKey: 'key'
};
Table.SELECTION_ALL = SELECTION_ALL;
Table.SELECTION_INVERT = SELECTION_INVERT;
Table.SELECTION_NONE = SELECTION_NONE;
Table.Column = Column;
Table.ColumnGroup = ColumnGroup;
Table.Summary = Summary;

function Search(props) {
  var _props$placeholder = props.placeholder,
      placeholder = _props$placeholder === void 0 ? '' : _props$placeholder,
      value = props.value,
      prefixCls = props.prefixCls,
      disabled = props.disabled,
      onChange = props.onChange,
      handleClear = props.handleClear;
  var handleChange = React.useCallback(function (e) {
    onChange === null || onChange === void 0 ? void 0 : onChange(e);
  }, [onChange]);

  var handleClearFn = function handleClearFn(e) {
    e.preventDefault();

    if (!disabled && handleClear) {
      handleClear(e);
    }
  };

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Input, {
    placeholder: placeholder,
    className: prefixCls,
    value: value,
    onChange: handleChange,
    disabled: disabled
  }), value && value.length > 0 ? /*#__PURE__*/React.createElement(\\"a\\", {
    className: \\"\\".concat(prefixCls, \\"-action\\"),
    onClick: handleClearFn
  }, /*#__PURE__*/React.createElement(CloseCircleFilled$1, null)) : /*#__PURE__*/React.createElement(\\"span\\", {
    className: \\"\\".concat(prefixCls, \\"-action\\")
  }, /*#__PURE__*/React.createElement(SearchOutlined$1, null)));
}

// This icon file is generated automatically.
var DeleteOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M360 184h-8c4.4 0 8-3.6 8-8v8h304v-8c0 4.4 3.6 8 8 8h-8v72h72v-80c0-35.3-28.7-64-64-64H352c-35.3 0-64 28.7-64 64v80h72v-72zm504 72H160c-17.7 0-32 14.3-32 32v32c0 4.4 3.6 8 8 8h60.4l24.7 523c1.6 34.1 29.8 61 63.9 61h454c34.2 0 62.3-26.8 63.9-61l24.7-523H888c4.4 0 8-3.6 8-8v-32c0-17.7-14.3-32-32-32zM731.3 840H292.7l-24.2-512h487l-24.2 512z\\" } }] }, \\"name\\": \\"delete\\", \\"theme\\": \\"outlined\\" };

var DeleteOutlined = function DeleteOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: DeleteOutlined$2
  }));
};

DeleteOutlined.displayName = 'DeleteOutlined';
var DeleteOutlined$1 = /*#__PURE__*/React.forwardRef(DeleteOutlined);

var ListItem$1 = function ListItem(props) {
  var _classNames;

  var renderedText = props.renderedText,
      renderedEl = props.renderedEl,
      item = props.item,
      checked = props.checked,
      disabled = props.disabled,
      prefixCls = props.prefixCls,
      onClick = props.onClick,
      onRemove = props.onRemove,
      showRemove = props.showRemove;
  var className = classNames((_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-content-item\\"), true), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-content-item-disabled\\"), disabled || item.disabled), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-content-item-checked\\"), checked), _classNames));
  var title;

  if (typeof renderedText === 'string' || typeof renderedText === 'number') {
    title = String(renderedText);
  }

  return /*#__PURE__*/React.createElement(LocaleReceiver, {
    componentName: \\"Transfer\\",
    defaultLocale: localeValues.Transfer
  }, function (transferLocale) {
    var liProps = {
      className: className,
      title: title
    };
    var labelNode = /*#__PURE__*/React.createElement(\\"span\\", {
      className: \\"\\".concat(prefixCls, \\"-content-item-text\\")
    }, renderedEl); // Show remove

    if (showRemove) {
      return /*#__PURE__*/React.createElement(\\"li\\", liProps, labelNode, /*#__PURE__*/React.createElement(TransButton, {
        disabled: disabled || item.disabled,
        className: \\"\\".concat(prefixCls, \\"-content-item-remove\\"),
        \\"aria-label\\": transferLocale.remove,
        onClick: function onClick() {
          onRemove === null || onRemove === void 0 ? void 0 : onRemove(item);
        }
      }, /*#__PURE__*/React.createElement(DeleteOutlined$1, null)));
    } // Default click to select


    liProps.onClick = disabled || item.disabled ? undefined : function () {
      return onClick(item);
    };
    return /*#__PURE__*/React.createElement(\\"li\\", liProps, /*#__PURE__*/React.createElement(Checkbox, {
      checked: checked,
      disabled: disabled || item.disabled
    }), labelNode);
  });
};

var ListItem$2 = /*#__PURE__*/React.memo(ListItem$1);

var OmitProps = tuple('handleFilter', 'handleClear', 'checkedKeys');

function parsePagination(pagination) {
  if (!pagination) {
    return null;
  }

  var defaultPagination = {
    pageSize: 10
  };

  if (_typeof(pagination) === 'object') {
    return _extends(_extends({}, defaultPagination), pagination);
  }

  return defaultPagination;
}

var ListBody = /*#__PURE__*/function (_React$Component) {
  _inherits(ListBody, _React$Component);

  var _super = _createSuper(ListBody);

  function ListBody() {
    var _this;

    _classCallCheck(this, ListBody);

    _this = _super.apply(this, arguments);
    _this.state = {
      current: 1
    };

    _this.onItemSelect = function (item) {
      var _this$props = _this.props,
          onItemSelect = _this$props.onItemSelect,
          selectedKeys = _this$props.selectedKeys;
      var checked = selectedKeys.indexOf(item.key) >= 0;
      onItemSelect(item.key, !checked);
    };

    _this.onItemRemove = function (item) {
      var onItemRemove = _this.props.onItemRemove;
      onItemRemove === null || onItemRemove === void 0 ? void 0 : onItemRemove([item.key]);
    };

    _this.onPageChange = function (current) {
      _this.setState({
        current: current
      });
    };

    _this.getItems = function () {
      var current = _this.state.current;
      var _this$props2 = _this.props,
          pagination = _this$props2.pagination,
          filteredRenderItems = _this$props2.filteredRenderItems;
      var mergedPagination = parsePagination(pagination);
      var displayItems = filteredRenderItems;

      if (mergedPagination) {
        displayItems = filteredRenderItems.slice((current - 1) * mergedPagination.pageSize, current * mergedPagination.pageSize);
      }

      return displayItems;
    };

    return _this;
  }

  _createClass(ListBody, [{
    key: \\"render\\",
    value: function render() {
      var _this2 = this;

      var current = this.state.current;
      var _this$props3 = this.props,
          prefixCls = _this$props3.prefixCls,
          onScroll = _this$props3.onScroll,
          filteredRenderItems = _this$props3.filteredRenderItems,
          selectedKeys = _this$props3.selectedKeys,
          globalDisabled = _this$props3.disabled,
          showRemove = _this$props3.showRemove,
          pagination = _this$props3.pagination;
      var mergedPagination = parsePagination(pagination);
      var paginationNode = null;

      if (mergedPagination) {
        paginationNode = /*#__PURE__*/React.createElement(Pagination, {
          simple: true,
          size: \\"small\\",
          disabled: globalDisabled,
          className: \\"\\".concat(prefixCls, \\"-pagination\\"),
          total: filteredRenderItems.length,
          pageSize: mergedPagination.pageSize,
          current: current,
          onChange: this.onPageChange
        });
      }

      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\\"ul\\", {
        className: classNames(\\"\\".concat(prefixCls, \\"-content\\"), _defineProperty({}, \\"\\".concat(prefixCls, \\"-content-show-remove\\"), showRemove)),
        onScroll: onScroll
      }, this.getItems().map(function (_ref) {
        var renderedEl = _ref.renderedEl,
            renderedText = _ref.renderedText,
            item = _ref.item;
        var disabled = item.disabled;
        var checked = selectedKeys.indexOf(item.key) >= 0;
        return /*#__PURE__*/React.createElement(ListItem$2, {
          disabled: globalDisabled || disabled,
          key: item.key,
          item: item,
          renderedText: renderedText,
          renderedEl: renderedEl,
          checked: checked,
          prefixCls: prefixCls,
          onClick: _this2.onItemSelect,
          onRemove: _this2.onItemRemove,
          showRemove: showRemove
        });
      })), paginationNode);
    }
  }], [{
    key: \\"getDerivedStateFromProps\\",
    value: function getDerivedStateFromProps(_ref2, _ref3) {
      var filteredRenderItems = _ref2.filteredRenderItems,
          pagination = _ref2.pagination;
      var current = _ref3.current;
      var mergedPagination = parsePagination(pagination);

      if (mergedPagination) {
        // Calculate the page number
        var maxPageCount = Math.ceil(filteredRenderItems.length / mergedPagination.pageSize);

        if (current > maxPageCount) {
          return {
            current: maxPageCount
          };
        }
      }

      return null;
    }
  }]);

  return ListBody;
}(React.Component);

var defaultRender = function defaultRender() {
  return null;
};

function isRenderResultPlainObject(result) {
  return result && !isValidElement(result) && Object.prototype.toString.call(result) === '[object Object]';
}

function getEnabledItemKeys(items) {
  return items.filter(function (data) {
    return !data.disabled;
  }).map(function (data) {
    return data.key;
  });
}

var TransferList = /*#__PURE__*/function (_React$PureComponent) {
  _inherits(TransferList, _React$PureComponent);

  var _super = _createSuper(TransferList);

  function TransferList(props) {
    var _this;

    _classCallCheck(this, TransferList);

    _this = _super.call(this, props);
    _this.defaultListBodyRef = /*#__PURE__*/React.createRef(); // =============================== Filter ===============================

    _this.handleFilter = function (e) {
      var handleFilter = _this.props.handleFilter;
      var filterValue = e.target.value;

      _this.setState({
        filterValue: filterValue
      });

      handleFilter(e);
    };

    _this.handleClear = function () {
      var handleClear = _this.props.handleClear;

      _this.setState({
        filterValue: ''
      });

      handleClear();
    };

    _this.matchFilter = function (text, item) {
      var filterValue = _this.state.filterValue;
      var filterOption = _this.props.filterOption;

      if (filterOption) {
        return filterOption(filterValue, item);
      }

      return text.indexOf(filterValue) >= 0;
    };

    _this.getCurrentPageItems = function () {}; // =============================== Render ===============================


    _this.renderListBody = function (renderList, props) {
      var bodyContent = renderList ? renderList(props) : null;
      var customize = !!bodyContent;

      if (!customize) {
        bodyContent = /*#__PURE__*/React.createElement(ListBody, _extends({
          ref: _this.defaultListBodyRef
        }, props));
      }

      return {
        customize: customize,
        bodyContent: bodyContent
      };
    };

    _this.renderItem = function (item) {
      var _this$props$render = _this.props.render,
          render = _this$props$render === void 0 ? defaultRender : _this$props$render;
      var renderResult = render(item);
      var isRenderResultPlain = isRenderResultPlainObject(renderResult);
      return {
        renderedText: isRenderResultPlain ? renderResult.value : renderResult,
        renderedEl: isRenderResultPlain ? renderResult.label : renderResult,
        item: item
      };
    };

    _this.getSelectAllLabel = function (selectedCount, totalCount) {
      var _this$props = _this.props,
          itemsUnit = _this$props.itemsUnit,
          itemUnit = _this$props.itemUnit,
          selectAllLabel = _this$props.selectAllLabel;

      if (selectAllLabel) {
        return typeof selectAllLabel === 'function' ? selectAllLabel({
          selectedCount: selectedCount,
          totalCount: totalCount
        }) : selectAllLabel;
      }

      var unit = totalCount > 1 ? itemsUnit : itemUnit;
      return /*#__PURE__*/React.createElement(React.Fragment, null, (selectedCount > 0 ? \\"\\".concat(selectedCount, \\"/\\") : '') + totalCount, \\" \\", unit);
    };

    _this.state = {
      filterValue: ''
    };
    return _this;
  }

  _createClass(TransferList, [{
    key: \\"componentWillUnmount\\",
    value: function componentWillUnmount() {
      clearTimeout(this.triggerScrollTimer);
    }
  }, {
    key: \\"getCheckStatus\\",
    value: function getCheckStatus(filteredItems) {
      var checkedKeys = this.props.checkedKeys;

      if (checkedKeys.length === 0) {
        return 'none';
      }

      if (filteredItems.every(function (item) {
        return checkedKeys.indexOf(item.key) >= 0 || !!item.disabled;
      })) {
        return 'all';
      }

      return 'part';
    } // ================================ Item ================================

  }, {
    key: \\"getFilteredItems\\",
    value: function getFilteredItems(dataSource, filterValue) {
      var _this2 = this;

      var filteredItems = [];
      var filteredRenderItems = [];
      dataSource.forEach(function (item) {
        var renderedItem = _this2.renderItem(item);

        var renderedText = renderedItem.renderedText; // Filter skip

        if (filterValue && !_this2.matchFilter(renderedText, item)) {
          return null;
        }

        filteredItems.push(item);
        filteredRenderItems.push(renderedItem);
      });
      return {
        filteredItems: filteredItems,
        filteredRenderItems: filteredRenderItems
      };
    }
  }, {
    key: \\"getListBody\\",
    value: function getListBody(prefixCls, searchPlaceholder, filterValue, filteredItems, notFoundContent, filteredRenderItems, checkedKeys, renderList, showSearch, disabled) {
      var search = showSearch ? /*#__PURE__*/React.createElement(\\"div\\", {
        className: \\"\\".concat(prefixCls, \\"-body-search-wrapper\\")
      }, /*#__PURE__*/React.createElement(Search, {
        prefixCls: \\"\\".concat(prefixCls, \\"-search\\"),
        onChange: this.handleFilter,
        handleClear: this.handleClear,
        placeholder: searchPlaceholder,
        value: filterValue,
        disabled: disabled
      })) : null;

      var _this$renderListBody = this.renderListBody(renderList, _extends(_extends({}, omit(this.props, OmitProps)), {
        filteredItems: filteredItems,
        filteredRenderItems: filteredRenderItems,
        selectedKeys: checkedKeys
      })),
          bodyContent = _this$renderListBody.bodyContent,
          customize = _this$renderListBody.customize;

      var bodyNode; // We should wrap customize list body in a classNamed div to use flex layout.

      if (customize) {
        bodyNode = /*#__PURE__*/React.createElement(\\"div\\", {
          className: \\"\\".concat(prefixCls, \\"-body-customize-wrapper\\")
        }, bodyContent);
      } else {
        bodyNode = filteredItems.length ? bodyContent : /*#__PURE__*/React.createElement(\\"div\\", {
          className: \\"\\".concat(prefixCls, \\"-body-not-found\\")
        }, notFoundContent);
      }

      return /*#__PURE__*/React.createElement(\\"div\\", {
        className: classNames(showSearch ? \\"\\".concat(prefixCls, \\"-body \\").concat(prefixCls, \\"-body-with-search\\") : \\"\\".concat(prefixCls, \\"-body\\"))
      }, search, bodyNode);
    }
  }, {
    key: \\"getCheckBox\\",
    value: function getCheckBox(filteredItems, onItemSelectAll, showSelectAll, disabled) {
      var checkStatus = this.getCheckStatus(filteredItems);
      var checkedAll = checkStatus === 'all';
      var checkAllCheckbox = showSelectAll !== false && /*#__PURE__*/React.createElement(Checkbox, {
        disabled: disabled,
        checked: checkedAll,
        indeterminate: checkStatus === 'part',
        onChange: function onChange() {
          // Only select enabled items
          onItemSelectAll(filteredItems.filter(function (item) {
            return !item.disabled;
          }).map(function (_ref) {
            var key = _ref.key;
            return key;
          }), !checkedAll);
        }
      });
      return checkAllCheckbox;
    }
  }, {
    key: \\"render\\",
    value: function render() {
      var _classNames,
          _this3 = this;

      var filterValue = this.state.filterValue;
      var _this$props2 = this.props,
          prefixCls = _this$props2.prefixCls,
          dataSource = _this$props2.dataSource,
          titleText = _this$props2.titleText,
          checkedKeys = _this$props2.checkedKeys,
          disabled = _this$props2.disabled,
          footer = _this$props2.footer,
          showSearch = _this$props2.showSearch,
          style = _this$props2.style,
          searchPlaceholder = _this$props2.searchPlaceholder,
          notFoundContent = _this$props2.notFoundContent,
          selectAll = _this$props2.selectAll,
          selectCurrent = _this$props2.selectCurrent,
          selectInvert = _this$props2.selectInvert,
          removeAll = _this$props2.removeAll,
          removeCurrent = _this$props2.removeCurrent,
          renderList = _this$props2.renderList,
          onItemSelectAll = _this$props2.onItemSelectAll,
          onItemRemove = _this$props2.onItemRemove,
          showSelectAll = _this$props2.showSelectAll,
          showRemove = _this$props2.showRemove,
          pagination = _this$props2.pagination; // Custom Layout

      var footerDom = footer && footer(this.props);
      var listCls = classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-with-pagination\\"), pagination), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-with-footer\\"), footerDom), _classNames)); // ====================== Get filtered, checked item list ======================

      var _this$getFilteredItem = this.getFilteredItems(dataSource, filterValue),
          filteredItems = _this$getFilteredItem.filteredItems,
          filteredRenderItems = _this$getFilteredItem.filteredRenderItems; // ================================= List Body =================================


      var listBody = this.getListBody(prefixCls, searchPlaceholder, filterValue, filteredItems, notFoundContent, filteredRenderItems, checkedKeys, renderList, showSearch, disabled); // ================================ List Footer ================================

      var listFooter = footerDom ? /*#__PURE__*/React.createElement(\\"div\\", {
        className: \\"\\".concat(prefixCls, \\"-footer\\")
      }, footerDom) : null;
      var checkAllCheckbox = !showRemove && !pagination && this.getCheckBox(filteredItems, onItemSelectAll, showSelectAll, disabled);
      var menu = null;

      if (showRemove) {
        menu = /*#__PURE__*/React.createElement(Menu, null, pagination && /*#__PURE__*/React.createElement(Menu.Item, {
          onClick: function onClick() {
            var _a;

            var pageKeys = getEnabledItemKeys((((_a = _this3.defaultListBodyRef.current) === null || _a === void 0 ? void 0 : _a.getItems()) || []).map(function (entity) {
              return entity.item;
            }));
            onItemRemove === null || onItemRemove === void 0 ? void 0 : onItemRemove(pageKeys);
          }
        }, removeCurrent), /*#__PURE__*/React.createElement(Menu.Item, {
          onClick: function onClick() {
            onItemRemove === null || onItemRemove === void 0 ? void 0 : onItemRemove(getEnabledItemKeys(filteredItems));
          }
        }, removeAll));
      } else {
        menu = /*#__PURE__*/React.createElement(Menu, null, /*#__PURE__*/React.createElement(Menu.Item, {
          onClick: function onClick() {
            var keys = getEnabledItemKeys(filteredItems);
            onItemSelectAll(keys, keys.length !== checkedKeys.length);
          }
        }, selectAll), pagination && /*#__PURE__*/React.createElement(Menu.Item, {
          onClick: function onClick() {
            var _a;

            var pageItems = ((_a = _this3.defaultListBodyRef.current) === null || _a === void 0 ? void 0 : _a.getItems()) || [];
            onItemSelectAll(getEnabledItemKeys(pageItems.map(function (entity) {
              return entity.item;
            })), true);
          }
        }, selectCurrent), /*#__PURE__*/React.createElement(Menu.Item, {
          onClick: function onClick() {
            var _a;

            var availableKeys;

            if (pagination) {
              availableKeys = getEnabledItemKeys((((_a = _this3.defaultListBodyRef.current) === null || _a === void 0 ? void 0 : _a.getItems()) || []).map(function (entity) {
                return entity.item;
              }));
            } else {
              availableKeys = getEnabledItemKeys(filteredItems);
            }

            var checkedKeySet = new Set(checkedKeys);
            var newCheckedKeys = [];
            var newUnCheckedKeys = [];
            availableKeys.forEach(function (key) {
              if (checkedKeySet.has(key)) {
                newUnCheckedKeys.push(key);
              } else {
                newCheckedKeys.push(key);
              }
            });
            onItemSelectAll(newCheckedKeys, true);
            onItemSelectAll(newUnCheckedKeys, false);
          }
        }, selectInvert));
      }

      var dropdown = /*#__PURE__*/React.createElement(Dropdown, {
        className: \\"\\".concat(prefixCls, \\"-header-dropdown\\"),
        overlay: menu,
        disabled: disabled
      }, /*#__PURE__*/React.createElement(DownOutlined$1, null)); // ================================== Render ===================================

      return /*#__PURE__*/React.createElement(\\"div\\", {
        className: listCls,
        style: style
      }, /*#__PURE__*/React.createElement(\\"div\\", {
        className: \\"\\".concat(prefixCls, \\"-header\\")
      }, checkAllCheckbox, dropdown, /*#__PURE__*/React.createElement(\\"span\\", {
        className: \\"\\".concat(prefixCls, \\"-header-selected\\")
      }, this.getSelectAllLabel(checkedKeys.length, filteredItems.length)), /*#__PURE__*/React.createElement(\\"span\\", {
        className: \\"\\".concat(prefixCls, \\"-header-title\\")
      }, titleText)), listBody, listFooter);
    }
  }]);

  return TransferList;
}(React.PureComponent);
TransferList.defaultProps = {
  dataSource: [],
  titleText: '',
  showSearch: false
};

var Operation = function Operation(_ref) {
  var disabled = _ref.disabled,
      moveToLeft = _ref.moveToLeft,
      moveToRight = _ref.moveToRight,
      _ref$leftArrowText = _ref.leftArrowText,
      leftArrowText = _ref$leftArrowText === void 0 ? '' : _ref$leftArrowText,
      _ref$rightArrowText = _ref.rightArrowText,
      rightArrowText = _ref$rightArrowText === void 0 ? '' : _ref$rightArrowText,
      leftActive = _ref.leftActive,
      rightActive = _ref.rightActive,
      className = _ref.className,
      style = _ref.style,
      direction = _ref.direction,
      oneWay = _ref.oneWay;
  return /*#__PURE__*/React.createElement(\\"div\\", {
    className: className,
    style: style
  }, /*#__PURE__*/React.createElement(Button$1, {
    type: \\"primary\\",
    size: \\"small\\",
    disabled: disabled || !rightActive,
    onClick: moveToRight,
    icon: direction !== 'rtl' ? /*#__PURE__*/React.createElement(RightOutlined$1, null) : /*#__PURE__*/React.createElement(LeftOutlined$1, null)
  }, rightArrowText), !oneWay && /*#__PURE__*/React.createElement(Button$1, {
    type: \\"primary\\",
    size: \\"small\\",
    disabled: disabled || !leftActive,
    onClick: moveToLeft,
    icon: direction !== 'rtl' ? /*#__PURE__*/React.createElement(LeftOutlined$1, null) : /*#__PURE__*/React.createElement(RightOutlined$1, null)
  }, leftArrowText));
};

var Transfer = /*#__PURE__*/function (_React$Component) {
  _inherits(Transfer, _React$Component);

  var _super = _createSuper(Transfer);

  function Transfer(props) {
    var _this;

    _classCallCheck(this, Transfer);

    _this = _super.call(this, props);
    _this.separatedDataSource = null;

    _this.setStateKeys = function (direction, keys) {
      if (direction === 'left') {
        _this.setState(function (_ref) {
          var sourceSelectedKeys = _ref.sourceSelectedKeys;
          return {
            sourceSelectedKeys: typeof keys === 'function' ? keys(sourceSelectedKeys || []) : keys
          };
        });
      } else {
        _this.setState(function (_ref2) {
          var targetSelectedKeys = _ref2.targetSelectedKeys;
          return {
            targetSelectedKeys: typeof keys === 'function' ? keys(targetSelectedKeys || []) : keys
          };
        });
      }
    };

    _this.getLocale = function (transferLocale, renderEmpty) {
      return _extends(_extends(_extends({}, transferLocale), {
        notFoundContent: renderEmpty('Transfer')
      }), _this.props.locale);
    };

    _this.moveTo = function (direction) {
      var _this$props = _this.props,
          _this$props$targetKey = _this$props.targetKeys,
          targetKeys = _this$props$targetKey === void 0 ? [] : _this$props$targetKey,
          _this$props$dataSourc = _this$props.dataSource,
          dataSource = _this$props$dataSourc === void 0 ? [] : _this$props$dataSourc,
          onChange = _this$props.onChange;
      var _this$state = _this.state,
          sourceSelectedKeys = _this$state.sourceSelectedKeys,
          targetSelectedKeys = _this$state.targetSelectedKeys;
      var moveKeys = direction === 'right' ? sourceSelectedKeys : targetSelectedKeys; // filter the disabled options

      var newMoveKeys = moveKeys.filter(function (key) {
        return !dataSource.some(function (data) {
          return !!(key === data.key && data.disabled);
        });
      }); // move items to target box

      var newTargetKeys = direction === 'right' ? newMoveKeys.concat(targetKeys) : targetKeys.filter(function (targetKey) {
        return newMoveKeys.indexOf(targetKey) === -1;
      }); // empty checked keys

      var oppositeDirection = direction === 'right' ? 'left' : 'right';

      _this.setStateKeys(oppositeDirection, []);

      _this.handleSelectChange(oppositeDirection, []);

      if (onChange) {
        onChange(newTargetKeys, direction, newMoveKeys);
      }
    };

    _this.moveToLeft = function () {
      return _this.moveTo('left');
    };

    _this.moveToRight = function () {
      return _this.moveTo('right');
    };

    _this.onItemSelectAll = function (direction, selectedKeys, checkAll) {
      _this.setStateKeys(direction, function (prevKeys) {
        var mergedCheckedKeys = [];

        if (checkAll) {
          // Merge current keys with origin key
          mergedCheckedKeys = Array.from(new Set([].concat(_toConsumableArray(prevKeys), _toConsumableArray(selectedKeys))));
        } else {
          // Remove current keys from origin keys
          mergedCheckedKeys = prevKeys.filter(function (key) {
            return selectedKeys.indexOf(key) === -1;
          });
        }

        _this.handleSelectChange(direction, mergedCheckedKeys);

        return mergedCheckedKeys;
      });
    };

    _this.onLeftItemSelectAll = function (selectedKeys, checkAll) {
      return _this.onItemSelectAll('left', selectedKeys, checkAll);
    };

    _this.onRightItemSelectAll = function (selectedKeys, checkAll) {
      return _this.onItemSelectAll('right', selectedKeys, checkAll);
    };

    _this.handleFilter = function (direction, e) {
      var onSearch = _this.props.onSearch;
      var value = e.target.value;

      if (onSearch) {
        onSearch(direction, value);
      }
    };

    _this.handleLeftFilter = function (e) {
      return _this.handleFilter('left', e);
    };

    _this.handleRightFilter = function (e) {
      return _this.handleFilter('right', e);
    };

    _this.handleClear = function (direction) {
      var onSearch = _this.props.onSearch;

      if (onSearch) {
        onSearch(direction, '');
      }
    };

    _this.handleLeftClear = function () {
      return _this.handleClear('left');
    };

    _this.handleRightClear = function () {
      return _this.handleClear('right');
    };

    _this.onItemSelect = function (direction, selectedKey, checked) {
      var _this$state2 = _this.state,
          sourceSelectedKeys = _this$state2.sourceSelectedKeys,
          targetSelectedKeys = _this$state2.targetSelectedKeys;
      var holder = direction === 'left' ? _toConsumableArray(sourceSelectedKeys) : _toConsumableArray(targetSelectedKeys);
      var index = holder.indexOf(selectedKey);

      if (index > -1) {
        holder.splice(index, 1);
      }

      if (checked) {
        holder.push(selectedKey);
      }

      _this.handleSelectChange(direction, holder);

      if (!_this.props.selectedKeys) {
        _this.setStateKeys(direction, holder);
      }
    };

    _this.onLeftItemSelect = function (selectedKey, checked) {
      return _this.onItemSelect('left', selectedKey, checked);
    };

    _this.onRightItemSelect = function (selectedKey, checked) {
      return _this.onItemSelect('right', selectedKey, checked);
    };

    _this.onRightItemRemove = function (selectedKeys) {
      var _this$props2 = _this.props,
          _this$props2$targetKe = _this$props2.targetKeys,
          targetKeys = _this$props2$targetKe === void 0 ? [] : _this$props2$targetKe,
          onChange = _this$props2.onChange;

      _this.setStateKeys('right', []);

      if (onChange) {
        onChange(targetKeys.filter(function (key) {
          return !selectedKeys.includes(key);
        }), 'left', _toConsumableArray(selectedKeys));
      }
    };

    _this.handleScroll = function (direction, e) {
      var onScroll = _this.props.onScroll;

      if (onScroll) {
        onScroll(direction, e);
      }
    };

    _this.handleLeftScroll = function (e) {
      return _this.handleScroll('left', e);
    };

    _this.handleRightScroll = function (e) {
      return _this.handleScroll('right', e);
    };

    _this.handleListStyle = function (listStyle, direction) {
      if (typeof listStyle === 'function') {
        return listStyle({
          direction: direction
        });
      }

      return listStyle;
    };

    _this.renderTransfer = function (transferLocale) {
      return /*#__PURE__*/React.createElement(ConfigConsumer, null, function (_ref3) {
        var _classNames;

        var getPrefixCls = _ref3.getPrefixCls,
            renderEmpty = _ref3.renderEmpty,
            direction = _ref3.direction;
        var _this$props3 = _this.props,
            customizePrefixCls = _this$props3.prefixCls,
            className = _this$props3.className,
            disabled = _this$props3.disabled,
            _this$props3$operatio = _this$props3.operations,
            operations = _this$props3$operatio === void 0 ? [] : _this$props3$operatio,
            showSearch = _this$props3.showSearch,
            footer = _this$props3.footer,
            style = _this$props3.style,
            listStyle = _this$props3.listStyle,
            operationStyle = _this$props3.operationStyle,
            filterOption = _this$props3.filterOption,
            render = _this$props3.render,
            children = _this$props3.children,
            showSelectAll = _this$props3.showSelectAll,
            oneWay = _this$props3.oneWay,
            pagination = _this$props3.pagination;
        var prefixCls = getPrefixCls('transfer', customizePrefixCls);

        var locale = _this.getLocale(transferLocale, renderEmpty);

        var _this$state3 = _this.state,
            sourceSelectedKeys = _this$state3.sourceSelectedKeys,
            targetSelectedKeys = _this$state3.targetSelectedKeys;
        var mergedPagination = !children && pagination;

        var _this$separateDataSou = _this.separateDataSource(),
            leftDataSource = _this$separateDataSou.leftDataSource,
            rightDataSource = _this$separateDataSou.rightDataSource;

        var leftActive = targetSelectedKeys.length > 0;
        var rightActive = sourceSelectedKeys.length > 0;
        var cls = classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-disabled\\"), disabled), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-customize-list\\"), !!children), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), _classNames), className);

        var titles = _this.getTitles(locale);

        var selectAllLabels = _this.props.selectAllLabels || [];
        return /*#__PURE__*/React.createElement(\\"div\\", {
          className: cls,
          style: style
        }, /*#__PURE__*/React.createElement(TransferList, _extends({
          prefixCls: \\"\\".concat(prefixCls, \\"-list\\"),
          titleText: titles[0],
          dataSource: leftDataSource,
          filterOption: filterOption,
          style: _this.handleListStyle(listStyle, 'left'),
          checkedKeys: sourceSelectedKeys,
          handleFilter: _this.handleLeftFilter,
          handleClear: _this.handleLeftClear,
          onItemSelect: _this.onLeftItemSelect,
          onItemSelectAll: _this.onLeftItemSelectAll,
          render: render,
          showSearch: showSearch,
          renderList: children,
          footer: footer,
          onScroll: _this.handleLeftScroll,
          disabled: disabled,
          direction: \\"left\\",
          showSelectAll: showSelectAll,
          selectAllLabel: selectAllLabels[0],
          pagination: mergedPagination
        }, locale)), /*#__PURE__*/React.createElement(Operation, {
          className: \\"\\".concat(prefixCls, \\"-operation\\"),
          rightActive: rightActive,
          rightArrowText: operations[0],
          moveToRight: _this.moveToRight,
          leftActive: leftActive,
          leftArrowText: operations[1],
          moveToLeft: _this.moveToLeft,
          style: operationStyle,
          disabled: disabled,
          direction: direction,
          oneWay: oneWay
        }), /*#__PURE__*/React.createElement(TransferList, _extends({
          prefixCls: \\"\\".concat(prefixCls, \\"-list\\"),
          titleText: titles[1],
          dataSource: rightDataSource,
          filterOption: filterOption,
          style: _this.handleListStyle(listStyle, 'right'),
          checkedKeys: targetSelectedKeys,
          handleFilter: _this.handleRightFilter,
          handleClear: _this.handleRightClear,
          onItemSelect: _this.onRightItemSelect,
          onItemSelectAll: _this.onRightItemSelectAll,
          onItemRemove: _this.onRightItemRemove,
          render: render,
          showSearch: showSearch,
          renderList: children,
          footer: footer,
          onScroll: _this.handleRightScroll,
          disabled: disabled,
          direction: \\"right\\",
          showSelectAll: showSelectAll,
          selectAllLabel: selectAllLabels[1],
          showRemove: oneWay,
          pagination: mergedPagination
        }, locale)));
      });
    };

    var _props$selectedKeys = props.selectedKeys,
        selectedKeys = _props$selectedKeys === void 0 ? [] : _props$selectedKeys,
        _props$targetKeys = props.targetKeys,
        targetKeys = _props$targetKeys === void 0 ? [] : _props$targetKeys;
    _this.state = {
      sourceSelectedKeys: selectedKeys.filter(function (key) {
        return targetKeys.indexOf(key) === -1;
      }),
      targetSelectedKeys: selectedKeys.filter(function (key) {
        return targetKeys.indexOf(key) > -1;
      })
    };
    return _this;
  }

  _createClass(Transfer, [{
    key: \\"getTitles\\",
    value: function getTitles(transferLocale) {
      var titles = this.props.titles;

      if (titles) {
        return titles;
      }

      return transferLocale.titles;
    }
  }, {
    key: \\"handleSelectChange\\",
    value: function handleSelectChange(direction, holder) {
      var _this$state4 = this.state,
          sourceSelectedKeys = _this$state4.sourceSelectedKeys,
          targetSelectedKeys = _this$state4.targetSelectedKeys;
      var onSelectChange = this.props.onSelectChange;

      if (!onSelectChange) {
        return;
      }

      if (direction === 'left') {
        onSelectChange(holder, targetSelectedKeys);
      } else {
        onSelectChange(sourceSelectedKeys, holder);
      }
    }
  }, {
    key: \\"separateDataSource\\",
    value: function separateDataSource() {
      var _this$props4 = this.props,
          dataSource = _this$props4.dataSource,
          rowKey = _this$props4.rowKey,
          _this$props4$targetKe = _this$props4.targetKeys,
          targetKeys = _this$props4$targetKe === void 0 ? [] : _this$props4$targetKe;
      var leftDataSource = [];
      var rightDataSource = new Array(targetKeys.length);
      dataSource.forEach(function (record) {
        if (rowKey) {
          record = _extends(_extends({}, record), {
            key: rowKey(record)
          });
        } // rightDataSource should be ordered by targetKeys
        // leftDataSource should be ordered by dataSource


        var indexOfKey = targetKeys.indexOf(record.key);

        if (indexOfKey !== -1) {
          rightDataSource[indexOfKey] = record;
        } else {
          leftDataSource.push(record);
        }
      });
      return {
        leftDataSource: leftDataSource,
        rightDataSource: rightDataSource
      };
    }
  }, {
    key: \\"render\\",
    value: function render() {
      return /*#__PURE__*/React.createElement(LocaleReceiver, {
        componentName: \\"Transfer\\",
        defaultLocale: localeValues.Transfer
      }, this.renderTransfer);
    }
  }], [{
    key: \\"getDerivedStateFromProps\\",
    value: function getDerivedStateFromProps(_ref4) {
      var selectedKeys = _ref4.selectedKeys,
          targetKeys = _ref4.targetKeys,
          pagination = _ref4.pagination,
          children = _ref4.children;

      if (selectedKeys) {
        var mergedTargetKeys = targetKeys || [];
        return {
          sourceSelectedKeys: selectedKeys.filter(function (key) {
            return !mergedTargetKeys.includes(key);
          }),
          targetSelectedKeys: selectedKeys.filter(function (key) {
            return mergedTargetKeys.includes(key);
          })
        };
      }

      devWarning(!pagination || !children, 'Transfer', '\`pagination\` not support customize render list.');
      return null;
    }
  }]);

  return Transfer;
}(React.Component); // For high-level customized Transfer @dqaria


Transfer.List = TransferList;
Transfer.Operation = Operation;
Transfer.Search = Search;
Transfer.defaultProps = {
  dataSource: [],
  locale: {},
  showSearch: false,
  listStyle: function listStyle() {}
};

// This icon file is generated automatically.
var FileOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M854.6 288.6L639.4 73.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.7-9.4-22.7zM790.2 326H602V137.8L790.2 326zm1.8 562H232V136h302v216a42 42 0 0042 42h216v494z\\" } }] }, \\"name\\": \\"file\\", \\"theme\\": \\"outlined\\" };

var FileOutlined = function FileOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: FileOutlined$2
  }));
};

FileOutlined.displayName = 'FileOutlined';
var FileOutlined$1 = /*#__PURE__*/React.forwardRef(FileOutlined);

// This icon file is generated automatically.
var FolderOpenOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M928 444H820V330.4c0-17.7-14.3-32-32-32H473L355.7 186.2a8.15 8.15 0 00-5.5-2.2H96c-17.7 0-32 14.3-32 32v592c0 17.7 14.3 32 32 32h698c13 0 24.8-7.9 29.7-20l134-332c1.5-3.8 2.3-7.9 2.3-12 0-17.7-14.3-32-32-32zM136 256h188.5l119.6 114.4H748V444H238c-13 0-24.8 7.9-29.7 20L136 643.2V256zm635.3 512H159l103.3-256h612.4L771.3 768z\\" } }] }, \\"name\\": \\"folder-open\\", \\"theme\\": \\"outlined\\" };

var FolderOpenOutlined = function FolderOpenOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: FolderOpenOutlined$2
  }));
};

FolderOpenOutlined.displayName = 'FolderOpenOutlined';
var FolderOpenOutlined$1 = /*#__PURE__*/React.forwardRef(FolderOpenOutlined);

// This icon file is generated automatically.
var FolderOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M880 298.4H521L403.7 186.2a8.15 8.15 0 00-5.5-2.2H144c-17.7 0-32 14.3-32 32v592c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V330.4c0-17.7-14.3-32-32-32zM840 768H184V256h188.5l119.6 114.4H840V768z\\" } }] }, \\"name\\": \\"folder\\", \\"theme\\": \\"outlined\\" };

var FolderOutlined = function FolderOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: FolderOutlined$2
  }));
};

FolderOutlined.displayName = 'FolderOutlined';
var FolderOutlined$1 = /*#__PURE__*/React.forwardRef(FolderOutlined);

var Record;

(function (Record) {
  Record[Record[\\"None\\"] = 0] = \\"None\\";
  Record[Record[\\"Start\\"] = 1] = \\"Start\\";
  Record[Record[\\"End\\"] = 2] = \\"End\\";
})(Record || (Record = {}));

function traverseNodesKey(treeData, callback) {
  function processNode(dataNode) {
    var key = dataNode.key,
        children = dataNode.children;

    if (callback(key, dataNode) !== false) {
      traverseNodesKey(children || [], callback);
    }
  }

  treeData.forEach(processNode);
}
/** 计算选中范围，只考虑expanded情况以优化性能 */


function calcRangeKeys(_ref) {
  var treeData = _ref.treeData,
      expandedKeys = _ref.expandedKeys,
      startKey = _ref.startKey,
      endKey = _ref.endKey;
  var keys = [];
  var record = Record.None;

  if (startKey && startKey === endKey) {
    return [startKey];
  }

  if (!startKey || !endKey) {
    return [];
  }

  function matchKey(key) {
    return key === startKey || key === endKey;
  }

  traverseNodesKey(treeData, function (key) {
    if (record === Record.End) {
      return false;
    }

    if (matchKey(key)) {
      // Match test
      keys.push(key);

      if (record === Record.None) {
        record = Record.Start;
      } else if (record === Record.Start) {
        record = Record.End;
        return false;
      }
    } else if (record === Record.Start) {
      // Append selection
      keys.push(key);
    }

    if (expandedKeys.indexOf(key) === -1) {
      return false;
    }

    return true;
  });
  return keys;
}
function convertDirectoryKeysToNodes(treeData, keys) {
  var restKeys = _toConsumableArray(keys);

  var nodes = [];
  traverseNodesKey(treeData, function (key, node) {
    var index = restKeys.indexOf(key);

    if (index !== -1) {
      nodes.push(node);
      restKeys.splice(index, 1);
    }

    return !!restKeys.length;
  });
  return nodes;
}

var __rest$a = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

function getIcon(props) {
  var isLeaf = props.isLeaf,
      expanded = props.expanded;

  if (isLeaf) {
    return /*#__PURE__*/React.createElement(FileOutlined$1, null);
  }

  return expanded ? /*#__PURE__*/React.createElement(FolderOpenOutlined$1, null) : /*#__PURE__*/React.createElement(FolderOutlined$1, null);
}

function getTreeData(_ref) {
  var treeData = _ref.treeData,
      children = _ref.children;
  return treeData || convertTreeToData(children);
}

var DirectoryTree = function DirectoryTree(_a, ref) {
  var defaultExpandAll = _a.defaultExpandAll,
      defaultExpandParent = _a.defaultExpandParent,
      defaultExpandedKeys = _a.defaultExpandedKeys,
      props = __rest$a(_a, [\\"defaultExpandAll\\", \\"defaultExpandParent\\", \\"defaultExpandedKeys\\"]); // Shift click usage


  var lastSelectedKey = React.useRef();
  var cachedSelectedKeys = React.useRef();
  var treeRef = /*#__PURE__*/React.createRef();
  React.useImperativeHandle(ref, function () {
    return treeRef.current;
  });

  var getInitExpandedKeys = function getInitExpandedKeys() {
    var _convertDataToEntitie = convertDataToEntities(getTreeData(props)),
        keyEntities = _convertDataToEntitie.keyEntities;

    var initExpandedKeys; // Expanded keys

    if (defaultExpandAll) {
      initExpandedKeys = Object.keys(keyEntities);
    } else if (defaultExpandParent) {
      initExpandedKeys = conductExpandParent(props.expandedKeys || defaultExpandedKeys, keyEntities);
    } else {
      initExpandedKeys = props.expandedKeys || defaultExpandedKeys;
    }

    return initExpandedKeys;
  };

  var _React$useState = React.useState(props.selectedKeys || props.defaultSelectedKeys || []),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      selectedKeys = _React$useState2[0],
      setSelectedKeys = _React$useState2[1];

  var _React$useState3 = React.useState(getInitExpandedKeys()),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      expandedKeys = _React$useState4[0],
      setExpandedKeys = _React$useState4[1];

  React.useEffect(function () {
    if ('selectedKeys' in props) {
      setSelectedKeys(props.selectedKeys);
    }
  }, [props.selectedKeys]);
  React.useEffect(function () {
    if ('expandedKeys' in props) {
      setExpandedKeys(props.expandedKeys);
    }
  }, [props.expandedKeys]);

  var expandFolderNode = function expandFolderNode(event, node) {
    var isLeaf = node.isLeaf;

    if (isLeaf || event.shiftKey || event.metaKey || event.ctrlKey) {
      return;
    } // Call internal rc-tree expand function
    // https://github.com/ant-design/ant-design/issues/12567


    treeRef.current.onNodeExpand(event, node);
  };

  var onDebounceExpand = debounce(expandFolderNode, 200, {
    leading: true
  });

  var onExpand = function onExpand(keys, info) {
    if (!('expandedKeys' in props)) {
      setExpandedKeys(keys);
    } // Call origin function


    if (props.onExpand) {
      return props.onExpand(keys, info);
    }

    return undefined;
  };

  var onClick = function onClick(event, node) {
    var expandAction = props.expandAction; // Expand the tree

    if (expandAction === 'click') {
      onDebounceExpand(event, node);
    }

    if (props.onClick) {
      props.onClick(event, node);
    }
  };

  var onDoubleClick = function onDoubleClick(event, node) {
    var expandAction = props.expandAction; // Expand the tree

    if (expandAction === 'doubleClick') {
      onDebounceExpand(event, node);
    }

    if (props.onDoubleClick) {
      props.onDoubleClick(event, node);
    }
  };

  var onSelect = function onSelect(keys, event) {
    var multiple = props.multiple;
    var node = event.node,
        nativeEvent = event.nativeEvent;
    var _node$key = node.key,
        key = _node$key === void 0 ? '' : _node$key;
    var treeData = getTreeData(props); // const newState: DirectoryTreeState = {};
    // We need wrap this event since some value is not same

    var newEvent = _extends(_extends({}, event), {
      selected: true
    }); // Windows / Mac single pick


    var ctrlPick = nativeEvent.ctrlKey || nativeEvent.metaKey;
    var shiftPick = nativeEvent.shiftKey; // Generate new selected keys

    var newSelectedKeys;

    if (multiple && ctrlPick) {
      // Control click
      newSelectedKeys = keys;
      lastSelectedKey.current = key;
      cachedSelectedKeys.current = newSelectedKeys;
      newEvent.selectedNodes = convertDirectoryKeysToNodes(treeData, newSelectedKeys);
    } else if (multiple && shiftPick) {
      // Shift click
      newSelectedKeys = Array.from(new Set([].concat(_toConsumableArray(cachedSelectedKeys.current || []), _toConsumableArray(calcRangeKeys({
        treeData: treeData,
        expandedKeys: expandedKeys,
        startKey: key,
        endKey: lastSelectedKey.current
      })))));
      newEvent.selectedNodes = convertDirectoryKeysToNodes(treeData, newSelectedKeys);
    } else {
      // Single click
      newSelectedKeys = [key];
      lastSelectedKey.current = key;
      cachedSelectedKeys.current = newSelectedKeys;
      newEvent.selectedNodes = convertDirectoryKeysToNodes(treeData, newSelectedKeys);
    }

    if (props.onSelect) {
      props.onSelect(newSelectedKeys, newEvent);
    }

    if (!('selectedKeys' in props)) {
      setSelectedKeys(newSelectedKeys);
    }
  };

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  var customizePrefixCls = props.prefixCls,
      className = props.className,
      otherProps = __rest$a(props, [\\"prefixCls\\", \\"className\\"]);

  var prefixCls = getPrefixCls('tree', customizePrefixCls);
  var connectClassName = classNames(\\"\\".concat(prefixCls, \\"-directory\\"), _defineProperty({}, \\"\\".concat(prefixCls, \\"-directory-rtl\\"), direction === 'rtl'), className);
  return /*#__PURE__*/React.createElement(Tree, _extends({
    icon: getIcon,
    ref: treeRef,
    blockNode: true
  }, otherProps, {
    prefixCls: prefixCls,
    className: connectClassName,
    expandedKeys: expandedKeys,
    selectedKeys: selectedKeys,
    onSelect: onSelect,
    onClick: onClick,
    onDoubleClick: onDoubleClick,
    onExpand: onExpand
  }));
};

var ForwardDirectoryTree = /*#__PURE__*/React.forwardRef(DirectoryTree);
ForwardDirectoryTree.displayName = 'DirectoryTree';
ForwardDirectoryTree.defaultProps = {
  showIcon: true,
  expandAction: 'click'
};

// This icon file is generated automatically.
var MinusSquareOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M328 544h368c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H328c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8z\\" } }, { \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z\\" } }] }, \\"name\\": \\"minus-square\\", \\"theme\\": \\"outlined\\" };

var MinusSquareOutlined = function MinusSquareOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: MinusSquareOutlined$2
  }));
};

MinusSquareOutlined.displayName = 'MinusSquareOutlined';
var MinusSquareOutlined$1 = /*#__PURE__*/React.forwardRef(MinusSquareOutlined);

// This icon file is generated automatically.
var PlusSquareOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M328 544h152v152c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V544h152c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H544V328c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v152H328c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8z\\" } }, { \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z\\" } }] }, \\"name\\": \\"plus-square\\", \\"theme\\": \\"outlined\\" };

var PlusSquareOutlined = function PlusSquareOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: PlusSquareOutlined$2
  }));
};

PlusSquareOutlined.displayName = 'PlusSquareOutlined';
var PlusSquareOutlined$1 = /*#__PURE__*/React.forwardRef(PlusSquareOutlined);

// This icon file is generated automatically.
var CaretDownFilled$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"0 0 1024 1024\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M840.4 300H183.6c-19.7 0-30.7 20.8-18.5 35l328.4 380.8c9.4 10.9 27.5 10.9 37 0L858.9 335c12.2-14.2 1.2-35-18.5-35z\\" } }] }, \\"name\\": \\"caret-down\\", \\"theme\\": \\"filled\\" };

var CaretDownFilled = function CaretDownFilled(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: CaretDownFilled$2
  }));
};

CaretDownFilled.displayName = 'CaretDownFilled';
var CaretDownFilled$1 = /*#__PURE__*/React.forwardRef(CaretDownFilled);

function renderSwitcherIcon(prefixCls, switcherIcon, showLine, _ref) {
  var isLeaf = _ref.isLeaf,
      expanded = _ref.expanded,
      loading = _ref.loading;

  if (loading) {
    return /*#__PURE__*/React.createElement(LoadingOutlined$1, {
      className: \\"\\".concat(prefixCls, \\"-switcher-loading-icon\\")
    });
  }

  var showLeafIcon;

  if (showLine && _typeof(showLine) === 'object') {
    showLeafIcon = showLine.showLeafIcon;
  }

  if (isLeaf) {
    if (showLine) {
      if (_typeof(showLine) === 'object' && !showLeafIcon) {
        return /*#__PURE__*/React.createElement(\\"span\\", {
          className: \\"\\".concat(prefixCls, \\"-switcher-leaf-line\\")
        });
      }

      return /*#__PURE__*/React.createElement(FileOutlined$1, {
        className: \\"\\".concat(prefixCls, \\"-switcher-line-icon\\")
      });
    }

    return null;
  }

  var switcherCls = \\"\\".concat(prefixCls, \\"-switcher-icon\\");

  if (isValidElement(switcherIcon)) {
    return cloneElement(switcherIcon, {
      className: classNames(switcherIcon.props.className || '', switcherCls)
    });
  }

  if (switcherIcon) {
    return switcherIcon;
  }

  if (showLine) {
    return expanded ? /*#__PURE__*/React.createElement(MinusSquareOutlined$1, {
      className: \\"\\".concat(prefixCls, \\"-switcher-line-icon\\")
    }) : /*#__PURE__*/React.createElement(PlusSquareOutlined$1, {
      className: \\"\\".concat(prefixCls, \\"-switcher-line-icon\\")
    });
  }

  return /*#__PURE__*/React.createElement(CaretDownFilled$1, {
    className: switcherCls
  });
}

var offset = 4;
function dropIndicatorRender(props) {
  var _style;

  var dropPosition = props.dropPosition,
      dropLevelOffset = props.dropLevelOffset,
      prefixCls = props.prefixCls,
      indent = props.indent,
      _props$direction = props.direction,
      direction = _props$direction === void 0 ? 'ltr' : _props$direction;
  var startPosition = direction === 'ltr' ? 'left' : 'right';
  var endPosition = direction === 'ltr' ? 'right' : 'left';
  var style = (_style = {}, _defineProperty(_style, startPosition, -dropLevelOffset * indent + offset), _defineProperty(_style, endPosition, 0), _style);

  switch (dropPosition) {
    case -1:
      style.top = -3;
      break;

    case 1:
      style.bottom = -3;
      break;

    default:
      // dropPosition === 0
      style.bottom = -3;
      style[startPosition] = indent + offset;
      break;
  }

  return /*#__PURE__*/React__default.createElement(\\"div\\", {
    style: style,
    className: \\"\\".concat(prefixCls, \\"-drop-indicator\\")
  });
}

var Tree = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _classNames;

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction,
      virtual = _React$useContext.virtual;

  var customizePrefixCls = props.prefixCls,
      className = props.className,
      showIcon = props.showIcon,
      showLine = props.showLine,
      _switcherIcon = props.switcherIcon,
      blockNode = props.blockNode,
      children = props.children,
      checkable = props.checkable,
      selectable = props.selectable;
  var prefixCls = getPrefixCls('tree', customizePrefixCls);

  var newProps = _extends(_extends({}, props), {
    showLine: Boolean(showLine),
    dropIndicatorRender: dropIndicatorRender
  });

  return /*#__PURE__*/React.createElement(RcTree, _extends({
    itemHeight: 20,
    ref: ref,
    virtual: virtual
  }, newProps, {
    prefixCls: prefixCls,
    className: classNames((_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-icon-hide\\"), !showIcon), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-block-node\\"), blockNode), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-unselectable\\"), !selectable), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), _classNames), className),
    direction: direction,
    checkable: checkable ? /*#__PURE__*/React.createElement(\\"span\\", {
      className: \\"\\".concat(prefixCls, \\"-checkbox-inner\\")
    }) : checkable,
    selectable: selectable,
    switcherIcon: function switcherIcon(nodeProps) {
      return renderSwitcherIcon(prefixCls, _switcherIcon, showLine, nodeProps);
    }
  }), children);
});
Tree.TreeNode = TreeNode;
Tree.DirectoryTree = ForwardDirectoryTree;
Tree.defaultProps = {
  checkable: false,
  selectable: true,
  showIcon: false,
  motion: _extends(_extends({}, collapseMotion), {
    motionAppear: false
  }),
  blockNode: false
};

var __rest$9 = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var InternalTreeSelect = function InternalTreeSelect(_a, ref) {
  var _classNames2;

  var customizePrefixCls = _a.prefixCls,
      customizeSize = _a.size,
      _a$bordered = _a.bordered,
      bordered = _a$bordered === void 0 ? true : _a$bordered,
      className = _a.className,
      treeCheckable = _a.treeCheckable,
      multiple = _a.multiple,
      _a$listHeight = _a.listHeight,
      listHeight = _a$listHeight === void 0 ? 256 : _a$listHeight,
      _a$listItemHeight = _a.listItemHeight,
      listItemHeight = _a$listItemHeight === void 0 ? 26 : _a$listItemHeight,
      notFoundContent = _a.notFoundContent,
      _switcherIcon = _a.switcherIcon,
      treeLine = _a.treeLine,
      getPopupContainer = _a.getPopupContainer,
      dropdownClassName = _a.dropdownClassName,
      _a$treeIcon = _a.treeIcon,
      treeIcon = _a$treeIcon === void 0 ? false : _a$treeIcon,
      _a$transitionName = _a.transitionName,
      transitionName = _a$transitionName === void 0 ? 'slide-up' : _a$transitionName,
      _a$choiceTransitionNa = _a.choiceTransitionName,
      choiceTransitionName = _a$choiceTransitionNa === void 0 ? '' : _a$choiceTransitionNa,
      props = __rest$9(_a, [\\"prefixCls\\", \\"size\\", \\"bordered\\", \\"className\\", \\"treeCheckable\\", \\"multiple\\", \\"listHeight\\", \\"listItemHeight\\", \\"notFoundContent\\", \\"switcherIcon\\", \\"treeLine\\", \\"getPopupContainer\\", \\"dropdownClassName\\", \\"treeIcon\\", \\"transitionName\\", \\"choiceTransitionName\\"]);

  var _React$useContext = React.useContext(ConfigContext),
      getContextPopupContainer = _React$useContext.getPopupContainer,
      getPrefixCls = _React$useContext.getPrefixCls,
      renderEmpty = _React$useContext.renderEmpty,
      direction = _React$useContext.direction,
      virtual = _React$useContext.virtual,
      dropdownMatchSelectWidth = _React$useContext.dropdownMatchSelectWidth;

  var size = React.useContext(SizeContext$1);
  devWarning(multiple !== false || !treeCheckable, 'TreeSelect', '\`multiple\` will alway be \`true\` when \`treeCheckable\` is true');
  var prefixCls = getPrefixCls('select', customizePrefixCls);
  var treePrefixCls = getPrefixCls('select-tree', customizePrefixCls);
  var treeSelectPrefixCls = getPrefixCls('tree-select', customizePrefixCls);
  var mergedDropdownClassName = classNames(dropdownClassName, \\"\\".concat(treeSelectPrefixCls, \\"-dropdown\\"), _defineProperty({}, \\"\\".concat(treeSelectPrefixCls, \\"-dropdown-rtl\\"), direction === 'rtl'));
  var isMultiple = !!(treeCheckable || multiple); // ===================== Icons =====================

  var _getIcons = getIcons(_extends(_extends({}, props), {
    multiple: isMultiple,
    prefixCls: prefixCls
  })),
      suffixIcon = _getIcons.suffixIcon,
      removeIcon = _getIcons.removeIcon,
      clearIcon = _getIcons.clearIcon; // ===================== Empty =====================


  var mergedNotFound;

  if (notFoundContent !== undefined) {
    mergedNotFound = notFoundContent;
  } else {
    mergedNotFound = renderEmpty('Select');
  } // ==================== Render =====================


  var selectProps = omit(props, ['suffixIcon', 'itemIcon', 'removeIcon', 'clearIcon', 'switcherIcon']);
  var mergedSize = customizeSize || size;
  var mergedClassName = classNames(!customizePrefixCls && treeSelectPrefixCls, (_classNames2 = {}, _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-lg\\"), mergedSize === 'large'), _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-sm\\"), mergedSize === 'small'), _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-borderless\\"), !bordered), _classNames2), className);
  return /*#__PURE__*/React.createElement(RcTreeSelect, _extends({
    virtual: virtual,
    dropdownMatchSelectWidth: dropdownMatchSelectWidth
  }, selectProps, {
    ref: ref,
    prefixCls: prefixCls,
    className: mergedClassName,
    listHeight: listHeight,
    listItemHeight: listItemHeight,
    treeCheckable: treeCheckable ? /*#__PURE__*/React.createElement(\\"span\\", {
      className: \\"\\".concat(prefixCls, \\"-tree-checkbox-inner\\")
    }) : treeCheckable,
    inputIcon: suffixIcon,
    multiple: multiple,
    removeIcon: removeIcon,
    clearIcon: clearIcon,
    switcherIcon: function switcherIcon(nodeProps) {
      return renderSwitcherIcon(treePrefixCls, _switcherIcon, treeLine, nodeProps);
    },
    showTreeIcon: treeIcon,
    notFoundContent: mergedNotFound,
    getPopupContainer: getPopupContainer || getContextPopupContainer,
    treeMotion: null,
    dropdownClassName: mergedDropdownClassName,
    choiceTransitionName: choiceTransitionName,
    transitionName: transitionName
  }));
};

var TreeSelectRef = /*#__PURE__*/React.forwardRef(InternalTreeSelect);
var TreeSelect = TreeSelectRef;
TreeSelect.TreeNode = TreeNode$1;
TreeSelect.SHOW_ALL = SHOW_ALL;
TreeSelect.SHOW_PARENT = SHOW_PARENT;
TreeSelect.SHOW_CHILD = SHOW_CHILD;

var __rest$8 = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var InternalTimePicker = DatePicker.TimePicker,
    InternalRangePicker = DatePicker.RangePicker;
var RangePicker = /*#__PURE__*/React.forwardRef(function (props, ref) {
  return /*#__PURE__*/React.createElement(InternalRangePicker, _extends({}, props, {
    picker: \\"time\\",
    mode: undefined,
    ref: ref
  }));
});
var TimePicker = /*#__PURE__*/React.forwardRef(function (_a, ref) {
  var addon = _a.addon,
      renderExtraFooter = _a.renderExtraFooter,
      popupClassName = _a.popupClassName,
      restProps = __rest$8(_a, [\\"addon\\", \\"renderExtraFooter\\", \\"popupClassName\\"]);

  var internalRenderExtraFooter = React.useMemo(function () {
    if (renderExtraFooter) {
      return renderExtraFooter;
    }

    if (addon) {
      devWarning(false, 'TimePicker', '\`addon\` is deprecated. Please use \`renderExtraFooter\` instead.');
      return addon;
    }

    return undefined;
  }, [addon, renderExtraFooter]);
  return /*#__PURE__*/React.createElement(InternalTimePicker, _extends({}, restProps, {
    dropdownClassName: popupClassName,
    mode: undefined,
    ref: ref,
    renderExtraFooter: internalRenderExtraFooter
  }));
});
TimePicker.displayName = 'TimePicker';
TimePicker.RangePicker = RangePicker;

var __rest$7 = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var TimelineItem = function TimelineItem(_a) {
  var _classNames, _classNames2;

  var customizePrefixCls = _a.prefixCls,
      className = _a.className,
      _a$color = _a.color,
      color = _a$color === void 0 ? 'blue' : _a$color,
      dot = _a.dot,
      _a$pending = _a.pending,
      pending = _a$pending === void 0 ? false : _a$pending,
      position = _a.position,
      label = _a.label,
      children = _a.children,
      restProps = __rest$7(_a, [\\"prefixCls\\", \\"className\\", \\"color\\", \\"dot\\", \\"pending\\", \\"position\\", \\"label\\", \\"children\\"]);

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls;

  var prefixCls = getPrefixCls('timeline', customizePrefixCls);
  var itemClassName = classNames((_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-item\\"), true), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-item-pending\\"), pending), _classNames), className);
  var dotClassName = classNames((_classNames2 = {}, _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-item-head\\"), true), _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-item-head-custom\\"), dot), _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-item-head-\\").concat(color), true), _classNames2));
  return /*#__PURE__*/React.createElement(\\"li\\", _extends({}, restProps, {
    className: itemClassName
  }), label && /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-item-label\\")
  }, label), /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-item-tail\\")
  }), /*#__PURE__*/React.createElement(\\"div\\", {
    className: dotClassName,
    style: {
      borderColor: /blue|red|green|gray/.test(color || '') ? undefined : color
    }
  }, dot), /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-item-content\\")
  }, children));
};

var __rest$6 = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var Timeline = function Timeline(props) {
  var _classNames;

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  var customizePrefixCls = props.prefixCls,
      _props$pending = props.pending,
      pending = _props$pending === void 0 ? null : _props$pending,
      pendingDot = props.pendingDot,
      children = props.children,
      className = props.className,
      _props$reverse = props.reverse,
      reverse = _props$reverse === void 0 ? false : _props$reverse,
      _props$mode = props.mode,
      mode = _props$mode === void 0 ? '' : _props$mode,
      restProps = __rest$6(props, [\\"prefixCls\\", \\"pending\\", \\"pendingDot\\", \\"children\\", \\"className\\", \\"reverse\\", \\"mode\\"]);

  var prefixCls = getPrefixCls('timeline', customizePrefixCls);
  var pendingNode = typeof pending === 'boolean' ? null : pending;
  var pendingItem = pending ? /*#__PURE__*/React.createElement(TimelineItem, {
    pending: !!pending,
    dot: pendingDot || /*#__PURE__*/React.createElement(LoadingOutlined$1, null)
  }, pendingNode) : null;
  var timeLineItems = React.Children.toArray(children);
  timeLineItems.push(pendingItem);

  if (reverse) {
    timeLineItems.reverse();
  }

  var getPositionCls = function getPositionCls(ele, idx) {
    if (mode === 'alternate') {
      if (ele.props.position === 'right') return \\"\\".concat(prefixCls, \\"-item-right\\");
      if (ele.props.position === 'left') return \\"\\".concat(prefixCls, \\"-item-left\\");
      return idx % 2 === 0 ? \\"\\".concat(prefixCls, \\"-item-left\\") : \\"\\".concat(prefixCls, \\"-item-right\\");
    }

    if (mode === 'left') return \\"\\".concat(prefixCls, \\"-item-left\\");
    if (mode === 'right') return \\"\\".concat(prefixCls, \\"-item-right\\");
    if (ele.props.position === 'right') return \\"\\".concat(prefixCls, \\"-item-right\\");
    return '';
  }; // Remove falsy items


  var truthyItems = timeLineItems.filter(function (item) {
    return !!item;
  });
  var itemsCount = React.Children.count(truthyItems);
  var lastCls = \\"\\".concat(prefixCls, \\"-item-last\\");
  var items = React.Children.map(truthyItems, function (ele, idx) {
    var pendingClass = idx === itemsCount - 2 ? lastCls : '';
    var readyClass = idx === itemsCount - 1 ? lastCls : '';
    return cloneElement(ele, {
      className: classNames([ele.props.className, !reverse && !!pending ? pendingClass : readyClass, getPositionCls(ele, idx)])
    });
  });
  var hasLabelItem = timeLineItems.some(function (item) {
    var _a;

    return !!((_a = item === null || item === void 0 ? void 0 : item.props) === null || _a === void 0 ? void 0 : _a.label);
  });
  var classString = classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-pending\\"), !!pending), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-reverse\\"), !!reverse), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-\\").concat(mode), !!mode && !hasLabelItem), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-label\\"), hasLabelItem), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), _classNames), className);
  return /*#__PURE__*/React.createElement(\\"ul\\", _extends({}, restProps, {
    className: classString
  }), items);
};

Timeline.Item = TimelineItem;

var __rest$5 = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var Typography$1 = function Typography(_a, ref) {
  var customizePrefixCls = _a.prefixCls,
      _a$component = _a.component,
      component = _a$component === void 0 ? 'article' : _a$component,
      className = _a.className,
      ariaLabel = _a['aria-label'],
      setContentRef = _a.setContentRef,
      children = _a.children,
      restProps = __rest$5(_a, [\\"prefixCls\\", \\"component\\", \\"className\\", 'aria-label', \\"setContentRef\\", \\"children\\"]);

  var mergedRef = ref;

  if (setContentRef) {
    devWarning(false, 'Typography', '\`setContentRef\` is deprecated. Please use \`ref\` instead.');
    mergedRef = composeRef(ref, setContentRef);
  }

  return /*#__PURE__*/React.createElement(ConfigConsumer, null, function (_ref) {
    var getPrefixCls = _ref.getPrefixCls,
        direction = _ref.direction;
    var Component = component;
    var prefixCls = getPrefixCls('typography', customizePrefixCls);
    var componentClassName = classNames(prefixCls, _defineProperty({}, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), className);
    return /*#__PURE__*/React.createElement(Component, _extends({
      className: componentClassName,
      \\"aria-label\\": ariaLabel,
      ref: mergedRef
    }, restProps), children);
  });
};

var RefTypography = /*#__PURE__*/React.forwardRef(Typography$1);
RefTypography.displayName = 'Typography'; // es default export should use const instead of let

var ExportTypography = RefTypography;

// This icon file is generated automatically.
var EditOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M257.7 752c2 0 4-.2 6-.5L431.9 722c2-.4 3.9-1.3 5.3-2.8l423.9-423.9a9.96 9.96 0 000-14.1L694.9 114.9c-1.9-1.9-4.4-2.9-7.1-2.9s-5.2 1-7.1 2.9L256.8 538.8c-1.5 1.5-2.4 3.3-2.8 5.3l-29.5 168.2a33.5 33.5 0 009.4 29.8c6.6 6.4 14.9 9.9 23.8 9.9zm67.4-174.4L687.8 215l73.3 73.3-362.7 362.6-88.9 15.7 15.6-89zM880 836H144c-17.7 0-32 14.3-32 32v36c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-36c0-17.7-14.3-32-32-32z\\" } }] }, \\"name\\": \\"edit\\", \\"theme\\": \\"outlined\\" };

var EditOutlined = function EditOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: EditOutlined$2
  }));
};

EditOutlined.displayName = 'EditOutlined';
var EditOutlined$1 = /*#__PURE__*/React.forwardRef(EditOutlined);

// This icon file is generated automatically.
var CopyOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z\\" } }] }, \\"name\\": \\"copy\\", \\"theme\\": \\"outlined\\" };

var CopyOutlined = function CopyOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: CopyOutlined$2
  }));
};

CopyOutlined.displayName = 'CopyOutlined';
var CopyOutlined$1 = /*#__PURE__*/React.forwardRef(CopyOutlined);

// This icon file is generated automatically.
var EnterOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M864 170h-60c-4.4 0-8 3.6-8 8v518H310v-73c0-6.7-7.8-10.5-13-6.3l-141.9 112a8 8 0 000 12.6l141.9 112c5.3 4.2 13 .4 13-6.3v-75h498c35.3 0 64-28.7 64-64V178c0-4.4-3.6-8-8-8z\\" } }] }, \\"name\\": \\"enter\\", \\"theme\\": \\"outlined\\" };

var EnterOutlined = function EnterOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: EnterOutlined$2
  }));
};

EnterOutlined.displayName = 'EnterOutlined';
var EnterOutlined$1 = /*#__PURE__*/React.forwardRef(EnterOutlined);

var Editable = function Editable(_ref) {
  var prefixCls = _ref.prefixCls,
      ariaLabel = _ref['aria-label'],
      className = _ref.className,
      style = _ref.style,
      direction = _ref.direction,
      maxLength = _ref.maxLength,
      _ref$autoSize = _ref.autoSize,
      autoSize = _ref$autoSize === void 0 ? true : _ref$autoSize,
      value = _ref.value,
      onSave = _ref.onSave,
      onCancel = _ref.onCancel;
  var ref = React.useRef();
  var inComposition = React.useRef(false);
  var lastKeyCode = React.useRef();

  var _React$useState = React.useState(value),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      current = _React$useState2[0],
      setCurrent = _React$useState2[1];

  React.useEffect(function () {
    setCurrent(value);
  }, [value]);
  React.useEffect(function () {
    if (ref.current && ref.current.resizableTextArea) {
      var textArea = ref.current.resizableTextArea.textArea;
      textArea.focus();
      var length = textArea.value.length;
      textArea.setSelectionRange(length, length);
    }
  }, []);

  var onChange = function onChange(_ref2) {
    var target = _ref2.target;
    setCurrent(target.value.replace(/[\\\\n\\\\r]/g, ''));
  };

  var onCompositionStart = function onCompositionStart() {
    inComposition.current = true;
  };

  var onCompositionEnd = function onCompositionEnd() {
    inComposition.current = false;
  };

  var onKeyDown = function onKeyDown(_ref3) {
    var keyCode = _ref3.keyCode;
    // We don't record keyCode when IME is using
    if (inComposition.current) return;
    lastKeyCode.current = keyCode;
  };

  var confirmChange = function confirmChange() {
    onSave(current.trim());
  };

  var onKeyUp = function onKeyUp(_ref4) {
    var keyCode = _ref4.keyCode,
        ctrlKey = _ref4.ctrlKey,
        altKey = _ref4.altKey,
        metaKey = _ref4.metaKey,
        shiftKey = _ref4.shiftKey;

    // Check if it's a real key
    if (lastKeyCode.current === keyCode && !inComposition.current && !ctrlKey && !altKey && !metaKey && !shiftKey) {
      if (keyCode === KeyCode.ENTER) {
        confirmChange();
      } else if (keyCode === KeyCode.ESC) {
        onCancel();
      }
    }
  };

  var onBlur = function onBlur() {
    confirmChange();
  };

  var textAreaClassName = classNames(prefixCls, \\"\\".concat(prefixCls, \\"-edit-content\\"), _defineProperty({}, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), className);
  return /*#__PURE__*/React.createElement(\\"div\\", {
    className: textAreaClassName,
    style: style
  }, /*#__PURE__*/React.createElement(TextArea, {
    ref: ref,
    maxLength: maxLength,
    value: current,
    onChange: onChange,
    onKeyDown: onKeyDown,
    onKeyUp: onKeyUp,
    onCompositionStart: onCompositionStart,
    onCompositionEnd: onCompositionEnd,
    onBlur: onBlur,
    \\"aria-label\\": ariaLabel,
    autoSize: autoSize
  }), /*#__PURE__*/React.createElement(EnterOutlined$1, {
    className: \\"\\".concat(prefixCls, \\"-edit-content-confirm\\")
  }));
};

var ELEMENT_NODE = 1;
var TEXT_NODE = 3;
var COMMENT_NODE = 8;
var ellipsisContainer;
var wrapperStyle = {
  padding: 0,
  margin: 0,
  display: 'inline',
  lineHeight: 'inherit'
};

function pxToNumber(value) {
  if (!value) return 0;
  var match = value.match(/^\\\\d*(\\\\.\\\\d*)?/);
  return match ? Number(match[0]) : 0;
}

function styleToString(style) {
  // There are some different behavior between Firefox & Chrome.
  // We have to handle this ourself.
  var styleNames = Array.prototype.slice.apply(style);
  return styleNames.map(function (name) {
    return \\"\\".concat(name, \\": \\").concat(style.getPropertyValue(name), \\";\\");
  }).join('');
}

function mergeChildren(children) {
  var childList = [];
  children.forEach(function (child) {
    var prevChild = childList[childList.length - 1];

    if (typeof child === 'string' && typeof prevChild === 'string') {
      childList[childList.length - 1] += child;
    } else {
      childList.push(child);
    }
  });
  return childList;
}

var measure = (function (originEle, option, content, fixedContent, ellipsisStr) {
  if (!ellipsisContainer) {
    ellipsisContainer = document.createElement('div');
    ellipsisContainer.setAttribute('aria-hidden', 'true');
    document.body.appendChild(ellipsisContainer);
  }

  var rows = option.rows,
      _option$suffix = option.suffix,
      suffix = _option$suffix === void 0 ? '' : _option$suffix; // Get origin style

  var originStyle = window.getComputedStyle(originEle);
  var originCSS = styleToString(originStyle);
  var lineHeight = pxToNumber(originStyle.lineHeight);
  var maxHeight = Math.round(lineHeight * (rows + 1) + pxToNumber(originStyle.paddingTop) + pxToNumber(originStyle.paddingBottom)); // Set shadow

  ellipsisContainer.setAttribute('style', originCSS);
  ellipsisContainer.style.position = 'fixed';
  ellipsisContainer.style.left = '0';
  ellipsisContainer.style.height = 'auto';
  ellipsisContainer.style.minHeight = 'auto';
  ellipsisContainer.style.maxHeight = 'auto';
  ellipsisContainer.style.top = '-999999px';
  ellipsisContainer.style.zIndex = '-1000'; // clean up css overflow

  ellipsisContainer.style.textOverflow = 'clip';
  ellipsisContainer.style.whiteSpace = 'normal';
  ellipsisContainer.style.webkitLineClamp = 'none'; // Render in the fake container

  var contentList = mergeChildren(toArray$2(content));
  render( /*#__PURE__*/React.createElement(\\"div\\", {
    style: wrapperStyle
  }, /*#__PURE__*/React.createElement(\\"span\\", {
    style: wrapperStyle
  }, contentList, suffix), /*#__PURE__*/React.createElement(\\"span\\", {
    style: wrapperStyle
  }, fixedContent)), ellipsisContainer); // wrap in an div for old version react
  // Check if ellipsis in measure div is height enough for content

  function inRange() {
    return ellipsisContainer.offsetHeight < maxHeight;
  } // Skip ellipsis if already match


  if (inRange()) {
    unmountComponentAtNode(ellipsisContainer);
    return {
      content: content,
      text: ellipsisContainer.innerHTML,
      ellipsis: false
    };
  } // We should clone the childNode since they're controlled by React and we can't reuse it without warning


  var childNodes = Array.prototype.slice.apply(ellipsisContainer.childNodes[0].childNodes[0].cloneNode(true).childNodes).filter(function (_ref) {
    var nodeType = _ref.nodeType;
    return nodeType !== COMMENT_NODE;
  });
  var fixedNodes = Array.prototype.slice.apply(ellipsisContainer.childNodes[0].childNodes[1].cloneNode(true).childNodes);
  unmountComponentAtNode(ellipsisContainer); // ========================= Find match ellipsis content =========================

  var ellipsisChildren = [];
  ellipsisContainer.innerHTML = ''; // Create origin content holder

  var ellipsisContentHolder = document.createElement('span');
  ellipsisContainer.appendChild(ellipsisContentHolder);
  var ellipsisTextNode = document.createTextNode(ellipsisStr + suffix);
  ellipsisContentHolder.appendChild(ellipsisTextNode);
  fixedNodes.forEach(function (childNode) {
    ellipsisContainer.appendChild(childNode);
  }); // Append before fixed nodes

  function appendChildNode(node) {
    ellipsisContentHolder.insertBefore(node, ellipsisTextNode);
  } // Get maximum text


  function measureText(textNode, fullText) {
    var startLoc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var endLoc = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : fullText.length;
    var lastSuccessLoc = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
    var midLoc = Math.floor((startLoc + endLoc) / 2);
    var currentText = fullText.slice(0, midLoc);
    textNode.textContent = currentText;

    if (startLoc >= endLoc - 1) {
      // Loop when step is small
      for (var step = endLoc; step >= startLoc; step -= 1) {
        var currentStepText = fullText.slice(0, step);
        textNode.textContent = currentStepText;

        if (inRange() || !currentStepText) {
          return step === fullText.length ? {
            finished: false,
            reactNode: fullText
          } : {
            finished: true,
            reactNode: currentStepText
          };
        }
      }
    }

    if (inRange()) {
      return measureText(textNode, fullText, midLoc, endLoc, midLoc);
    }

    return measureText(textNode, fullText, startLoc, midLoc, lastSuccessLoc);
  }

  function measureNode(childNode, index) {
    var type = childNode.nodeType;

    if (type === ELEMENT_NODE) {
      // We don't split element, it will keep if whole element can be displayed.
      appendChildNode(childNode);

      if (inRange()) {
        return {
          finished: false,
          reactNode: contentList[index]
        };
      } // Clean up if can not pull in


      ellipsisContentHolder.removeChild(childNode);
      return {
        finished: true,
        reactNode: null
      };
    }

    if (type === TEXT_NODE) {
      var fullText = childNode.textContent || '';
      var textNode = document.createTextNode(fullText);
      appendChildNode(textNode);
      return measureText(textNode, fullText);
    } // Not handle other type of content
    // PS: This code should not be attached after react 16

    /* istanbul ignore next */


    return {
      finished: false,
      reactNode: null
    };
  }

  childNodes.some(function (childNode, index) {
    var _measureNode = measureNode(childNode, index),
        finished = _measureNode.finished,
        reactNode = _measureNode.reactNode;

    if (reactNode) {
      ellipsisChildren.push(reactNode);
    }

    return finished;
  });
  return {
    content: ellipsisChildren,
    text: ellipsisContainer.innerHTML,
    ellipsis: true
  };
});

var __rest$4 = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var isLineClampSupport = isStyleSupport('webkitLineClamp');
var isTextOverflowSupport = isStyleSupport('textOverflow');

function wrapperDecorations(_ref, content) {
  var mark = _ref.mark,
      code = _ref.code,
      underline = _ref.underline,
      del = _ref[\\"delete\\"],
      strong = _ref.strong,
      keyboard = _ref.keyboard;
  var currentContent = content;

  function wrap(needed, tag) {
    if (!needed) return;
    currentContent = /*#__PURE__*/React.createElement(tag, {}, currentContent);
  }

  wrap(strong, 'strong');
  wrap(underline, 'u');
  wrap(del, 'del');
  wrap(code, 'code');
  wrap(mark, 'mark');
  wrap(keyboard, 'kbd');
  return currentContent;
}

var ELLIPSIS_STR = '...';

var Base = /*#__PURE__*/function (_React$Component) {
  _inherits(Base, _React$Component);

  var _super = _createSuper(Base);

  function Base() {
    var _this;

    _classCallCheck(this, Base);

    _this = _super.apply(this, arguments);
    _this.contentRef = /*#__PURE__*/React.createRef();
    _this.state = {
      edit: false,
      copied: false,
      ellipsisText: '',
      ellipsisContent: null,
      isEllipsis: false,
      expanded: false,
      clientRendered: false
    };

    _this.getPrefixCls = function () {
      var customizePrefixCls = _this.props.prefixCls;
      var getPrefixCls = _this.context.getPrefixCls;
      return getPrefixCls('typography', customizePrefixCls);
    }; // =============== Expand ===============


    _this.onExpandClick = function (e) {
      var _this$getEllipsis = _this.getEllipsis(),
          onExpand = _this$getEllipsis.onExpand;

      _this.setState({
        expanded: true
      });

      if (onExpand) {
        onExpand(e);
      }
    }; // ================ Edit ================


    _this.onEditClick = function () {
      _this.triggerEdit(true);
    };

    _this.onEditChange = function (value) {
      var _this$getEditable = _this.getEditable(),
          onChange = _this$getEditable.onChange;

      if (onChange) {
        onChange(value);
      }

      _this.triggerEdit(false);
    };

    _this.onEditCancel = function () {
      _this.triggerEdit(false);
    }; // ================ Copy ================


    _this.onCopyClick = function (e) {
      e.preventDefault();
      var _this$props = _this.props,
          children = _this$props.children,
          copyable = _this$props.copyable;

      var copyConfig = _extends({}, _typeof(copyable) === 'object' ? copyable : null);

      if (copyConfig.text === undefined) {
        copyConfig.text = String(children);
      }

      copy(copyConfig.text || '');

      _this.setState({
        copied: true
      }, function () {
        if (copyConfig.onCopy) {
          copyConfig.onCopy();
        }

        _this.copyId = window.setTimeout(function () {
          _this.setState({
            copied: false
          });
        }, 3000);
      });
    };

    _this.setEditRef = function (node) {
      _this.editIcon = node;
    };

    _this.triggerEdit = function (edit) {
      var _this$getEditable2 = _this.getEditable(),
          onStart = _this$getEditable2.onStart;

      if (edit && onStart) {
        onStart();
      }

      _this.setState({
        edit: edit
      }, function () {
        if (!edit && _this.editIcon) {
          _this.editIcon.focus();
        }
      });
    }; // ============== Ellipsis ==============


    _this.resizeOnNextFrame = function () {
      wrapperRaf.cancel(_this.rafId);
      _this.rafId = wrapperRaf(function () {
        // Do not bind \`syncEllipsis\`. It need for test usage on prototype
        _this.syncEllipsis();
      });
    };

    return _this;
  }

  _createClass(Base, [{
    key: \\"componentDidMount\\",
    value: function componentDidMount() {
      this.setState({
        clientRendered: true
      });
      this.resizeOnNextFrame();
    }
  }, {
    key: \\"componentDidUpdate\\",
    value: function componentDidUpdate(prevProps) {
      var children = this.props.children;
      var ellipsis = this.getEllipsis();
      var prevEllipsis = this.getEllipsis(prevProps);

      if (children !== prevProps.children || ellipsis.rows !== prevEllipsis.rows) {
        this.resizeOnNextFrame();
      }
    }
  }, {
    key: \\"componentWillUnmount\\",
    value: function componentWillUnmount() {
      window.clearTimeout(this.copyId);
      wrapperRaf.cancel(this.rafId);
    }
  }, {
    key: \\"getEditable\\",
    value: function getEditable(props) {
      var edit = this.state.edit;

      var _ref2 = props || this.props,
          editable = _ref2.editable;

      if (!editable) return {
        editing: edit
      };
      return _extends({
        editing: edit
      }, _typeof(editable) === 'object' ? editable : null);
    }
  }, {
    key: \\"getEllipsis\\",
    value: function getEllipsis(props) {
      var _ref3 = props || this.props,
          ellipsis = _ref3.ellipsis;

      if (!ellipsis) return {};
      return _extends({
        rows: 1,
        expandable: false
      }, _typeof(ellipsis) === 'object' ? ellipsis : null);
    }
  }, {
    key: \\"canUseCSSEllipsis\\",
    value: function canUseCSSEllipsis() {
      var clientRendered = this.state.clientRendered;
      var _this$props2 = this.props,
          editable = _this$props2.editable,
          copyable = _this$props2.copyable;

      var _this$getEllipsis2 = this.getEllipsis(),
          rows = _this$getEllipsis2.rows,
          expandable = _this$getEllipsis2.expandable,
          suffix = _this$getEllipsis2.suffix,
          onEllipsis = _this$getEllipsis2.onEllipsis,
          tooltip = _this$getEllipsis2.tooltip;

      if (suffix || tooltip) return false; // Can't use css ellipsis since we need to provide the place for button

      if (editable || copyable || expandable || !clientRendered || onEllipsis) {
        return false;
      }

      if (rows === 1) {
        return isTextOverflowSupport;
      }

      return isLineClampSupport;
    }
  }, {
    key: \\"syncEllipsis\\",
    value: function syncEllipsis() {
      var _this$state = this.state,
          ellipsisText = _this$state.ellipsisText,
          isEllipsis = _this$state.isEllipsis,
          expanded = _this$state.expanded;

      var _this$getEllipsis3 = this.getEllipsis(),
          rows = _this$getEllipsis3.rows,
          suffix = _this$getEllipsis3.suffix,
          onEllipsis = _this$getEllipsis3.onEllipsis;

      var children = this.props.children;
      if (!rows || rows < 0 || !this.contentRef.current || expanded) return; // Do not measure if css already support ellipsis

      if (this.canUseCSSEllipsis()) return;
      devWarning(toArray$2(children).every(function (child) {
        return typeof child === 'string';
      }), 'Typography', '\`ellipsis\` should use string as children only.');

      var _measure = measure(this.contentRef.current, {
        rows: rows,
        suffix: suffix
      }, children, this.renderOperations(true), ELLIPSIS_STR),
          content = _measure.content,
          text = _measure.text,
          ellipsis = _measure.ellipsis;

      if (ellipsisText !== text || isEllipsis !== ellipsis) {
        this.setState({
          ellipsisText: text,
          ellipsisContent: content,
          isEllipsis: ellipsis
        });

        if (isEllipsis !== ellipsis && onEllipsis) {
          onEllipsis(ellipsis);
        }
      }
    }
  }, {
    key: \\"renderExpand\\",
    value: function renderExpand(forceRender) {
      var _this$getEllipsis4 = this.getEllipsis(),
          expandable = _this$getEllipsis4.expandable,
          symbol = _this$getEllipsis4.symbol;

      var _this$state2 = this.state,
          expanded = _this$state2.expanded,
          isEllipsis = _this$state2.isEllipsis;
      if (!expandable) return null; // force render expand icon for measure usage or it will cause dead loop

      if (!forceRender && (expanded || !isEllipsis)) return null;
      var expandContent;

      if (symbol) {
        expandContent = symbol;
      } else {
        expandContent = this.expandStr;
      }

      return /*#__PURE__*/React.createElement(\\"a\\", {
        key: \\"expand\\",
        className: \\"\\".concat(this.getPrefixCls(), \\"-expand\\"),
        onClick: this.onExpandClick,
        \\"aria-label\\": this.expandStr
      }, expandContent);
    }
  }, {
    key: \\"renderEdit\\",
    value: function renderEdit() {
      var editable = this.props.editable;
      if (!editable) return;
      var icon = editable.icon,
          tooltip = editable.tooltip;
      var title = toArray$2(tooltip)[0] || this.editStr;
      var ariaLabel = typeof title === 'string' ? title : '';
      return /*#__PURE__*/React.createElement(Tooltip, {
        key: \\"edit\\",
        title: tooltip === false ? '' : title
      }, /*#__PURE__*/React.createElement(TransButton, {
        ref: this.setEditRef,
        className: \\"\\".concat(this.getPrefixCls(), \\"-edit\\"),
        onClick: this.onEditClick,
        \\"aria-label\\": ariaLabel
      }, icon || /*#__PURE__*/React.createElement(EditOutlined$1, {
        role: \\"button\\"
      })));
    }
  }, {
    key: \\"renderCopy\\",
    value: function renderCopy() {
      var copied = this.state.copied;
      var copyable = this.props.copyable;
      if (!copyable) return;
      var prefixCls = this.getPrefixCls();
      var tooltips = copyable.tooltips;
      var tooltipNodes = toArray$2(tooltips);

      if (tooltipNodes.length === 0) {
        tooltipNodes = [this.copyStr, this.copiedStr];
      }

      var title = copied ? tooltipNodes[1] : tooltipNodes[0];
      var ariaLabel = typeof title === 'string' ? title : '';
      var icons = toArray$2(copyable.icon);
      return /*#__PURE__*/React.createElement(Tooltip, {
        key: \\"copy\\",
        title: tooltips === false ? '' : title
      }, /*#__PURE__*/React.createElement(TransButton, {
        className: classNames(\\"\\".concat(prefixCls, \\"-copy\\"), copied && \\"\\".concat(prefixCls, \\"-copy-success\\")),
        onClick: this.onCopyClick,
        \\"aria-label\\": ariaLabel
      }, copied ? icons[1] || /*#__PURE__*/React.createElement(CheckOutlined$1, null) : icons[0] || /*#__PURE__*/React.createElement(CopyOutlined$1, null)));
    }
  }, {
    key: \\"renderEditInput\\",
    value: function renderEditInput() {
      var _this$props3 = this.props,
          children = _this$props3.children,
          className = _this$props3.className,
          style = _this$props3.style;
      var direction = this.context.direction;

      var _this$getEditable3 = this.getEditable(),
          maxLength = _this$getEditable3.maxLength,
          autoSize = _this$getEditable3.autoSize;

      return /*#__PURE__*/React.createElement(Editable, {
        value: typeof children === 'string' ? children : '',
        onSave: this.onEditChange,
        onCancel: this.onEditCancel,
        prefixCls: this.getPrefixCls(),
        className: className,
        style: style,
        direction: direction,
        maxLength: maxLength,
        autoSize: autoSize
      });
    }
  }, {
    key: \\"renderOperations\\",
    value: function renderOperations(forceRenderExpanded) {
      return [this.renderExpand(forceRenderExpanded), this.renderEdit(), this.renderCopy()].filter(function (node) {
        return node;
      });
    }
  }, {
    key: \\"renderContent\\",
    value: function renderContent() {
      var _this2 = this;

      var _this$state3 = this.state,
          ellipsisContent = _this$state3.ellipsisContent,
          isEllipsis = _this$state3.isEllipsis,
          expanded = _this$state3.expanded;

      var _a = this.props,
          component = _a.component,
          children = _a.children,
          className = _a.className,
          type = _a.type,
          disabled = _a.disabled,
          style = _a.style,
          restProps = __rest$4(_a, [\\"component\\", \\"children\\", \\"className\\", \\"type\\", \\"disabled\\", \\"style\\"]);

      var direction = this.context.direction;

      var _this$getEllipsis5 = this.getEllipsis(),
          rows = _this$getEllipsis5.rows,
          suffix = _this$getEllipsis5.suffix,
          tooltip = _this$getEllipsis5.tooltip;

      var prefixCls = this.getPrefixCls();
      var textProps = omit(restProps, ['prefixCls', 'editable', 'copyable', 'ellipsis', 'mark', 'code', 'delete', 'underline', 'strong', 'keyboard'].concat(_toConsumableArray(configConsumerProps)));
      var cssEllipsis = this.canUseCSSEllipsis();
      var cssTextOverflow = rows === 1 && cssEllipsis;
      var cssLineClamp = rows && rows > 1 && cssEllipsis;
      var textNode = children; // Only use js ellipsis when css ellipsis not support

      if (rows && isEllipsis && !expanded && !cssEllipsis) {
        var title = restProps.title;
        var restContent = title || '';

        if (!title && (typeof children === 'string' || typeof children === 'number')) {
          restContent = String(children);
        } // show rest content as title on symbol


        restContent = restContent === null || restContent === void 0 ? void 0 : restContent.slice(String(ellipsisContent || '').length); // We move full content to outer element to avoid repeat read the content by accessibility

        textNode = /*#__PURE__*/React.createElement(React.Fragment, null, ellipsisContent, /*#__PURE__*/React.createElement(\\"span\\", {
          title: restContent,
          \\"aria-hidden\\": \\"true\\"
        }, ELLIPSIS_STR), suffix); // If provided tooltip, we need wrap with span to let Tooltip inject events

        if (tooltip) {
          textNode = /*#__PURE__*/React.createElement(Tooltip, {
            title: tooltip === true ? children : tooltip
          }, /*#__PURE__*/React.createElement(\\"span\\", null, textNode));
        }
      } else {
        textNode = /*#__PURE__*/React.createElement(React.Fragment, null, children, suffix);
      }

      textNode = wrapperDecorations(this.props, textNode);
      return /*#__PURE__*/React.createElement(LocaleReceiver, {
        componentName: \\"Text\\"
      }, function (_ref4) {
        var _classNames;

        var edit = _ref4.edit,
            copyStr = _ref4.copy,
            copied = _ref4.copied,
            expand = _ref4.expand;
        _this2.editStr = edit;
        _this2.copyStr = copyStr;
        _this2.copiedStr = copied;
        _this2.expandStr = expand;
        return /*#__PURE__*/React.createElement(ResizeObserver, {
          onResize: _this2.resizeOnNextFrame,
          disabled: !rows
        }, /*#__PURE__*/React.createElement(ExportTypography, _extends({
          className: classNames((_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-\\").concat(type), type), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-disabled\\"), disabled), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-ellipsis\\"), rows), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-ellipsis-single-line\\"), cssTextOverflow), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-ellipsis-multiple-line\\"), cssLineClamp), _classNames), className),
          style: _extends(_extends({}, style), {
            WebkitLineClamp: cssLineClamp ? rows : undefined
          }),
          component: component,
          ref: _this2.contentRef,
          direction: direction
        }, textProps), textNode, _this2.renderOperations()));
      });
    }
  }, {
    key: \\"render\\",
    value: function render() {
      var _this$getEditable4 = this.getEditable(),
          editing = _this$getEditable4.editing;

      if (editing) {
        return this.renderEditInput();
      }

      return this.renderContent();
    }
  }], [{
    key: \\"getDerivedStateFromProps\\",
    value: function getDerivedStateFromProps(nextProps) {
      var children = nextProps.children,
          editable = nextProps.editable;
      devWarning(!editable || typeof children === 'string', 'Typography', 'When \`editable\` is enabled, the \`children\` should use string.');
      return {};
    }
  }]);

  return Base;
}(React.Component);

Base.contextType = ConfigContext;
Base.defaultProps = {
  children: ''
};

var __rest$3 = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var Text = function Text(_a) {
  var ellipsis = _a.ellipsis,
      restProps = __rest$3(_a, [\\"ellipsis\\"]);

  var mergedEllipsis = React.useMemo(function () {
    if (ellipsis && _typeof(ellipsis) === 'object') {
      return omit(ellipsis, ['expandable', 'rows']);
    }

    return ellipsis;
  }, [ellipsis]);
  devWarning(_typeof(ellipsis) !== 'object' || !ellipsis || !('expandable' in ellipsis) && !('rows' in ellipsis), 'Typography.Text', '\`ellipsis\` do not support \`expandable\` or \`rows\` props.');
  return /*#__PURE__*/React.createElement(Base, _extends({}, restProps, {
    ellipsis: mergedEllipsis,
    component: \\"span\\"
  }));
};

var __rest$2 = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var Link = function Link(_a, ref) {
  var ellipsis = _a.ellipsis,
      rel = _a.rel,
      restProps = __rest$2(_a, [\\"ellipsis\\", \\"rel\\"]);

  devWarning(_typeof(ellipsis) !== 'object', 'Typography.Link', '\`ellipsis\` only supports boolean value.');
  var baseRef = React.useRef(null);
  React.useImperativeHandle(ref, function () {
    var _a;

    return (_a = baseRef.current) === null || _a === void 0 ? void 0 : _a.contentRef.current;
  });

  var mergedProps = _extends(_extends({}, restProps), {
    rel: rel === undefined && restProps.target === '_blank' ? 'noopener noreferrer' : rel
  }); // https://github.com/ant-design/ant-design/issues/26622
  // @ts-ignore


  delete mergedProps.navigate;
  return /*#__PURE__*/React.createElement(Base, _extends({}, mergedProps, {
    ref: baseRef,
    ellipsis: !!ellipsis,
    component: \\"a\\"
  }));
};

var Link$1 = /*#__PURE__*/React.forwardRef(Link);

var __rest$1 = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var TITLE_ELE_LIST = tupleNum(1, 2, 3, 4, 5);

var Title = function Title(props) {
  var _props$level = props.level,
      level = _props$level === void 0 ? 1 : _props$level,
      restProps = __rest$1(props, [\\"level\\"]);

  var component;

  if (TITLE_ELE_LIST.indexOf(level) !== -1) {
    component = \\"h\\".concat(level);
  } else {
    devWarning(false, 'Typography.Title', 'Title only accept \`1 | 2 | 3 | 4 | 5\` as \`level\` value. And \`5\` need 4.6.0+ version.');
    component = 'h1';
  }

  return /*#__PURE__*/React.createElement(Base, _extends({}, restProps, {
    component: component
  }));
};

var Paragraph = function Paragraph(props) {
  return /*#__PURE__*/React.createElement(Base, _extends({}, props, {
    component: \\"div\\"
  }));
};

var Typography = ExportTypography;
Typography.Text = Text;
Typography.Link = Link$1;
Typography.Title = Title;
Typography.Paragraph = Paragraph;

var __rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var InternalDragger = function InternalDragger(_a, ref) {
  var style = _a.style,
      height = _a.height,
      restProps = __rest(_a, [\\"style\\", \\"height\\"]);

  return /*#__PURE__*/React.createElement(Upload, _extends({
    ref: ref
  }, restProps, {
    type: \\"drag\\",
    style: _extends(_extends({}, style), {
      height: height
    })
  }));
};

var Dragger = /*#__PURE__*/React.forwardRef(InternalDragger);
Dragger.displayName = 'Dragger';

// This icon file is generated automatically.
var PaperClipOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M779.3 196.6c-94.2-94.2-247.6-94.2-341.7 0l-261 260.8c-1.7 1.7-2.6 4-2.6 6.4s.9 4.7 2.6 6.4l36.9 36.9a9 9 0 0012.7 0l261-260.8c32.4-32.4 75.5-50.2 121.3-50.2s88.9 17.8 121.2 50.2c32.4 32.4 50.2 75.5 50.2 121.2 0 45.8-17.8 88.8-50.2 121.2l-266 265.9-43.1 43.1c-40.3 40.3-105.8 40.3-146.1 0-19.5-19.5-30.2-45.4-30.2-73s10.7-53.5 30.2-73l263.9-263.8c6.7-6.6 15.5-10.3 24.9-10.3h.1c9.4 0 18.1 3.7 24.7 10.3 6.7 6.7 10.3 15.5 10.3 24.9 0 9.3-3.7 18.1-10.3 24.7L372.4 653c-1.7 1.7-2.6 4-2.6 6.4s.9 4.7 2.6 6.4l36.9 36.9a9 9 0 0012.7 0l215.6-215.6c19.9-19.9 30.8-46.3 30.8-74.4s-11-54.6-30.8-74.4c-41.1-41.1-107.9-41-149 0L463 364 224.8 602.1A172.22 172.22 0 00174 724.8c0 46.3 18.1 89.8 50.8 122.5 33.9 33.8 78.3 50.7 122.7 50.7 44.4 0 88.8-16.9 122.6-50.7l309.2-309C824.8 492.7 850 432 850 367.5c.1-64.6-25.1-125.3-70.7-170.9z\\" } }] }, \\"name\\": \\"paper-clip\\", \\"theme\\": \\"outlined\\" };

var PaperClipOutlined = function PaperClipOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: PaperClipOutlined$2
  }));
};

PaperClipOutlined.displayName = 'PaperClipOutlined';
var PaperClipOutlined$1 = /*#__PURE__*/React.forwardRef(PaperClipOutlined);

// This icon file is generated automatically.
var PictureTwoTone$2 = { \\"icon\\": function render(primaryColor, secondaryColor) { return { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M928 160H96c-17.7 0-32 14.3-32 32v640c0 17.7 14.3 32 32 32h832c17.7 0 32-14.3 32-32V192c0-17.7-14.3-32-32-32zm-40 632H136v-39.9l138.5-164.3 150.1 178L658.1 489 888 761.6V792zm0-129.8L664.2 396.8c-3.2-3.8-9-3.8-12.2 0L424.6 666.4l-144-170.7c-3.2-3.8-9-3.8-12.2 0L136 652.7V232h752v430.2z\\", \\"fill\\": primaryColor } }, { \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M424.6 765.8l-150.1-178L136 752.1V792h752v-30.4L658.1 489z\\", \\"fill\\": secondaryColor } }, { \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M136 652.7l132.4-157c3.2-3.8 9-3.8 12.2 0l144 170.7L652 396.8c3.2-3.8 9-3.8 12.2 0L888 662.2V232H136v420.7zM304 280a88 88 0 110 176 88 88 0 010-176z\\", \\"fill\\": secondaryColor } }, { \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M276 368a28 28 0 1056 0 28 28 0 10-56 0z\\", \\"fill\\": secondaryColor } }, { \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M304 456a88 88 0 100-176 88 88 0 000 176zm0-116c15.5 0 28 12.5 28 28s-12.5 28-28 28-28-12.5-28-28 12.5-28 28-28z\\", \\"fill\\": primaryColor } }] }; }, \\"name\\": \\"picture\\", \\"theme\\": \\"twotone\\" };

var PictureTwoTone = function PictureTwoTone(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: PictureTwoTone$2
  }));
};

PictureTwoTone.displayName = 'PictureTwoTone';
var PictureTwoTone$1 = /*#__PURE__*/React.forwardRef(PictureTwoTone);

// This icon file is generated automatically.
var FileTwoTone$2 = { \\"icon\\": function render(primaryColor, secondaryColor) { return { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M534 352V136H232v752h560V394H576a42 42 0 01-42-42z\\", \\"fill\\": secondaryColor } }, { \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M854.6 288.6L639.4 73.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.7-9.4-22.7zM602 137.8L790.2 326H602V137.8zM792 888H232V136h302v216a42 42 0 0042 42h216v494z\\", \\"fill\\": primaryColor } }] }; }, \\"name\\": \\"file\\", \\"theme\\": \\"twotone\\" };

var FileTwoTone = function FileTwoTone(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: FileTwoTone$2
  }));
};

FileTwoTone.displayName = 'FileTwoTone';
var FileTwoTone$1 = /*#__PURE__*/React.forwardRef(FileTwoTone);

function T() {
  return true;
} // Fix IE file.status problem
// via coping a new Object

function fileToObject(file) {
  return _extends(_extends({}, file), {
    lastModified: file.lastModified,
    lastModifiedDate: file.lastModifiedDate,
    name: file.name,
    size: file.size,
    type: file.type,
    uid: file.uid,
    percent: 0,
    originFileObj: file
  });
}
function getFileItem(file, fileList) {
  var matchKey = file.uid !== undefined ? 'uid' : 'name';
  return fileList.filter(function (item) {
    return item[matchKey] === file[matchKey];
  })[0];
}
function removeFileItem(file, fileList) {
  var matchKey = file.uid !== undefined ? 'uid' : 'name';
  var removed = fileList.filter(function (item) {
    return item[matchKey] !== file[matchKey];
  });

  if (removed.length === fileList.length) {
    return null;
  }

  return removed;
} // ==================== Default Image Preview ====================

var extname = function extname() {
  var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var temp = url.split('/');
  var filename = temp[temp.length - 1];
  var filenameWithoutSuffix = filename.split(/#|\\\\?/)[0];
  return (/\\\\.[^./\\\\\\\\]*$/.exec(filenameWithoutSuffix) || [''])[0];
};

var isImageFileType = function isImageFileType(type) {
  return type.indexOf('image/') === 0;
};

var isImageUrl = function isImageUrl(file) {
  if (file.type && !file.thumbUrl) {
    return isImageFileType(file.type);
  }

  var url = file.thumbUrl || file.url;
  var extension = extname(url);

  if (/^data:image\\\\//.test(url) || /(webp|svg|png|gif|jpg|jpeg|jfif|bmp|dpg|ico)$/i.test(extension)) {
    return true;
  }

  if (/^data:/.test(url)) {
    // other file types of base64
    return false;
  }

  if (extension) {
    // other file types which have extension
    return false;
  }

  return true;
};
var MEASURE_SIZE = 200;
function previewImage(file) {
  return new Promise(function (resolve) {
    if (!file.type || !isImageFileType(file.type)) {
      resolve('');
      return;
    }

    var canvas = document.createElement('canvas');
    canvas.width = MEASURE_SIZE;
    canvas.height = MEASURE_SIZE;
    canvas.style.cssText = \\"position: fixed; left: 0; top: 0; width: \\".concat(MEASURE_SIZE, \\"px; height: \\").concat(MEASURE_SIZE, \\"px; z-index: 9999; display: none;\\");
    document.body.appendChild(canvas);
    var ctx = canvas.getContext('2d');
    var img = new Image();

    img.onload = function () {
      var width = img.width,
          height = img.height;
      var drawWidth = MEASURE_SIZE;
      var drawHeight = MEASURE_SIZE;
      var offsetX = 0;
      var offsetY = 0;

      if (width > height) {
        drawHeight = height * (MEASURE_SIZE / width);
        offsetY = -(drawHeight - drawWidth) / 2;
      } else {
        drawWidth = width * (MEASURE_SIZE / height);
        offsetX = -(drawWidth - drawHeight) / 2;
      }

      ctx.drawImage(img, offsetX, offsetY, drawWidth, drawHeight);
      var dataURL = canvas.toDataURL();
      document.body.removeChild(canvas);
      resolve(dataURL);
    };

    img.src = window.URL.createObjectURL(file);
  });
}

// This icon file is generated automatically.
var DownloadOutlined$2 = { \\"icon\\": { \\"tag\\": \\"svg\\", \\"attrs\\": { \\"viewBox\\": \\"64 64 896 896\\", \\"focusable\\": \\"false\\" }, \\"children\\": [{ \\"tag\\": \\"path\\", \\"attrs\\": { \\"d\\": \\"M505.7 661a8 8 0 0012.6 0l112-141.7c4.1-5.2.4-12.9-6.3-12.9h-74.1V168c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v338.3H400c-6.7 0-10.4 7.7-6.3 12.9l112 141.8zM878 626h-60c-4.4 0-8 3.6-8 8v154H214V634c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v198c0 17.7 14.3 32 32 32h684c17.7 0 32-14.3 32-32V634c0-4.4-3.6-8-8-8z\\" } }] }, \\"name\\": \\"download\\", \\"theme\\": \\"outlined\\" };

var DownloadOutlined = function DownloadOutlined(props, ref) {
  return /*#__PURE__*/React.createElement(Icon, _objectSpread(_objectSpread({}, props), {}, {
    ref: ref,
    icon: DownloadOutlined$2
  }));
};

DownloadOutlined.displayName = 'DownloadOutlined';
var DownloadOutlined$1 = /*#__PURE__*/React.forwardRef(DownloadOutlined);

var ListItem = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var _classNames3;

  var prefixCls = _ref.prefixCls,
      className = _ref.className,
      style = _ref.style,
      locale = _ref.locale,
      listType = _ref.listType,
      file = _ref.file,
      items = _ref.items,
      progressProps = _ref.progress,
      iconRender = _ref.iconRender,
      actionIconRender = _ref.actionIconRender,
      itemRender = _ref.itemRender,
      isImgUrl = _ref.isImgUrl,
      showPreviewIcon = _ref.showPreviewIcon,
      showRemoveIcon = _ref.showRemoveIcon,
      showDownloadIcon = _ref.showDownloadIcon,
      customRemoveIcon = _ref.removeIcon,
      customDownloadIcon = _ref.downloadIcon,
      onPreview = _ref.onPreview,
      onDownload = _ref.onDownload,
      onClose = _ref.onClose;

  var _a, _b; // Delay to show the progress bar


  var _React$useState = React.useState(false),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      showProgress = _React$useState2[0],
      setShowProgress = _React$useState2[1];

  var progressRafRef = React.useRef();
  React.useEffect(function () {
    progressRafRef.current = setTimeout(function () {
      setShowProgress(true);
    }, 300);
    return function () {
      window.clearTimeout(progressRafRef.current);
    };
  }, []); // This is used for legacy span make scrollHeight the wrong value.
  // We will force these to be \`display: block\` with non \`picture-card\`

  var spanClassName = \\"\\".concat(prefixCls, \\"-span\\");
  var iconNode = iconRender(file);
  var icon = /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-text-icon\\")
  }, iconNode);

  if (listType === 'picture' || listType === 'picture-card') {
    if (file.status === 'uploading' || !file.thumbUrl && !file.url) {
      var _classNames;

      var uploadingClassName = classNames((_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-list-item-thumbnail\\"), true), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-list-item-file\\"), file.status !== 'uploading'), _classNames));
      icon = /*#__PURE__*/React.createElement(\\"div\\", {
        className: uploadingClassName
      }, iconNode);
    } else {
      var _classNames2;

      var thumbnail = (isImgUrl === null || isImgUrl === void 0 ? void 0 : isImgUrl(file)) ? /*#__PURE__*/React.createElement(\\"img\\", {
        src: file.thumbUrl || file.url,
        alt: file.name,
        className: \\"\\".concat(prefixCls, \\"-list-item-image\\")
      }) : iconNode;
      var aClassName = classNames((_classNames2 = {}, _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-list-item-thumbnail\\"), true), _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-list-item-file\\"), isImgUrl && !isImgUrl(file)), _classNames2));
      icon = /*#__PURE__*/React.createElement(\\"a\\", {
        className: aClassName,
        onClick: function onClick(e) {
          return onPreview(file, e);
        },
        href: file.url || file.thumbUrl,
        target: \\"_blank\\",
        rel: \\"noopener noreferrer\\"
      }, thumbnail);
    }
  }

  var infoUploadingClass = classNames((_classNames3 = {}, _defineProperty(_classNames3, \\"\\".concat(prefixCls, \\"-list-item\\"), true), _defineProperty(_classNames3, \\"\\".concat(prefixCls, \\"-list-item-\\").concat(file.status), true), _defineProperty(_classNames3, \\"\\".concat(prefixCls, \\"-list-item-list-type-\\").concat(listType), true), _classNames3));
  var linkProps = typeof file.linkProps === 'string' ? JSON.parse(file.linkProps) : file.linkProps;
  var removeIcon = showRemoveIcon ? actionIconRender((typeof customRemoveIcon === 'function' ? customRemoveIcon(file) : customRemoveIcon) || /*#__PURE__*/React.createElement(DeleteOutlined$1, null), function () {
    return onClose(file);
  }, prefixCls, locale.removeFile) : null;
  var downloadIcon = showDownloadIcon && file.status === 'done' ? actionIconRender((typeof customDownloadIcon === 'function' ? customDownloadIcon(file) : customDownloadIcon) || /*#__PURE__*/React.createElement(DownloadOutlined$1, null), function () {
    return onDownload(file);
  }, prefixCls, locale.downloadFile) : null;
  var downloadOrDelete = listType !== 'picture-card' && /*#__PURE__*/React.createElement(\\"span\\", {
    key: \\"download-delete\\",
    className: classNames(\\"\\".concat(prefixCls, \\"-list-item-card-actions\\"), {
      picture: listType === 'picture'
    })
  }, downloadIcon, removeIcon);
  var listItemNameClass = classNames(\\"\\".concat(prefixCls, \\"-list-item-name\\"));
  var preview = file.url ? [/*#__PURE__*/React.createElement(\\"a\\", _extends({
    key: \\"view\\",
    target: \\"_blank\\",
    rel: \\"noopener noreferrer\\",
    className: listItemNameClass,
    title: file.name
  }, linkProps, {
    href: file.url,
    onClick: function onClick(e) {
      return onPreview(file, e);
    }
  }), file.name), downloadOrDelete] : [/*#__PURE__*/React.createElement(\\"span\\", {
    key: \\"view\\",
    className: listItemNameClass,
    onClick: function onClick(e) {
      return onPreview(file, e);
    },
    title: file.name
  }, file.name), downloadOrDelete];
  var previewStyle = {
    pointerEvents: 'none',
    opacity: 0.5
  };
  var previewIcon = showPreviewIcon ? /*#__PURE__*/React.createElement(\\"a\\", {
    href: file.url || file.thumbUrl,
    target: \\"_blank\\",
    rel: \\"noopener noreferrer\\",
    style: file.url || file.thumbUrl ? undefined : previewStyle,
    onClick: function onClick(e) {
      return onPreview(file, e);
    },
    title: locale.previewFile
  }, /*#__PURE__*/React.createElement(EyeOutlined$1, null)) : null;
  var actions = listType === 'picture-card' && file.status !== 'uploading' && /*#__PURE__*/React.createElement(\\"span\\", {
    className: \\"\\".concat(prefixCls, \\"-list-item-actions\\")
  }, previewIcon, file.status === 'done' && downloadIcon, removeIcon);
  var message;

  if (file.response && typeof file.response === 'string') {
    message = file.response;
  } else {
    message = ((_a = file.error) === null || _a === void 0 ? void 0 : _a.statusText) || ((_b = file.error) === null || _b === void 0 ? void 0 : _b.message) || locale.uploadError;
  }

  var iconAndPreview = /*#__PURE__*/React.createElement(\\"span\\", {
    className: spanClassName
  }, icon, preview);
  var dom = /*#__PURE__*/React.createElement(\\"div\\", {
    className: infoUploadingClass
  }, /*#__PURE__*/React.createElement(\\"div\\", {
    className: \\"\\".concat(prefixCls, \\"-list-item-info\\")
  }, iconAndPreview), actions, showProgress && /*#__PURE__*/React.createElement(CSSMotion, {
    motionName: \\"fade\\",
    visible: file.status === 'uploading'
  }, function (_ref2) {
    var motionClassName = _ref2.className;
    // show loading icon if upload progress listener is disabled
    var loadingProgress = 'percent' in file ? /*#__PURE__*/React.createElement(Progress, _extends({}, progressProps, {
      type: \\"line\\",
      percent: file.percent
    })) : null;
    return /*#__PURE__*/React.createElement(\\"div\\", {
      className: classNames(\\"\\".concat(prefixCls, \\"-list-item-progress\\"), motionClassName)
    }, loadingProgress);
  }));
  var listContainerNameClass = classNames(\\"\\".concat(prefixCls, \\"-list-\\").concat(listType, \\"-container\\"), className);
  var item = file.status === 'error' ? /*#__PURE__*/React.createElement(Tooltip, {
    title: message,
    getPopupContainer: function getPopupContainer(node) {
      return node.parentNode;
    }
  }, dom) : dom;
  return /*#__PURE__*/React.createElement(\\"div\\", {
    className: listContainerNameClass,
    style: style,
    ref: ref
  }, itemRender ? itemRender(item, file, items) : item);
});

var listItemMotion = _extends({}, collapseMotion);

delete listItemMotion.onAppearEnd;
delete listItemMotion.onEnterEnd;
delete listItemMotion.onLeaveEnd;

var InternalUploadList = function InternalUploadList(_ref, ref) {
  var _classNames;

  var listType = _ref.listType,
      previewFile = _ref.previewFile,
      onPreview = _ref.onPreview,
      onDownload = _ref.onDownload,
      onRemove = _ref.onRemove,
      locale = _ref.locale,
      iconRender = _ref.iconRender,
      isImgUrl = _ref.isImageUrl,
      customizePrefixCls = _ref.prefixCls,
      _ref$items = _ref.items,
      items = _ref$items === void 0 ? [] : _ref$items,
      showPreviewIcon = _ref.showPreviewIcon,
      showRemoveIcon = _ref.showRemoveIcon,
      showDownloadIcon = _ref.showDownloadIcon,
      removeIcon = _ref.removeIcon,
      downloadIcon = _ref.downloadIcon,
      progress = _ref.progress,
      appendAction = _ref.appendAction,
      itemRender = _ref.itemRender;
  var forceUpdate = useForceUpdate();

  var _React$useState = React.useState(false),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      motionAppear = _React$useState2[0],
      setMotionAppear = _React$useState2[1]; // ============================= Effect =============================


  React.useEffect(function () {
    if (listType !== 'picture' && listType !== 'picture-card') {
      return;
    }

    (items || []).forEach(function (file) {
      if (typeof document === 'undefined' || typeof window === 'undefined' || !window.FileReader || !window.File || !(file.originFileObj instanceof File || file.originFileObj instanceof Blob) || file.thumbUrl !== undefined) {
        return;
      }

      file.thumbUrl = '';

      if (previewFile) {
        previewFile(file.originFileObj).then(function (previewDataUrl) {
          // Need append '' to avoid dead loop
          file.thumbUrl = previewDataUrl || '';
          forceUpdate();
        });
      }
    });
  }, [listType, items, previewFile]);
  React.useEffect(function () {
    setMotionAppear(true);
  }, []); // ============================= Events =============================

  var onInternalPreview = function onInternalPreview(file, e) {
    if (!onPreview) {
      return;
    }

    e.preventDefault();
    return onPreview(file);
  };

  var onInternalDownload = function onInternalDownload(file) {
    if (typeof onDownload === 'function') {
      onDownload(file);
    } else if (file.url) {
      window.open(file.url);
    }
  };

  var onInternalClose = function onInternalClose(file) {
    if (onRemove) {
      onRemove(file);
    }
  };

  var internalIconRender = function internalIconRender(file) {
    if (iconRender) {
      return iconRender(file, listType);
    }

    var isLoading = file.status === 'uploading';
    var fileIcon = isImgUrl && isImgUrl(file) ? /*#__PURE__*/React.createElement(PictureTwoTone$1, null) : /*#__PURE__*/React.createElement(FileTwoTone$1, null);
    var icon = isLoading ? /*#__PURE__*/React.createElement(LoadingOutlined$1, null) : /*#__PURE__*/React.createElement(PaperClipOutlined$1, null);

    if (listType === 'picture') {
      icon = isLoading ? /*#__PURE__*/React.createElement(LoadingOutlined$1, null) : fileIcon;
    } else if (listType === 'picture-card') {
      icon = isLoading ? locale.uploading : fileIcon;
    }

    return icon;
  };

  var actionIconRender = function actionIconRender(customIcon, callback, prefixCls, title) {
    var btnProps = {
      type: 'text',
      size: 'small',
      title: title,
      onClick: function onClick(e) {
        callback();

        if (isValidElement(customIcon) && customIcon.props.onClick) {
          customIcon.props.onClick(e);
        }
      },
      className: \\"\\".concat(prefixCls, \\"-list-item-card-actions-btn\\")
    };

    if (isValidElement(customIcon)) {
      var btnIcon = cloneElement(customIcon, _extends(_extends({}, customIcon.props), {
        onClick: function onClick() {}
      }));
      return /*#__PURE__*/React.createElement(Button$1, _extends({}, btnProps, {
        icon: btnIcon
      }));
    }

    return /*#__PURE__*/React.createElement(Button$1, btnProps, /*#__PURE__*/React.createElement(\\"span\\", null, customIcon));
  }; // ============================== Ref ===============================
  // Test needs


  React.useImperativeHandle(ref, function () {
    return {
      handlePreview: onInternalPreview,
      handleDownload: onInternalDownload
    };
  });

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction; // ============================= Render =============================


  var prefixCls = getPrefixCls('upload', customizePrefixCls);
  var listClassNames = classNames((_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-list\\"), true), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-list-\\").concat(listType), true), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-list-rtl\\"), direction === 'rtl'), _classNames)); // >>> Motion config

  var motionKeyList = _toConsumableArray(items.map(function (file) {
    return {
      key: file.uid,
      file: file
    };
  }));

  var animationDirection = listType === 'picture-card' ? 'animate-inline' : 'animate'; // const transitionName = list.length === 0 ? '' : \`\${prefixCls}-\${animationDirection}\`;

  var motionConfig = {
    motionName: \\"\\".concat(prefixCls, \\"-\\").concat(animationDirection),
    keys: motionKeyList,
    motionAppear: motionAppear
  };

  if (listType !== 'picture-card') {
    motionConfig = _extends(_extends({}, listItemMotion), motionConfig);
  }

  return /*#__PURE__*/React.createElement(\\"div\\", {
    className: listClassNames
  }, /*#__PURE__*/React.createElement(CSSMotionList, _extends({}, motionConfig, {
    component: false
  }), function (_ref2) {
    var key = _ref2.key,
        file = _ref2.file,
        motionClassName = _ref2.className,
        motionStyle = _ref2.style;
    return /*#__PURE__*/React.createElement(ListItem, {
      key: key,
      locale: locale,
      prefixCls: prefixCls,
      className: motionClassName,
      style: motionStyle,
      file: file,
      items: items,
      progress: progress,
      listType: listType,
      isImgUrl: isImgUrl,
      showPreviewIcon: showPreviewIcon,
      showRemoveIcon: showRemoveIcon,
      showDownloadIcon: showDownloadIcon,
      removeIcon: removeIcon,
      downloadIcon: downloadIcon,
      iconRender: internalIconRender,
      actionIconRender: actionIconRender,
      itemRender: itemRender,
      onPreview: onInternalPreview,
      onDownload: onInternalDownload,
      onClose: onInternalClose
    });
  }), appendAction && /*#__PURE__*/React.createElement(CSSMotion, motionConfig, function (_ref3) {
    var motionClassName = _ref3.className,
        motionStyle = _ref3.style;
    return cloneElement(appendAction, function (oriProps) {
      return {
        className: classNames(oriProps.className, motionClassName),
        style: _extends(_extends({}, motionStyle), oriProps.style)
      };
    });
  }));
};

var UploadList = /*#__PURE__*/React.forwardRef(InternalUploadList);
UploadList.displayName = 'UploadList';
UploadList.defaultProps = {
  listType: 'text',
  progress: {
    strokeWidth: 2,
    showInfo: false
  },
  showRemoveIcon: true,
  showDownloadIcon: false,
  showPreviewIcon: true,
  previewFile: previewImage,
  isImageUrl: isImageUrl
};

function useFreshState(defaultValue, propValue) {
  var valueRef = useRef(defaultValue);
  var forceUpdate = useForceUpdate();
  var rafRef = useRef(); // Set value

  function setValue(newValue) {
    valueRef.current = newValue;
    forceUpdate();
  }

  function cleanUp() {
    raf.cancel(rafRef.current);
  }

  function rafSyncValue(newValue) {
    cleanUp();
    rafRef.current = raf(function () {
      setValue(newValue);
    });
  } // Get value


  function getValue() {
    var displayValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    if (displayValue) {
      return propValue || valueRef.current;
    }

    return valueRef.current;
  } // Effect will always update in a next frame to avoid sync state overwrite current processing state


  useEffect(function () {
    if (propValue) {
      rafSyncValue(propValue);
    }
  }, [propValue]); // Clean up

  useEffect(function () {
    return function () {
      cleanUp();
    };
  }, []);
  return [getValue, setValue];
}

var InternalUpload = function InternalUpload(props, ref) {
  var _classNames2;

  var fileListProp = props.fileList,
      defaultFileList = props.defaultFileList,
      onRemove = props.onRemove,
      showUploadList = props.showUploadList,
      listType = props.listType,
      onPreview = props.onPreview,
      onDownload = props.onDownload,
      onChange = props.onChange,
      previewFile = props.previewFile,
      disabled = props.disabled,
      propLocale = props.locale,
      iconRender = props.iconRender,
      isImageUrl = props.isImageUrl,
      progress = props.progress,
      customizePrefixCls = props.prefixCls,
      className = props.className,
      type = props.type,
      children = props.children,
      style = props.style,
      itemRender = props.itemRender,
      maxCount = props.maxCount;

  var _React$useState = React.useState('drop'),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      dragState = _React$useState2[0],
      setDragState = _React$useState2[1];

  var forceUpdate = useForceUpdate(); // Refresh always use fresh data

  var _useFreshState = useFreshState(fileListProp || defaultFileList || [], fileListProp),
      _useFreshState2 = _slicedToArray(_useFreshState, 2),
      getFileList = _useFreshState2[0],
      setFileList = _useFreshState2[1];

  var upload = React.useRef();
  React.useEffect(function () {
    devWarning('fileList' in props || !('value' in props), 'Upload', '\`value\` is not a valid prop, do you mean \`fileList\`?');
    devWarning(!('transformFile' in props), 'Upload', '\`transformFile\` is deprecated. Please use \`beforeUpload\` directly.');
  }, []); // Control mode will auto fill file uid if not provided

  React.useEffect(function () {
    var timestamp = Date.now();
    (fileListProp || []).forEach(function (file, index) {
      var _a;

      file.uid = (_a = file.uid) !== null && _a !== void 0 ? _a : \\"__AUTO__\\".concat(timestamp, \\"_\\").concat(index, \\"__\\");
    });
  }, [fileListProp]);

  var onInternalChange = function onInternalChange(info) {
    var cloneList = _toConsumableArray(info.fileList); // Cut to match count


    if (maxCount === 1) {
      cloneList = cloneList.slice(-1);
    } else if (maxCount) {
      cloneList = cloneList.slice(0, maxCount);
    }

    setFileList(cloneList);
    onChange === null || onChange === void 0 ? void 0 : onChange(_extends(_extends({}, info), {
      fileList: cloneList
    }));
  };

  var onStart = function onStart(file) {
    var targetItem = fileToObject(file);
    targetItem.status = 'uploading';
    var nextFileList = getFileList().concat();
    var fileIndex = nextFileList.findIndex(function (_ref) {
      var uid = _ref.uid;
      return uid === targetItem.uid;
    });

    if (fileIndex === -1) {
      nextFileList.push(targetItem);
    } else {
      nextFileList[fileIndex] = targetItem;
    }

    onInternalChange({
      file: targetItem,
      fileList: nextFileList
    });
  };

  var onSuccess = function onSuccess(response, file, xhr) {
    try {
      if (typeof response === 'string') {
        response = JSON.parse(response);
      }
    } catch (e) {
      /* do nothing */
    }

    var targetItem = getFileItem(file, getFileList()); // removed

    if (!targetItem) {
      return;
    }

    targetItem.status = 'done';
    targetItem.response = response;
    targetItem.xhr = xhr;
    onInternalChange({
      file: _extends({}, targetItem),
      fileList: getFileList().concat()
    });
  };

  var onProgress = function onProgress(e, file) {
    var targetItem = getFileItem(file, getFileList()); // removed

    if (!targetItem) {
      return;
    }

    targetItem.percent = e.percent;
    onInternalChange({
      event: e,
      file: _extends({}, targetItem),
      fileList: getFileList().concat()
    });
  };

  var onError = function onError(error, response, file) {
    var targetItem = getFileItem(file, getFileList()); // removed

    if (!targetItem) {
      return;
    }

    targetItem.error = error;
    targetItem.response = response;
    targetItem.status = 'error';
    onInternalChange({
      file: _extends({}, targetItem),
      fileList: getFileList().concat()
    });
  };

  var handleRemove = function handleRemove(file) {
    var currentFile;
    Promise.resolve(typeof onRemove === 'function' ? onRemove(file) : onRemove).then(function (ret) {
      var _a; // Prevent removing file


      if (ret === false) {
        return;
      }

      var fileList = getFileList();
      var removedFileList = removeFileItem(file, fileList);

      if (removedFileList) {
        currentFile = _extends(_extends({}, file), {
          status: 'removed'
        });
        fileList === null || fileList === void 0 ? void 0 : fileList.forEach(function (item) {
          var matchKey = currentFile.uid !== undefined ? 'uid' : 'name';

          if (item[matchKey] === currentFile[matchKey]) {
            item.status = 'removed';
          }
        });
        (_a = upload.current) === null || _a === void 0 ? void 0 : _a.abort(currentFile);
        onInternalChange({
          file: currentFile,
          fileList: removedFileList
        });
      }
    });
  };

  var onFileDrop = function onFileDrop(e) {
    setDragState(e.type);
  };

  var beforeUpload = function beforeUpload(file, fileListArgs) {
    var beforeUploadProp = props.beforeUpload;

    if (!beforeUploadProp) {
      return true;
    }

    var result = beforeUploadProp(file, fileListArgs);

    if (result === false) {
      // Get unique file list
      var uniqueList = [];
      getFileList().concat(fileListArgs.map(fileToObject)).forEach(function (f) {
        if (uniqueList.every(function (uf) {
          return uf.uid !== f.uid;
        })) {
          uniqueList.push(f);
        }
      });
      onInternalChange({
        file: file,
        fileList: uniqueList
      });
      return false;
    }

    if (result && result.then) {
      return result;
    }

    return true;
  }; // Test needs


  React.useImperativeHandle(ref, function () {
    return {
      onStart: onStart,
      onSuccess: onSuccess,
      onProgress: onProgress,
      onError: onError,
      fileList: getFileList(),
      upload: upload.current,
      forceUpdate: forceUpdate
    };
  });

  var _React$useContext = React.useContext(ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls,
      direction = _React$useContext.direction;

  var prefixCls = getPrefixCls('upload', customizePrefixCls);

  var rcUploadProps = _extends(_extends({
    onStart: onStart,
    onError: onError,
    onProgress: onProgress,
    onSuccess: onSuccess
  }, props), {
    prefixCls: prefixCls,
    beforeUpload: beforeUpload,
    onChange: undefined
  });

  delete rcUploadProps.className;
  delete rcUploadProps.style; // Remove id to avoid open by label when trigger is hidden
  // !children: https://github.com/ant-design/ant-design/issues/14298
  // disabled: https://github.com/ant-design/ant-design/issues/16478
  //           https://github.com/ant-design/ant-design/issues/24197

  if (!children || disabled) {
    delete rcUploadProps.id;
  }

  var renderUploadList = function renderUploadList(button) {
    return showUploadList ? /*#__PURE__*/React.createElement(LocaleReceiver, {
      componentName: \\"Upload\\",
      defaultLocale: localeValues.Upload
    }, function (locale) {
      var _ref2 = typeof showUploadList === 'boolean' ? {} : showUploadList,
          showRemoveIcon = _ref2.showRemoveIcon,
          showPreviewIcon = _ref2.showPreviewIcon,
          showDownloadIcon = _ref2.showDownloadIcon,
          removeIcon = _ref2.removeIcon,
          downloadIcon = _ref2.downloadIcon;

      return /*#__PURE__*/React.createElement(UploadList, {
        listType: listType,
        items: getFileList(true),
        previewFile: previewFile,
        onPreview: onPreview,
        onDownload: onDownload,
        onRemove: handleRemove,
        showRemoveIcon: !disabled && showRemoveIcon,
        showPreviewIcon: showPreviewIcon,
        showDownloadIcon: showDownloadIcon,
        removeIcon: removeIcon,
        downloadIcon: downloadIcon,
        iconRender: iconRender,
        locale: _extends(_extends({}, locale), propLocale),
        isImageUrl: isImageUrl,
        progress: progress,
        appendAction: button,
        itemRender: itemRender
      });
    }) : button;
  };

  if (type === 'drag') {
    var _classNames;

    var dragCls = classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-drag\\"), true), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-drag-uploading\\"), getFileList().some(function (file) {
      return file.status === 'uploading';
    })), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-drag-hover\\"), dragState === 'dragover'), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-disabled\\"), disabled), _defineProperty(_classNames, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), _classNames), className);
    return /*#__PURE__*/React.createElement(\\"span\\", null, /*#__PURE__*/React.createElement(\\"div\\", {
      className: dragCls,
      onDrop: onFileDrop,
      onDragOver: onFileDrop,
      onDragLeave: onFileDrop,
      style: style
    }, /*#__PURE__*/React.createElement(RcUpload, _extends({}, rcUploadProps, {
      ref: upload,
      className: \\"\\".concat(prefixCls, \\"-btn\\")
    }), /*#__PURE__*/React.createElement(\\"div\\", {
      className: \\"\\".concat(prefixCls, \\"-drag-container\\")
    }, children))), renderUploadList());
  }

  var uploadButtonCls = classNames(prefixCls, (_classNames2 = {}, _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-select\\"), true), _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-select-\\").concat(listType), true), _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-disabled\\"), disabled), _defineProperty(_classNames2, \\"\\".concat(prefixCls, \\"-rtl\\"), direction === 'rtl'), _classNames2));
  var uploadButton = /*#__PURE__*/React.createElement(\\"div\\", {
    className: uploadButtonCls,
    style: children ? undefined : {
      display: 'none'
    }
  }, /*#__PURE__*/React.createElement(RcUpload, _extends({}, rcUploadProps, {
    ref: upload
  })));

  if (listType === 'picture-card') {
    return /*#__PURE__*/React.createElement(\\"span\\", {
      className: classNames(\\"\\".concat(prefixCls, \\"-picture-card-wrapper\\"), className)
    }, renderUploadList(uploadButton));
  }

  return /*#__PURE__*/React.createElement(\\"span\\", {
    className: className
  }, uploadButton, renderUploadList());
};

var Upload = /*#__PURE__*/React.forwardRef(InternalUpload);
Upload.Dragger = Dragger;
Upload.displayName = 'Upload';
Upload.defaultProps = {
  type: 'select',
  multiple: false,
  action: '',
  data: {},
  accept: '',
  beforeUpload: T,
  showUploadList: true,
  listType: 'text',
  className: '',
  disabled: false,
  supportServerRender: true
};

Upload.Dragger = Dragger;

var version = '4.12.2';

/* eslint import/no-unresolved: 0 */

/* @remove-on-es-build-begin */
// this file is not used if use https://github.com/ant-design/babel-plugin-import
var ENV = \\"production\\";

if (ENV !== 'production' && ENV !== 'test' && typeof console !== 'undefined' && console.warn && // eslint-disable-line no-console
typeof window !== 'undefined') {
  // eslint-disable-next-line no-console
  console.warn('You are using a whole package of antd, ' + 'please use https://www.npmjs.com/package/babel-plugin-import to reduce app bundle size.');
}

export { Affix, Alert, Anchor, RefAutoComplete as AutoComplete, Avatar, index$1 as BackTop, Badge, Breadcrumb, Button$1 as Button, Calendar, Card, Carousel, Cascader, Checkbox, Col, Collapse, Comment, ConfigProvider, DatePicker, Descriptions, Divider, DrawerWrapper as Drawer, Dropdown, Empty, Form, index as Grid, Image$1 as Image, Input, InputNumber, Layout, List, Mentions, Menu, Modal, PageHeader, Pagination, Popconfirm, Popover, Progress, Radio, Rate, Result, Row$1 as Row, Select, Skeleton, Slider, Space, Spin, WrapperStatistic as Statistic, Steps, Switch, Table, Tabs, Tag, TimePicker, Timeline, Tooltip, Transfer, Tree, TreeSelect, Typography, Upload, api$1 as message, api as notification, version };

// ESMPACK PATCH DEFAULT EXPORT
export default {
Affix: Affix,
Alert: Alert,
Anchor: Anchor,
AutoComplete: RefAutoComplete,
Avatar: Avatar,
BackTop: index$1,
Badge: Badge,
Breadcrumb: Breadcrumb,
Button: Button$1,
Calendar: Calendar,
Card: Card,
Carousel: Carousel,
Cascader: Cascader,
Checkbox: Checkbox,
Col: Col,
Collapse: Collapse,
Comment: Comment,
ConfigProvider: ConfigProvider,
DatePicker: DatePicker,
Descriptions: Descriptions,
Divider: Divider,
Drawer: DrawerWrapper,
Dropdown: Dropdown,
Empty: Empty,
Form: Form,
Grid: index,
Image: Image$1,
Input: Input,
InputNumber: InputNumber,
Layout: Layout,
List: List,
Mentions: Mentions,
Menu: Menu,
Modal: Modal,
PageHeader: PageHeader,
Pagination: Pagination,
Popconfirm: Popconfirm,
Popover: Popover,
Progress: Progress,
Radio: Radio,
Rate: Rate,
Result: Result,
Row: Row$1,
Select: Select,
Skeleton: Skeleton,
Slider: Slider,
Space: Space,
Spin: Spin,
Statistic: WrapperStatistic,
Steps: Steps,
Switch: Switch,
Table: Table,
Tabs: Tabs,
Tag: Tag,
TimePicker: TimePicker,
Timeline: Timeline,
Tooltip: Tooltip,
Transfer: Transfer,
Tree: Tree,
TreeSelect: TreeSelect,
Typography: Typography,
Upload: Upload,
message: api$1,
notification: api,
version: version
}
"
`;
