(self.webpackChunkwebpack=self.webpackChunkwebpack||[]).push([["docs_zh_apis_monorepo_commands_lint_mdx"],{76546:function(e,n,i){"use strict";Object.defineProperty(n,"__esModule",{value:!0});!function(e,n){for(var i in n)Object.defineProperty(e,i,{enumerable:!0,get:n[i]})}(n,{frontmatter:function(){return o},title:function(){return c},toc:function(){return r},default:function(){return a}});var s=i("12151"),t=i("21447");let o={sidebar_position:6},c="lint",r=[];function l(e){let n=Object.assign({h1:"h1",a:"a",div:"div",button:"button",pre:"pre",code:"code",p:"p",ul:"ul",li:"li"},(0,t.useMDXComponents)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"lint",children:["lint",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#lint",children:"#"})]}),"\n",(0,s.jsx)(n.div,{className:"language-",children:(0,s.jsxs)(n.div,{className:"modern-code-content",children:[(0,s.jsx)(n.button,{className:"copy"}),(0,s.jsx)(n.pre,{className:"code",children:(0,s.jsx)(n.code,{className:"language-bash",children:"Usage: modern lint [options] [...files]\n\nlint and fix source files\n\nOptions:\n  --no-fix    disable auto fix source file\n  -h, --help  display help for command\n"})})]})}),"\n",(0,s.jsxs)(n.p,{children:["运行 ",(0,s.jsx)(n.code,{children:"ESLint"})," 检查 monorepo 中代码语法情况， 通长情况下，我们只需要在 ",(0,s.jsx)(n.code,{children:"git commit"})," 阶段通过 ",(0,s.jsx)(n.code,{children:"lint-staged"})," 检查本次提交修改的部分代码。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--no-fix"})," 参数设置后可以关闭自动修复 lint 错误代码的能力。"]}),"\n"]})]})}var a=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.useMDXComponents)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(l,e)})):l(e)}}}]);